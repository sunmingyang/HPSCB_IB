package easycbs.bancmateib.common.ejbserver;



import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.rmi.RemoteException;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.Time;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.regex.Pattern;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.imageio.ImageIO;
import javax.mail.Flags;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Store;
import javax.naming.InitialContext;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import easycbs.bancmateib.accforib.dto.ActivationDto;
import easycbs.bancmateib.common.DateTime.DateTimeFunction;
import easycbs.bancmateib.common.dataclasses.DataBaseClass;
import easycbs.bancmateib.common.dataclasses.SelectDataBean;
import easycbs.bancmateib.common.dataclasses.SelectDataBeanRowCol;
import easycbs.bancmateib.common.dto.BMConfig;
import easycbs.bancmateib.common.dto.ErrorVar;
import easycbs.bancmateib.common.globalfunction.PasswordCrypt;
import easycbs.bancmateib.common.logger.BMLogger;
import easycbs.bancmateib.common.util.BMDouble;
import easycbs.bancmateib.common.util.MD5;
import easycbs.bancmateib.common.util.PasswordGenerator;
import easycbs.bancmateib.common.util.SMSLaneSend;
import easycbs.bancmateib.common.xml.XMLDomParser;
import easycbs.bancmateib.common.xml.XmlParse;
import easycbs.bancmateib.fundtransfer.actionform.FundForm;
import easycbs.bancmateib.fundtransfer.dto.ABBTransferDTO;
import easycbs.bancmateib.fundtransfer.dto.InternetFundTransferDTO;
import easycbs.bancmateib.mail.common.MailMessage;
import easycbs.bancmateib.mail.common.MailMessageInfo;
import easycbs.bancmateib.mail.ejbserver.MailServiceBean;
import easycbs.bancmateib.mail.function.MailFunctions;
import easycbs.bancmateib.pullservice.function.IBFunction;
import easycbs.bancmateib.reports.dto.StatusLogReportDto;
import easycbs.bancmateib.request.dto.DDRequestDto;
import easycbs.bancmateib.request.dto.FdRequestDto;
import easycbs.webservice.rest.RestClient;
import easycbs.webservice.rest.UserInformation;


public class CentralBean implements SessionBean
{
	static final long serialVersionUID=0;
	String sql=null;
	String [][]result=null;
	String [][]result1=null;



	ArrayList<String> req_date=new ArrayList<String>();
	ArrayList<String> req_name=new ArrayList<String>();
	ArrayList<String> req_acc=new ArrayList<String>();
	ArrayList<String> req_type=new ArrayList<String>();

	ArrayList<String> req_mm=new ArrayList<String>();
	ArrayList<String> req_yyyy=new ArrayList<String>();
	ArrayList<String> req_dd=new ArrayList<String>();
	ArrayList<String> req_scheme=new ArrayList<String>();

	ArrayList<String> req_amt=new ArrayList<String>();
	ArrayList<String> req_period=new ArrayList<String>();


	ArrayList<String> req_newdd=new ArrayList<String>();
	ArrayList<String> req_newmm=new ArrayList<String>();
	ArrayList<String> req_newyyyy=new ArrayList<String>();
	ArrayList<String> req_balAbv=new ArrayList<String>();

	ArrayList<String> chk_leafs=new ArrayList<String>();

	ArrayList<String> req_cardNum= new ArrayList<String> ();
	ArrayList<String> ibreq_name= new ArrayList<String> (); 

	ArrayList<String> req_servProv= new ArrayList<String> ();
	ArrayList<String> req_MobileNum= new ArrayList<String> ();
	ArrayList<String> req_Reln= new ArrayList<String> ();

	ArrayList<String> req_Kid= new ArrayList<String> ();
	ArrayList<String> req_flag= new ArrayList<String> ();
	ArrayList<String> req_remarks= new ArrayList<String> ();
	ArrayList<String> req_desc= new ArrayList<String> ();
	ArrayList<String> req_fdScheme= new ArrayList<String> ();
	ArrayList<String> req_month= new ArrayList<String> ();
	ArrayList<String> req_day= new ArrayList<String> ();
	ArrayList<String> req_maturInst= new ArrayList<String> ();
	ArrayList<String> req_payable= new ArrayList<String> ();
	ArrayList<String> req_intrstAcc= new ArrayList<String> ();

	ArrayList<String> req_NameBen= new ArrayList<String> ();
	ArrayList<String> req_curcode= new ArrayList<String> ();

	ArrayList<String> req_dob= new ArrayList<String> ();//newly added by Vijay for Forgot Password..start
	ArrayList<String> req_address= new ArrayList<String> ();
	ArrayList<String> req_cityCode= new ArrayList<String> ();
	ArrayList<String> req_countryCode= new ArrayList<String> ();
	ArrayList<String> req_pinCode= new ArrayList<String> ();
	ArrayList<String> req_mobNo= new ArrayList<String> ();
	ArrayList<String> req_email= new ArrayList<String> ();//end



	HashMap<String,Object> fix_reqDet = new HashMap<String,Object>();

	public String[] loginIdtoAppServer(String loginid,String pass)throws RemoteException {

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db= new DataBaseClass();
		SelectDataBeanRowCol sel_db=new SelectDataBeanRowCol(db);
		String[] appserver=null;
		PasswordCrypt passcrpt=new PasswordCrypt();
		String encrpt=passcrpt.getPasswordCrypted(pass);
		String appservernew[]=new String[2];

		try	{
			logger.info("LoginQuery::::: "+ loginid + "LoginQuery::::: pass " + pass);
			String sql="select ibusr_brncode from s_ibusr where ibusr_usrid='"+loginid+"'and ibusr_usrpass='"+encrpt+"'";
			logger.info("LoginQuery:::::"+sql);			
			String[] brcode=sel_db.getRow(1,sql);

			if ( brcode[0]== null || brcode[0].trim().length()==0)brcode[0]="0010";  

			if(brcode != null){
				sql="select brn_appserver,brn_isconnected,brn_port from s_brn where brn_brcode='"
					+ brcode[0] + "'";
				logger.info("Brn : "+sql);
				appserver=sel_db.getRow(3,sql);
				if(appserver!=null){
					appservernew[0]=appserver[0]+":"+appserver[2];
					appservernew[1]=appserver[1];
				}
			}
		}
		catch(Exception e){
			logger.info("Exception in loginIdtoAppServer");
			logger.info("CentralBean Excption"+e);
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		if(appserver==null)
			return appserver;
		else
			return appservernew;
	}

	public HashMap<String,String> chkUsrEntryByAccBrn(String accno,String brncode)
	{
		DataBaseClass db= new DataBaseClass();
		SelectDataBeanRowCol bean=new SelectDataBeanRowCol(db);
		BMLogger logger=new BMLogger(CentralBean.class);
		boolean b=false;
		HashMap<String,String> map = new HashMap<String,String>() ;
		try{
			String sql="select ibusr_usrid from s_ibusr where ibusr_accno='"+accno+"' and ibusr_brncode='"+brncode+"'";
			String usrid[][]=bean.getData(1,sql);
			if(usrid==null) {
				map.put("duplicate", "false");
				logger.info("Account Number not duplicate");
			}
			else { 
				b=true;
				map.put("duplicate", "true") ;
				map.put("errorCode", "987");
				logger.info("Account Number duplicate");
			}
			if (	accno.trim().length() > 0) {
				RestClient rc=new RestClient();
				String responseStr = (String)rc.callRestService("/AccInfoService/accno/" + accno, "XML");
				logger.info(responseStr);
				XMLDomParser xdom = new XMLDomParser() ; 
				String value = xdom.ExtractElementAB(responseStr, "accountData","mobileNo")  ;
				logger.info("mobileNo" + value);
				if (value != null && value.trim().length() > 0) { 
					b = false ;
					logger.info("mobileNo is valid");
				}else {
					map.put("duplicate", "true") ;
					map.put("errorCode", "1382");
					logger.info("mobileNo is not valid");
				}
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return map;
	}



	public String[] brncodeToAppserver(String sBrnCode)throws RemoteException
	{
		String appservernew[]=new String[2];
		appservernew[0] =  BMConfig.getProperty("CBSSERVER", "127.0.0.1:1399") ;
		appservernew[1] = "Y" ; 
		return appservernew ; 
		/*
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db= new SelectDataBeanRowCol(db);
		String[] appserver=null;
		
		try {

			String sql = "select brn_appserver,brn_isconnected,brn_port from s_brn where brn_brcode='"
				+ sBrnCode + "'";
			logger.info("Appserver Query" + sql);

			appserver = sel_db.getRow(3, sql);
			if(appserver!=null){
				appservernew[0]=appserver[0]+":"+appserver[2];
				appservernew[1]=appserver[1];
			}
		}
		catch(Exception e) {
			logger.info("Error in brncodeToAppserver finding ------");
			e.printStackTrace();
		}

		finally	{
			db.Finalize();
		}

		if(appserver==null)
			return appserver;
		else
			return appservernew;
			
			*/
	}



	public int getNextHolinkedNo()
	{
		//	BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String holinkno[]=new String[1];
		String sql="select isnull(max(ibusr_holinkedno),1) from s_ibusr";
		try{
			holinkno=bean.getRow(1,sql);

		}catch(Exception e){
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return Integer.parseInt(holinkno[0].trim());
	}
	public int getNextuserId()// added by Jagan 23-12-06
	{
		//	BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String holinkno[]=new String[1];
		String sql="select isnull(max(ibusr_usrid),10101006) from s_ibusr where ibusr_usrtype='U'";
		try{
			holinkno=bean.getRow(1,sql);

		}catch(Exception e){
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return Integer.parseInt(holinkno[0].trim());
	}
	public String[][] getActivityList()// added by Jagan 23-12-06
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] actvtlist=null;
		try{
			String sql="Select atvt_sname from s_atvt";
			actvtlist=bean.getData(1,sql);
		}catch(Exception e){e.printStackTrace();}
		finally
		{
			db.Finalize();
		}
		return actvtlist;
	}
	public HashMap<Object, Object> CreateUserByAdminReport(StatusLogReportDto adminDto,ErrorVar errArg)// added by Jagan 23-12-06
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		HashMap<Object, Object> retMap = new HashMap<Object, Object>();
		String[][] actvtlist=null;
		String[][] userAdmin=null;
		try{
			String sql=" select count(*),ibusr_usrtype from s_ibusr " +
			" where ibusr_mkrid=? and ibusr_usrtype='U' group by ibusr_usrtype";
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,adminDto.getUserid());
			db.doBeginTrans();			
			db.db_select(sql,argList);
			actvtlist=bean.getData(2,sql);
			if(actvtlist!=null){
				int iLen = actvtlist.length;
				logger.info("Length is >>>>>>........."+iLen);
				String sCount = actvtlist[0][0];
				String sUsrtype = actvtlist[0][1];
				if(sCount.equalsIgnoreCase("0")|| sCount.equalsIgnoreCase("")|| sCount==null ){
					//errArg.add("421","ListEmpety");
					retMap.put("Errors",errArg);
				}
				else if(Integer.parseInt(sCount)>0 && sUsrtype.equalsIgnoreCase("U"))
				{
					String sSQL="select ibusr_accno,ibusr_usrid,case " +
					" when ibusr_status='A' then 'Activate'" +
					" when ibusr_status='D' then 'Deactivate'" +
					" when ibusr_status='L' then 'Locked'" +
					" when ibusr_status='C' then 'Created'" +
					" else 'Existing' end from s_ibusr " +
					" where ibusr_mkrid=? " +
					" and ibusr_crdate>=? " +
					" and ibusr_crdate<=? " +
					" and ibusr_usrtype='U'";
					ArrayList<Object> inList = new ArrayList<Object>();
					inList.add(0,adminDto.getUserid());
					inList.add(1,DateTimeFunction.strToSqlDate(adminDto.getFromdate()));
					inList.add(2,DateTimeFunction.strToSqlDate(adminDto.getTodate()));
					db.doBeginTrans();			
					db.db_select(sSQL,inList);
					userAdmin=bean.getData(3,sSQL);
					logger.info("sSQL is ----===  "+sSQL);
					if(userAdmin==null){
						//errArg.add("421","ListEmpety");
						retMap.put("error",errArg);
					}
					else 
					{
						retMap.put("data",userAdmin);
					}
				}
				else {
					errArg.add("421","NotAdmin");
					retMap.put("Errors",errArg);
				}
			}
			else {
				retMap.put("Errors",errArg);
			}
		}catch(Exception e){e.printStackTrace();}
		finally
		{
			db.Finalize();
		}
		return retMap;
	}
	public String[][] getTransactionLogData(StatusLogReportDto trdto)// added by Jagan 23-12-06
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] trdata=null;
		logger.info("trnsaction data  ---");
		String errdata[][]=new String[1][1];
		try{
			if(trdto.getSelcri().equalsIgnoreCase("datetime"))
			{
				Date frdate=DateTimeFunction.strToSqlDate(trdto.getFromdate());
				Date todate=DateTimeFunction.strToSqlDate(trdto.getTodate());
				String sql="select srBranch,frAccNo,trBranch,toAccNo,trnDate,Amount,trnType,trnmode,Userid,docType,docSeries,docNo from s_trdlog where trnDate Between '"+frdate+"' and '"+todate+"'";
				logger.info(sql);
				trdata=bean.getData(12,sql);
			}else if(trdto.getSelcri().equalsIgnoreCase("branch"))
			{
				String srbranch=trdto.getSrbranch();
				String trbranch=trdto.getTrbranch();
				String sql="select brn_brcode from s_brn where brn_brcode='"+srbranch+"'";
				String sql1="select brn_brcode from s_brn where brn_brcode='"+trbranch+"'";
				String srbrn[]=bean.getRow(1,sql);
				String trbrn[]=bean.getRow(1,sql1);
				if(srbrn==null)
				{
					errdata[0][0]="invalidSrBrn";
					return errdata;
				}
				else if(trbrn==null)
				{
					errdata[0][0]="invalidTrBrn";
					return errdata;
				}else
				{
					sql="select srBranch,frAccNo,trBranch,toAccNo,trnDate,Amount,trnType,trnmode,Userid,docType,docSeries,docNo from s_trdlog where srBranch='"+srbranch+"' and trBranch='"+trbranch+"'";
					logger.info(sql);
					trdata=bean.getData(12,sql);
				}
			}else if(trdto.getSelcri().equalsIgnoreCase("amount"))
			{
				String stamount=trdto.getStartAmount();
				String endamount=trdto.getEndAmount();

				String sql="select srBranch,frAccNo,trBranch,toAccNo,trnDate,Amount,trnType,trnmode,Userid,docType,docSeries,docNo from s_trdlog where amount Between "+stamount+" and "+endamount;
				logger.info(sql);
				trdata=bean.getData(12,sql);
			}
			else if(trdto.getSelcri().equalsIgnoreCase("trntype"))
			{
				String trntype=trdto.getTrntype();
				String sql="select srBranch,frAccNo,trBranch,toAccNo,trnDate,Amount,trnType,trnmode,Userid,docType,docSeries,docNo from s_trdlog where trntype='"+trntype+"'";
				logger.info(sql);
				trdata=bean.getData(12,sql);
			}
			else if(trdto.getSelcri().equalsIgnoreCase("trnmode"))
			{
				String trnmode=trdto.getTrnMode();
				String sql="select srBranch,frAccNo,trBranch,toAccNo,trnDate,Amount,trnType,trnmode,Userid,docType,docSeries,docNo from s_trdlog where trnmode='"+trnmode+"'";
				logger.info(sql);
				trdata=bean.getData(12,sql);
			}
			else if(trdto.getSelcri().equalsIgnoreCase("abbib"))
			{
				String abbib=trdto.getAbbib();
				String sql="select srBranch,frAccNo,trBranch,toAccNo,trnDate,Amount,trnType,trnmode,Userid,docType,docSeries,docNo from s_trdlog where procCode='"+abbib+"'";
				logger.info(sql);
				trdata=bean.getData(12,sql);
			}
			else if(trdto.getSelcri().equalsIgnoreCase("acttype"))
			{
				String sracttype=trdto.getSracttype();
				String tracttype=trdto.getTracttype();

				String sql="select srBranch,frAccNo,trBranch,toAccNo,trnDate,Amount,trnType,trnmode,Userid,docType,docSeries,docNo from s_trdlog where frAccNo like '"+sracttype+"%' and toAccNo like '"+tracttype+"%'";
				logger.info(sql);
				trdata=bean.getData(12,sql);
			}
			else if(trdto.getSelcri().equalsIgnoreCase("trnstatus"))
			{
				String trnstatus=trdto.getTrnstatus();
				String sql="select srBranch,frAccNo,trBranch,toAccNo,trnDate,Amount,trnType,trnmode,Userid,docType,docSeries,docNo from s_trdlog where transStatus='"+trnstatus+"'";
				logger.info(sql);
				trdata=bean.getData(12,sql);
			}
			else if(trdto.getSelcri().equalsIgnoreCase("suspectedtran"))
			{
				Date frdate=DateTimeFunction.strToSqlDate(trdto.getFromdate());
				Date todate=DateTimeFunction.strToSqlDate(trdto.getTodate());
				String sql="select srBranch,AccNo,trBranch,toAccNo,trnDate,Amount,trndrcr,trnType,txnNo,docType,docSeries,docNo " +
				"from abb_log where respflag='SUSPECT' AND " +
				"cast(SUBSTRING(trndate,7,10)+ '-' +SUBSTRING(trndate,4,2)+ '-' + SUBSTRING(trndate,0,3) as datetime) between " +
				"cast(SUBSTRING('"+frdate+"',0,5)+ '-' +SUBSTRING('"+frdate+"',6,2)+ '-' + SUBSTRING('"+frdate+"',9,2) as datetime) and " +
				"cast(SUBSTRING('"+todate+"',0,5)+ '-' +SUBSTRING('"+todate+"',6,2)+ '-' + SUBSTRING('"+todate+"',9,2) as datetime)";
				logger.info(sql);
				trdata=bean.getData(12,sql);
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
		return trdata;
	}
	public String[][] getDayendTransactionData(String startdate, String enddate)// added by Jagan 23-12-06
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] trdata=null;
		logger.info("trnsaction data  ---");
		String errdata[][]=new String[1][1];
		try{

			Date frdate=DateTimeFunction.strToSqlDate(startdate);
			Date todate=DateTimeFunction.strToSqlDate(enddate);
			String sql="select srBranch,AccNo,trBranch,toAccNo,trnDate,Amount,trndrcr,trnType,txnNo,docType,docSeries,docNo " +
			"from abb_log where respflag='SUSPECT'" ;
			logger.info(sql);
			trdata=bean.getData(12,sql);
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
		return trdata;
	}
	public String[][] existUserIbInfo(String linkNum,String sBrnCode)throws RemoteException
	{		
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db= new SelectDataBeanRowCol(db);
		String[][] existUserIbInfo=null;
		try
		{
			String sql = "select ibusr_usrid,ibusr_usrpass,ibusr_accno,ibusr_holinkedno,ibusr_status from s_ibusr where  ibusr_brlinkedno="
				+ linkNum
				+ " and ibusr_status in('C','A','D','L') and ibusr_brncode='"
				+ sBrnCode + "'";
			logger.info("IBUSR Query " + sql);
			existUserIbInfo=sel_db.getData(5,sql);
		}
		catch(Exception e)
		{
			logger.info("Error in existUserIbInfo finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}

		return existUserIbInfo;


	}
	public HashMap existUserIbInfoByUsrid(String userId,String brncode)throws RemoteException
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] existUserIbInfo=null;
		String err[][]=new String[1][1];
		HashMap userIbInfo=new HashMap();
		String userinfo="";
		try
		{
			String sql="select ibusr_usrid from s_ibusr where ibusr_usrid='"+userId+"'";
			String userid[][]=bean.getData(1,sql);
			if(userid==null)
			{
				userIbInfo.put("err","invalidUser");
			}
			else
			{
				sql = "select ibusr_usrid,ibusr_usrpass,ibusr_accno,ibusr_holinkedno," +
				"ibusr_status,ibusr_brncode from s_ibusr where  ibusr_status in('C','A','D','L') " +
				"and ibusr_usrid='"+userId + "' and ibusr_usrtype='U' and ibusr_brncode='"+brncode+"'";
				logger.info("IBUSR Query" + sql);
				existUserIbInfo=bean.getData(6,sql);
				userinfo="singlebranch";
				if(existUserIbInfo==null)
				{
					sql = "select ibusr_usrid,ibusr_usrpass,ibusr_accno,ibusr_holinkedno," +
					"ibusr_status,ibusr_brncode from s_ibusr where  ibusr_status in('C','A','D','L') " +
					"and ibusr_usrid='"+userId + "' and ibusr_usrtype='U'";
					existUserIbInfo=bean.getData(6,sql);
					userinfo="multibranch";
				}
			}
			userIbInfo.put("datafrom",userinfo);
			userIbInfo.put("data",existUserIbInfo);


		}		
		catch(Exception e)
		{
			logger.info("Error in existUserIbInfo finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}

		return userIbInfo;


	}

	public String[][] lockUserInfo(String userid)
	{
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		BMLogger logger=new BMLogger(CentralBean.class);
		ArrayList lockusr=new ArrayList();
		String[][] usrLockInfo=null;
		String data[]=null;
		try{
			if(userid==null || userid.equals("")){
				sql="select distinct ibusr_usrid,ibusr_status,ibusr_brncode,ibusr_usrtype from s_ibusr where  ibusr_status='L'";
				logger.info(sql);
				usrLockInfo=bean.getData(4,sql);
			}
			else{
				sql="select ibusr_usrid from s_ibusr where ibusr_usrid='"+userid+"'";
				logger.info(sql);
				data=bean.getRow(1,sql);

				if(data!=null){
					sql="select distinct ibusr_usrid,ibusr_status,ibusr_brncode,ibusr_usrtype from s_ibusr where  ibusr_status='L' and ibusr_usrid='"+userid+"'";
					logger.info(sql);
					usrLockInfo=bean.getData(4,sql);
				}
				else
				{
					usrLockInfo=new String[1][1];
					usrLockInfo[0][0]="invaliduserid";
					logger.info("invalid user ");
				}				
			}


		}catch(Exception e){e.printStackTrace();}
		finally
		{
			db.Finalize();
		}	

		return usrLockInfo;
	}
	public boolean unlockUser(String[] usrid,int j,String adminid)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		Calendar cal = Calendar.getInstance();
		java.util.Date utilDate = cal.getTime();
		long lTime = utilDate.getTime();
		java.sql.Date sqlDate = new java.sql.Date(lTime);
		Time time = new Time(lTime);
		String strTime = sqlDate + " " + time;
		SelectDataBeanRowCol sel_db=new SelectDataBeanRowCol(db);
		boolean b=false;
		String sql=null;
		try
		{
			db.doBeginTrans();
			for(int i=0;i<j;i++){
				sql = "update s_ibusr set ibusr_status='A' where  ibusr_usrid='"+ usrid[i]+"'";
				logger.info("IBUSR Query" + sql);
				db.db_update(sql);
				sql="select ibusr_kid from s_ibusr where ibusr_usrid='"+usrid[i]+"'";
				String kid[][]=sel_db.getData(1,sql);
				sql="insert into s_ibusrstatuslog(log_usrid,log_date,log_status,log_adminid,log_brncode,log_accno,log_usrkid) values('"+ usrid[i]+"','"+strTime+"','A','"+adminid+"','0',0,"+kid[0][0]+")";
				db.db_Insert(sql);
				logger.info("IBUSRSTATUSLOG Query" + sql);

			}
			db.doCommit();
			b=true;
		}
		catch(Exception e)
		{
			db.doRollback();
			logger.info("Error in existUserIbInfo finding");
			e.printStackTrace();
			b=false;
		}
		finally
		{
			db.Finalize();
		}

		return b;
	}
	public boolean lockUser(String usrid,String adminid)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		boolean b=false;
		Calendar cal = Calendar.getInstance();
		java.util.Date utilDate = cal.getTime();
		long lTime = utilDate.getTime();
		java.sql.Date sqlDate = new java.sql.Date(lTime);
		Time time = new Time(lTime);
		String strTime = sqlDate + " " + time;
		String sql=null;
		SelectDataBeanRowCol sel_db=new SelectDataBeanRowCol(db);
		try
		{
			db.doBeginTrans();
			sql = "update s_ibusr set ibusr_status='L' where  ibusr_usrid='"+ usrid+"'";
			logger.info("IBUSR Query" + sql);
			db.db_update(sql);

			sql="select ibusr_kid from s_ibusr where ibusr_usrid='"+usrid+"'";
			sel_db=new SelectDataBeanRowCol(db);
			String kid[][]=sel_db.getData(1,sql);
			sql="insert into s_ibusrstatuslog(log_usrid,log_date,log_status,log_adminid,log_brncode,log_accno,log_usrkid) values('"+ usrid+"','"+strTime+"','L','"+adminid+"','0',0,"+kid[0][0]+")";
			db.db_Insert(sql);
			logger.info("IBUSRSTATUSLOG Query" + sql);

			db.db_Insert(sql);

			db.doCommit();
			b=true;
		}
		catch(Exception e)
		{
			db.doRollback();
			logger.info("Error in existUserIbInfo finding");
			e.printStackTrace();
			b=false;
		}
		finally
		{
			db.Finalize();
		}

		return b;
	}
	public boolean insertActivityLog(String usrid,String accno,String hostname,String activityid,String status,String errcode)
	{
		boolean b=false;
		String atvtId="0";
		BMLogger logger=new BMLogger(CentralBean.class);
		logger.info("-------------------------in Activity function in centeral bean");
		logger.info("account no " +accno);
		//	int iaccno=Integer.parseInt(accno);
		//	int iusrid=Integer.parseInt(usrid);
		int ierrcode=Integer.parseInt(errcode);
		DataBaseClass db=new DataBaseClass();
		try{
			logger.info("in try");
			String sql = " select atvt_kid from s_atvt where atvt_sname='"+activityid+"' ";
			logger.info("query 1 is "+sql);
			ResultSet rs = db.db_select(sql);
			if(rs.next()){
				atvtId = rs.getString(1); 
			}
			sql = " insert into s_activitylog(log_usrid,log_accno,log_hostname,log_date,log_activityid,log_status,log_errcode) values(?,?,?,?,?,?,?)";
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,usrid);
			argList.add(1,accno);
			argList.add(2,hostname);
			argList.add(3,DateTimeFunction.getIbDateTime());
			argList.add(4,atvtId);
			argList.add(5,atvtId);
			argList.add(6,ierrcode);
			logger.info("query 2 is "+sql);
			/*'"+usrid+"','"+accno+"','"+hostname+"'," +
			" '"+DateTimeFunction.getIbDateTime()+"',"+atvtId+",'"+status+"',"+ierrcode+"
			 */db.doBeginTrans();			
			 db.db_Insert(sql,argList);
			 db.doCommit();
			 b=true;
		}catch(Exception e)
		{
			e.printStackTrace();
			db.doRollback();

		}
		finally
		{
			db.Finalize();
		}
		return b;
	}
	public boolean insertActivityLog(String usrid,String accno,String hostname,String activityid,String status,String errcode,String url)
	{
		boolean b=false;
		String atvtId="0";
		BMLogger logger=new BMLogger(CentralBean.class);
		logger.info("-------------------------in Activity function in centeral bean");
		logger.info("account no " +accno);
		//	int iaccno=Integer.parseInt(accno);
		//	int iusrid=Integer.parseInt(usrid);
		int ierrcode=Integer.parseInt(errcode);
		DataBaseClass db=new DataBaseClass();
		try{
			logger.info("in try");
			String sql = " select atvt_kid from s_atvt where atvt_url='"+url+"' ";
			logger.info("query 1 is "+sql);
			ResultSet rs = db.db_select(sql);
			if(rs.next()){
				atvtId = rs.getString(1); 
			}
			sql = "insert into s_activitylog(log_usrid,log_accno,log_hostname,log_date,log_activityid,log_status,log_errcode,log_activityurl)  values(?,?,?,?,?,?,?,?)";
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,usrid);
			argList.add(1,accno);
			argList.add(2,hostname);
			argList.add(3,DateTimeFunction.getIbDateTime());
			argList.add(4,atvtId);
			argList.add(5,atvtId);
			argList.add(6,ierrcode);
			argList.add(7,url);
			logger.info("query 2 is "+sql);
			db.doBeginTrans();			
			db.db_Insert(sql,argList);
			db.doCommit();
			b=true;
		}catch(Exception e)
		{
			e.printStackTrace();
			db.doRollback();

		}
		finally
		{
			db.Finalize();
		}
		return b;
	}

	public String[][] existUserById(String userid,String flag,String branchCode,ActivationDto actDto)throws RemoteException
	//public String[][] existUserById(String userid,String flag,String branchCode)throws RemoteException
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db= new SelectDataBeanRowCol(db);
		String[][] existUser=null;
		String err[][]=new String[1][1];
		String sql="";
		try
		{	
			if(!branchCode.equals(""))
			{
				sql="select brn_brcode from s_brn where brn_brcode='"+branchCode+"'";
				String brn[][]=sel_db.getData(1,sql);
				if(brn!=null)
				{

				}
				else
				{
					logger.info("invalid Branch");
					err[0][0]="invalidbranch";
					return err;
				}
			}
			if(!userid.equals("")&& !branchCode.equals("")  )
			{
				logger.info("existUserById both are not blank ");
				logger.info("existUserById ");

				sql="select ibusr_kid from s_ibusr where ibusr_usrid='"+userid+"' and ibusr_brncode='"+branchCode+"'";
				String kid[][]=sel_db.getData(1,sql);

				if(kid!=null)
				{
					if(flag.equalsIgnoreCase("activate"))
						sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_usrid='"+ userid+"' and ibusr_brncode='"+branchCode+"'";
					else
						sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_usrid='"+ userid+"'  and ibusr_brncode='"+branchCode+"'";
				}
				else
				{
					logger.info("invalid Userid");
					err[0][0]="invaliduser";
					return err;
				}


				logger.info("IBUSR  Query" + sql);
				existUser=sel_db.getData(4,sql);


			}
			else if(!userid.equals("") )
			{
				logger.info("existUserById userId are not blank ");

				sql="select ibusr_kid from s_ibusr where ibusr_usrid='"+userid+"'";
				String kid[][]=sel_db.getData(1,sql);
				if(kid!=null)
				{
					if(flag.equalsIgnoreCase("activate"))
						sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_usrid='"+ userid+"'";
					else
						sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_usrid='"+ userid+"' ";
				}
				else
				{
					logger.info("invalid Userid");
					err[0][0]="invaliduser";
					return err;
				}
				logger.info("IBUSR Query" + sql);
				existUser=sel_db.getData(4,sql);

			}
			else if(!branchCode.equals(""))
			{
				logger.info("existUserById branchcode are not blank ");

				if(flag.equalsIgnoreCase("activate"))
				{	
					sql="select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr" +
					" where  ibusr_brncode='"+branchCode+"' ";
				}	
				else
				{	
					sql="select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr" +
					" where ibusr_brncode='"+branchCode+"' ";
				}	

				logger.info("IBUSR  Query" + sql);
				existUser=sel_db.getData(4,sql);

			}

			/*sql="select ibusr_kid from s_ibusr where ibusr_usrid='"+userid+"'";
			 String kid[][]=sel_db.getData(1,sql);
			 if(kid!=null)
			 {
			 if(flag.equalsIgnoreCase("activate"))
			 sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_usrid='"+ userid+"'";
			 else
			 sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_usrid='"+ userid+"' and ibusr_status='A'";
			 }else
			 {
			 logger.info("invalid Userid");
			 err[0][0]="invaliduser";
			 return err;
			 }*/
			/*logger.info("IBUSR Query" + sql);
			 existUser=sel_db.getData(4,sql);*/
		}
		catch(Exception e)
		{
			logger.info("Error in existUserIbInfo finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}

		return existUser;
	}

	public String[][] existUserByStatus(String status,String brncode,String userid,ActivationDto actDto)throws RemoteException
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db= new SelectDataBeanRowCol(db);
		String[][] existUser=null;
		String err[][]=new String[1][1];
		String sql="";
		String state="";
		if(status.equalsIgnoreCase("activated"))
			state="A";
		if(status.equalsIgnoreCase("deactivated"))
			state="D";
		if(status.equalsIgnoreCase("created"))
			state="C";
		if(status.equalsIgnoreCase("locked"))
			state="L";
		if(status.equalsIgnoreCase("All"))
			state="L','D','A','C";

		try
		{	
			if(!brncode.equals("")){
				sql="select brn_brcode from s_brn where brn_brcode='"+brncode+"'";
				String brn[][]=sel_db.getData(1,sql);
				if(brn!=null)
				{

				}else
				{
					logger.info("invalid Branch");
					err[0][0]="invalidbranch";
					return err;
				}
			}
			if(!userid.equals("")){
				sql="select ibusr_kid from s_ibusr where ibusr_usrid='"+userid+"'";
				String kid[][]=sel_db.getData(1,sql);
				if(kid!=null)
				{

				}
				else
				{
					logger.info("invalid Userid");
					err[0][0]="invaliduser";
					return err;
				}
			}
			if(brncode.equalsIgnoreCase(""))
			{
				if(userid.equals("")){
					if(actDto.getFlag().equalsIgnoreCase("User"))
						sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_status in ('"+state+"') and ibusr_usrtype='U' order by ibusr_usrid";
					else 
						sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_status in ('"+state+"') and ibusr_usrtype in('U','A') order by ibusr_usrid";
				}
				else{
					if(actDto.getFlag().equalsIgnoreCase("User"))
						sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_status in ('"+state+"') and ibusr_usrid='"+userid+"' and ibusr_usrtype='U' order by ibusr_usrid";

					else
						sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_status in ('"+state+"') and ibusr_usrid='"+userid+"' and ibusr_usrtype in ('U','A') order by ibusr_usrid";
				}
			}
			else
			{
				if(userid.equals("")){
					if(actDto.getFlag().equalsIgnoreCase("User"))
						sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_status in ('"+state+"') and ibusr_brncode='"+brncode+"' and ibusr_usrtype='U' order by ibusr_usrid";
					else
						sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_status in ('"+state+"') and ibusr_brncode='"+brncode+"' and ibusr_usrtype in ('U','A') order by ibusr_usrid";
				}else{
					if(actDto.getFlag().equalsIgnoreCase("User"))
						sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_status in ('"+state+"') and ibusr_brncode='"+brncode+"' and ibusr_usrid='"+userid+"' and ibusr_usrtype='U' order by ibusr_usrid";
					else 
						sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_status in ('"+state+"') and ibusr_brncode='"+brncode+"' and ibusr_usrid='"+userid+"' and ibusr_usrtype in ('U','A') order by ibusr_usrid";
				}			
			}			


			logger.info("IBUSR Query" + sql);
			existUser=sel_db.getData(4,sql);
		}
		catch(Exception e)
		{
			logger.info("Error in existUserIbInfo finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}

		return existUser;
	}

	public String[][] usrStatusLog(String status,String adminid,String userid,String frdate,String todate)throws RemoteException

	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db= new SelectDataBeanRowCol(db);
		String[][] Userstatuslog=null;
		String err[][]=new String[1][1];
		String sql="";
		String state="";
		Date sqlDate1=null;
		Date sqlDate2=null;
		if(status.trim().equalsIgnoreCase("activated"))
			state="'A'";
		if(status.trim().equalsIgnoreCase("deactivated"))
			state="'D'";
		if(status.trim().equalsIgnoreCase("locked"))
			state="'L'";
		if(status.trim().equalsIgnoreCase("all"))
			state="'A','D','L'";

		if(!frdate.trim().equals("") && !frdate.trim().equalsIgnoreCase("DD/MM/YYYY"))
			sqlDate1 = DateTimeFunction.strToSqlDate(frdate);
		if(!todate.trim().equals("") && !todate.trim().equalsIgnoreCase("DD/MM/YYYY"))
			sqlDate2 = DateTimeFunction.strToSqlDate(todate);
		String ssqlDate1=sqlDate1+" 0:0:0.000";
		String ssqlDate2=sqlDate2+" 23:59:59.999";
		try
		{	

			if(!userid.trim().equals("")){
				sql="select ibusr_kid from s_ibusr where ibusr_usrid='"+userid+"'";
				String kid[][]=sel_db.getData(1,sql);
				if(kid!=null)
				{

				}
				else
				{
					logger.info("invalid Userid");
					err[0][0]="invaliduser";
					return err;
				}
			}
			if(!adminid.trim().equals("")){
				sql="select ibusr_kid from s_ibusr where ibusr_usrid='"+adminid+"' and ibusr_usrtype='A'";
				String kid[][]=sel_db.getData(1,sql);
				if(kid!=null)
				{

				}
				else
				{
					logger.info("invalid Userid");
					err[0][0]="invalidadmin";
					return err;
				}
			}
			if(adminid.trim().equalsIgnoreCase(""))
			{
				if(userid.trim().equals("")){ 
					if(todate.trim().equals("") || todate.trim().equalsIgnoreCase("DD/MM/YYYY"))
						sql = "select * from s_ibusrstatuslog where  log_status in("+state+") order by log_usrid";
					else
						sql = "select * from s_ibusrstatuslog where  log_status in("+state+") and log_date between '"+ssqlDate1+"' and '"+ssqlDate2+"' order by log_usrid";
				}
				else{
					sql="select ibusr_kid from s_ibusr where ibusr_usrid='"+userid+"'";
					String kid[][]=sel_db.getData(1,sql);
					if(todate.trim().equals(""))
						sql = "select log_kid,log_usrid,log_date,log_status,log_adminid,log_brncode,log_accno from s_ibusrstatuslog where  log_status in("+state+") and log_usrkid='"+kid[0][0]+"' order by log_usrid";
					else
						sql = "select log_kid,log_usrid,log_date,log_status,log_adminid,log_brncode,log_accno from s_ibusrstatuslog where  log_status in("+state+") and log_date between '"+ssqlDate1+"' and '"+ssqlDate2+"' and log_usrkid='"+kid[0][0]+"' order by log_usrid";
				}
			}
			else	
			{
				if(userid.trim().equals("") ){
					if(todate.trim().equals("") || todate.trim().equalsIgnoreCase("DD/MM/YYYY"))
						sql = "select * from s_ibusrstatuslog where  log_status in("+state+") and log_adminid='"+adminid+"' order by log_usrid";
					else
						sql = "select * from s_ibusrstatuslog where  log_status in("+state+") and log_date between '"+ssqlDate1+"' and '"+ssqlDate2+"' and log_adminid='"+adminid+"' order by log_usrid";
				}
				else{
					sql="select ibusr_kid from s_ibusr where ibusr_usrid='"+userid+"'";
					String kid[][]=sel_db.getData(1,sql);
					if(todate.trim().equals("") || todate.trim().equalsIgnoreCase("DD/MM/YYYY"))
						sql = "select log_kid,log_usrid,log_date,log_status,log_adminid,log_brncode,log_accno from s_ibusrstatuslog where  log_status in("+state+") and log_usrkid='"+kid[0][0]+"' and log_adminid='"+adminid+"' order by log_usrid";
					else
						sql = "select log_kid,log_usrid,log_date,log_status,log_adminid,log_brncode,log_accno from s_ibusrstatuslog where  log_status in("+state+") and log_date between '"+ssqlDate1+"' and '"+ssqlDate2+"' and log_usrkid='"+kid[0][0]+"' and log_adminid='"+adminid+"' order by log_usrid";
				}
			}	


			logger.info("IBUSR Query" + sql);
			Userstatuslog=sel_db.getData(7,sql);
		}
		catch(Exception e)
		{
			logger.info("Error in existUserIbInfo finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}

		return Userstatuslog;
	}

	public String[][] usrActivityLog(String activity,String userid,String frdate,String todate,String status)throws RemoteException

	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db= new SelectDataBeanRowCol(db);
		String[][] Userstatuslog=null;
		String err[][]=new String[1][1];
		String sql="";
		String state="";
		Date sqlDate1=null;
		Date sqlDate2=null;

		/*	if(activity.equalsIgnoreCase("MiniStatement"))
		 state="'MS'";
		 if(activity.equalsIgnoreCase("DetailStatement"))
		 state="'DS'";
		 if(activity.equalsIgnoreCase("FundTransfer"))
		 state="'FT'";
		 if(activity.equalsIgnoreCase("MailService"))
		 state="'ML'";
		 if(activity.equalsIgnoreCase("all"))
		 state="'MS','DS','FT','ML'";
		 */	if(status.equalsIgnoreCase("success"))
		 {
			 status="'Y'";
		 }
		 else if(status.equalsIgnoreCase("unsuccess"))
		 {
			 status="'N'";
		 }
		 else if(status.equalsIgnoreCase("all"))
		 {
			 status="'N','Y'";
		 }

		 if(!frdate.equals(""))
			 sqlDate1 = DateTimeFunction.strToSqlDate(frdate);
		 if(!todate.equals(""))
			 sqlDate2 = DateTimeFunction.strToSqlDate(todate);
		 String ssqlDate1=sqlDate1+" 0:0:0.000";
		 String ssqlDate2=sqlDate2+" 23:59:59.999";
		 try
		 {	
			 String sql1="select atvt_kid from s_atvt where atvt_sname='"+activity+"'";
			 logger.info("sql is "+sql1);
			 String actvtkid[]=sel_db.getRow(1,sql1);
			 if(!userid.equals("")){
				 sql="select ibusr_kid from s_ibusr where ibusr_usrid='"+userid+"'";
				 String kid[][]=sel_db.getData(1,sql);
				 if(kid!=null)
				 {

				 }
				 else
				 {
					 logger.info("invalid Userid");
					 err[0][0]="invaliduser";
					 return err;
				 }
			 }

			 if(userid.equals("")){
				 if(todate.equals(""))
					 sql = "select * from s_activitylog where  log_activityid in("+actvtkid[0]+") and log_status in("+status+")";
				 else
					 sql = "select * from s_activitylog where  log_activityid in("+actvtkid[0]+") and log_date between '"+ssqlDate1+"' and '"+ssqlDate2+"' and log_status in("+status+")";
			 }
			 else{
				 if(todate.equals(""))
					 sql = "select * from s_activitylog where  log_activityid in("+actvtkid[0]+") and log_usrid='"+userid+"' and log_status in("+status+")";
				 else
					 sql = "select * from s_activitylog where  log_activityid in("+actvtkid[0]+") and log_date between '"+ssqlDate1+"' and '"+ssqlDate2+"' and log_usrid='"+userid+"' and log_status in("+status+")";
			 }


			 logger.info("IBUSR Query" + sql);
			 Userstatuslog=sel_db.getData(8,sql);
		 }
		 catch(Exception e)
		 {
			 logger.info("Error in existUserIbInfo finding");
			 e.printStackTrace();
		 }
		 finally
		 {
			 db.Finalize();
		 }

		 return Userstatuslog;
	}
	public boolean ActivateAccno(String[] accno,String[] usridArr,int j,String flag,String adminid,String brncode,ActivationDto actDto)throws RemoteException	
	//public boolean ActivateAccno(String[] accno,int j,String flag,String adminid,String brncode)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean=new SelectDataBeanRowCol(db);
		boolean b=false;
		String sql=null;
		String sql1=null;

		try
		{
			db.doBeginTrans();
			for(int i=0;i<j;i++){

				if(accno[i]!="0") 
					sql="select ibusr_usrid,ibusr_status from s_ibusr where ibusr_accno='"+accno[i]+"' and ibusr_brncode='"+brncode+"'";
				else
					sql="select ibusr_usrid,ibusr_status from s_ibusr where ibusr_accno='"+accno[i]+"' and ibusr_brncode='"+brncode+"'"+"and ibusr_usrid='"+usridArr[i]+"'";

				String usrdata[]=bean.getRow(2,sql);
				String usrid=usrdata[0];
				String status=usrdata[1]; 
				if(flag.equalsIgnoreCase("activate")){
					if(status.equals("C")){
						sql = "update s_ibusr set ibusr_status='A',ibusr_activedate='"+DateTimeFunction.getIbDateTime()+"' where  ibusr_accno='"+ accno[i]+"' and ibusr_brncode='"+brncode+"'"+"and ibusr_usrid='"+usridArr[i]+"'"; 
						db.db_update(sql);
					}else{// 643
						sql = "update s_ibusr set ibusr_status='A' where  ibusr_accno='"+ accno[i]+"' and ibusr_brncode='"+brncode+"'"+"and ibusr_usrid='"+usridArr[i]+"'"; 
						sql1="insert into s_ibusrstatuslog values(?,?,?,?,?,?)";
						/*'"+ usrid+"','"+DateTimeFunction.getIbDateTime()+"','A','"+adminid+"','"+brncode+"','"+accno[i]+"'*/
						ArrayList<Object> argList = new ArrayList<Object>();
						argList.add(0,usrid);
						argList.add(1,DateTimeFunction.getIbDateTime());
						argList.add(2,"A");
						argList.add(3,adminid);
						argList.add(4,brncode);
						argList.add(5,accno[i]);
						logger.info("IBUSRSTATUSLOG Query" + sql);
						db.db_update(sql);
						db.db_Insert(sql1,argList);
					}
				}
				else if(flag.equalsIgnoreCase("deactivate")){
					sql = "update s_ibusr set ibusr_status='D' where  ibusr_accno='"+ accno[i]+"'  and ibusr_brncode='"+brncode+"'"+"and ibusr_usrid='"+usridArr[i]+"'"; 
					sql1="insert into s_ibusrstatuslog values(?,?,?,?,?,?)";
					/*'"+ usrid+"','"+DateTimeFunction.getIbDateTime()+"','D','"+adminid+"','"+brncode+"','"+accno[i]+"'*/
					ArrayList<Object> argList = new ArrayList<Object>();
					argList.add(0,usrid);
					argList.add(1,DateTimeFunction.getIbDateTime());
					argList.add(2,"D");
					argList.add(3,adminid);
					argList.add(4,brncode);
					argList.add(5,accno[i]);
					logger.info("IBUSRSTATUSLOG Query" + sql);
					db.db_update(sql);
					db.db_Insert(sql1,argList);
				}
				logger.info("IBUSR Query" + sql);

			}
			if(flag.equalsIgnoreCase("AdminBanned")){
				String sAdminId=actDto.getUserid();
				logger.info("sAdminId--------"+sAdminId+"----actDto.getUserid()------"+actDto.getUserid());
				sql = "update s_ibusr set ibusr_status='L' where  ibusr_accno='0'  and ibusr_brncode='"+brncode+"' and ibusr_usrid = '"+ sAdminId+"'";
				sql1="insert into s_ibusrstatuslog values(?,?,?,?,?,?)";
				/*'"+ sAdminId+"','"+DateTimeFunction.getIbDateTime()+"','L','"+adminid+"','"+brncode+"','0'*/
				ArrayList<Object> argList = new ArrayList<Object>();
				argList.add(0,sAdminId);
				argList.add(1,DateTimeFunction.getIbDateTime());
				argList.add(2,"L");
				argList.add(3,adminid);
				argList.add(4,brncode);
				argList.add(5,"0");
				logger.info("IBUsr s_ibusr Query" + sql);
				logger.info("IBUsr   s_ibusrstatuslog Query" + sql1);
				db.db_update(sql);
				db.db_Insert(sql1,argList);
			}
			db.doCommit();
			b=true;
		}
		catch(Exception e)
		{
			db.doRollback();
			logger.info("Error in existUserIbInfo finding");
			e.printStackTrace();
			b=false;
		}
		finally
		{
			db.Finalize();
		}

		return b;
	}



	/*	public String[][] existUserById(String userid,String flag)throws RemoteException
	 {

	 BMLogger logger=new BMLogger(CentralBean.class);
	 DataBaseClass db=new DataBaseClass();
	 SelectDataBeanRowCol sel_db= new SelectDataBeanRowCol(db);
	 String[][] existUser=null;
	 String err[][]=new String[1][1];
	 String sql="";
	 try
	 {
	 /*if(!brcode.equals("")){
	  sql="select brn_brcode from s_brn where brn_brcode='"+brcode+"'";
	  String brn[][]=sel_db.getData(1,sql);
	  if(brn!=null)
	  {

	  }else
	  {
	  logger.info("invalid Branch");
	  err[0][0]="invalidbranch";
	  return err;
	  }
	  }

	  sql="select ibusr_kid from s_ibusr where ibusr_usrid='"+userid+"'";
	  String kid[][]=sel_db.getData(1,sql);
	  if(kid!=null)
	  {
	  if(flag.equalsIgnoreCase("activate"))
	  sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_usrid='"+ userid+"'";
	  else
	  sql = "select ibusr_usrid,ibusr_accno,ibusr_status,ibusr_brncode from s_ibusr where  ibusr_usrid='"+ userid+"'";// and ibusr_status='A'";
	  }else
	  {
	  logger.info("invalid Userid");
	  err[0][0]="invaliduser";
	  return err;
	  }
	  logger.info("IBUSR Query" + sql);
	  existUser=sel_db.getData(4,sql);
	  }
	  catch(Exception e)
	  {
	  logger.info("Error in existUserIbInfo finding");
	  e.printStackTrace();
	  }
	  finally
	  {
	  db.Finalize();
	  }

	  return existUser;
	  }*/


	//***************************************************************************
	public String generate7CharPassword()throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		String password=null;

		try
		{

//			PasswordGeneration passgen = new PasswordGeneration();
//			password = passgen.generate7CharPass(db);
			//Changes on 01/11/2008 for changes of password pattern by ajay
			PasswordGenerator passGen = new PasswordGenerator();
			passGen.clearTemplate();
			passGen.setOthersIncluded(false);
			passGen.setLength(6);
			passGen.generatePassword();
			password=passGen.getPassword();
		}

		catch(Exception e)
		{
			logger.info("Error in generate7CharPassword finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
		return password;

	}


	public String[][] sameUsrId(String name) throws RemoteException
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db= new SelectDataBeanRowCol(db);
		String[][] sameusrId=null;

		try
		{
			String 	sql = "select ibusr_usrid from s_ibusr where ibusr_usrid like '"
				+ name+ "%'";
			logger.info("ibuser like" + sql);
			sameusrId=sel_db.getData(1,sql);

		}
		catch(Exception e)
		{
			logger.info("Error in sameUsrId finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
		return sameusrId;
	}



	public HashMap<String,String> insertInIbUsr(String linkNum,String acc_Num,
			String brnCode,String usrid,
			String usrpass,String strDate,
			boolean isAlreadyCr,
			String holinkedno,String curcode,String curkid,String sname,String ename,String hname,String mkrid,String custRole)
			throws RemoteException
			{

		HashMap<String,String> map = new HashMap<String,String>() ; 
		BMLogger logger=new BMLogger(CentralBean.class);
		String data[]=null;
		String flag="";
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean=new SelectDataBeanRowCol(db);
		PasswordCrypt passcrpt=new PasswordCrypt();
		String encrpass="" ,encrtxnpass="";
		String mobileNo="";
		if(isAlreadyCr)
			encrpass=usrpass;
		else
			encrpass=passcrpt.getPasswordCrypted(usrpass);
		encrtxnpass=passcrpt.getPasswordCrypted(usrpass);    

		if (custRole == null) { 
			custRole="C" ;
		}
		if (custRole.trim().equals("")) {		//set default role Customer  
			custRole="C" ; 
		}

		try
		{
			if(custRole.contains("~"))
			{
				String data1[] = custRole.split(Pattern.quote("~"));
				custRole = data1[0];
				mobileNo = data1[1];  
			}  else {
				if (	acc_Num.trim().length() > 0) {
					RestClient rc=new RestClient();
					String responseStr = (String)rc.callRestService("/AccInfoService/accno/" + acc_Num, "XML");
					logger.info(responseStr);
					mobileNo = XMLDomParser.ExtractElementAB(responseStr, "accountData","mobileNo")  ;
					logger.info("mobileNo" + mobileNo);
				}
			}
			if (mobileNo != null && mobileNo.trim().length() > 0) { 
				map.put("result", "true") ;
				logger.info("mobileNo is valid");
			}else {
				map.put("result", "false") ;
				map.put("errorCode", "10014");
				logger.info("mobileNo number does not exist");
				return map ;
			}



			String sql ="select ibusr_flag from s_ibusr where ibusr_usrid='"+usrid+"'";
			data=bean.getRow(1,sql);
			if(data==null)
				flag="N";
			else
				flag=data[0];
			sql = "insert into s_ibusr"
				+ "(ibusr_brlinkedno,ibusr_accno,ibusr_brncode,ibusr_usrid,ibusr_usrpass," +
				" ibusr_trnpass,ibusr_flag,ibusr_status,ibusr_crdate,ibusr_usrtype," +
				" ibusr_activedate,ibusr_holinkedno,ibusr_curcode,ibusr_curkid,ibusr_actSname," +
				" ibusr_ispassprinted,ibusr_usrEname,ibusr_usrHname,ibusr_mkrid,ibusr_mob,ibusr_custRole)"
				+ "values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"; //changes on 15/07/2008
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,linkNum);
			argList.add(1,acc_Num);
			argList.add(2,brnCode);
			argList.add(3,usrid);
			argList.add(4,encrpass);
			argList.add(5,encrtxnpass);  
			argList.add(6,flag);
			argList.add(7,"C");
			argList.add(8,DateTimeFunction.getIbDateTime());
			argList.add(9,"U");
			argList.add(10,"");
			argList.add(11,holinkedno);
			argList.add(12,curcode);
			argList.add(13,curkid);
			argList.add(14,sname);
			argList.add(15,"Y");
			argList.add(16,ename);
			argList.add(17,hname);
			argList.add(18,mkrid);
			argList.add(19,mobileNo);
			argList.add(20,custRole);
			logger.info("SQl For Acc Ib Insert" + sql);
			db.db_Insert(sql,argList);
			map.put("insertStatus", "success");
		}
		catch(Exception e)
		{
			logger.info("Error in insertInIbUsr finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
		return map ; 
			}

	public String[][] fundPayeeInfo() throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String [][] payeeData=null;
		try
		{

			String sql="select ibfund_accno,ibfund_nick from s_ibfundtrpayee";
			logger.info("@@@@ Query:::::"+sql);
			payeeData=bean.getData(2,sql);	
		}
		catch(Exception e)
		{
			logger.info("Error in fundPayeeInfo finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
		return payeeData;
	}

	public String loginIdtoLinkNo(String loginId)throws RemoteException

	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String linkNum=null;
		try
		{

			String []Usrinfo =null;	
			String  sql = "select ibusr_holinkedno  from s_ibusr where ibusr_usrid='"+loginId +"'";
			logger.info("======= loginIdtoLinkNo Query:::::"+sql);
			Usrinfo=bean.getRow(1,sql);
			linkNum=Usrinfo[0];
		}

		catch(Exception e)
		{
			logger.info("Error in loginIdtoLinkNo finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}

		return linkNum;

	}

	public String[][] ibUsrAllInfo(String sLogin_id,String pass)throws RemoteException
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] allInfo=null;
		PasswordCrypt passcrpt=new PasswordCrypt();
		String encrptpass=passcrpt.getPasswordCrypted(pass);
		try
		{
			/*	String sql="select " +
			 "ibusr_brlinkedno," +
			 "ibusr_flag," +
			 "ibusr_brncode," +
			 "ibusr_accno," +
			 "ibusr_trnid," +
			 "ibusr_trnpass," +
			 "ibusr_usrid," +
			 "ibusr_usrpass, " +
			 "ibusr_usrtype, " +
			 "ibusr_holinkedno "+
			 " from s_ibusr" +
			 " where ibusr_usrid='"+sLogin_id+"'" +
			 " and ibusr_usrpass='"+encrptpass+"'";
			 */	
			String sql="select ibusr_flag,ibusr_usrtype from s_ibusr where ibusr_usrid=? and ibusr_usrpass=?";
			logger.info("SQL is::: "+sql);
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0, sLogin_id);
			argList.add(1, encrptpass);			
			allInfo=bean.getData(2,sql,argList);


		}

		catch(Exception e)
		{
			logger.info("Error in ibUsrAllInfo(2) finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
		return allInfo;

	}


	///// Check for active user or not///////
	public String[][] activeUsrCheck(String sLogin_id,String pass)throws RemoteException
	{
		boolean isActiveUsr=false;
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] allInfo=null;
		PasswordCrypt passcrpt=new PasswordCrypt();
		String encrpt=passcrpt.getPasswordCrypted(pass);
		try
		{
			String sql=
				"select " +
				"ibusr_status"+
				" from s_ibusr" +
				" where ibusr_usrid=?" +
				"  ";

			logger.info("SQL is::: "+sql);
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0, sLogin_id);
			allInfo=bean.getData(1,sql,argList);

		}

		catch(Exception e)
		{
			logger.info("Error in ibUsrAllInfo(3) finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
		return allInfo;

	}

	public boolean chkforLock(String sLogin_id,Date g_Date,String isAutoUnlock,String Daydiff)throws RemoteException
	{
		//changed
		boolean isLocked=false;
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[] lockInfo,usrid=null;
		String sql1="";
		Calendar cal = Calendar.getInstance();
		java.util.Date utilDate = cal.getTime();
		long lTime = utilDate.getTime();
		java.sql.Date sqlDate = new java.sql.Date(lTime);
		Time time = new Time(lTime);
		String strTime = sqlDate + " " + time;
		try
		{
			String sql="";
			ArrayList<Object> argList=null;
			sql="select ibusr_kid from s_ibusr where ibusr_usrid=?";
			argList = new ArrayList<Object>();
			argList.add(0, sLogin_id);
			usrid=bean.getRow(1,sql,argList);
			sql="select " +
			"ibusr_status " +
			"from s_ibusr " +
			"where ibusr_kid=? " ;
			argList = new ArrayList<Object>();
			argList.add(0, usrid[0]);			
			logger.info("_________chkforLock Query arg1 login ID_______"+sLogin_id);
			logger.info("_________chkforLock Query arg2 Date________ "+g_Date);
			logger.info("_________chkforLock Query"+sql);
			lockInfo=bean.getRow(1,sql,argList);
			if(lockInfo!=null){
				if(lockInfo[0].equals("L"))
				{
					logger.info("........user is locked .........");

					if(isAutoUnlock.equals("Y"))
					{
						sql="select top 1 abbiblog_date from s_abbiblog where abbiblog_usrid=? order by abbiblog_date desc";
						logger.info("sql query "+sql);
						ArrayList<Object> inList = new ArrayList<Object>();
						inList.add(0, sLogin_id);						
						String logsdate[]=bean.getRow(1,sql,inList);
						if(logsdate!=null){
							int unlockDayDiff=Integer.parseInt(Daydiff);
							//	logger.info("last log date is "+logsdate[0]);
							java.util.Date curdate=DateTimeFunction.sqlDateToUtilDate(g_Date);
							//	logger.info("current date is "+curdate);
							java.util.Date logdate=DateTimeFunction.strToUtilDate(
									DateTimeFunction.sqlDateStrToStr(logsdate[0]));
							//	logger.info("last log date in date time fun "+logdate);
							java.util.Date newdate=DateTimeFunction.relativeDate(logdate,unlockDayDiff);
							//	logger.info("new calculated date "+newdate);
							//DateTimeFunction.utilDateToSqlDate()
							if((DateTimeFunction.dateCompare(curdate,newdate)==0) || (DateTimeFunction.dateCompare(curdate,newdate)==-1))
							{
								sql="update s_ibusr set ibusr_status='A' where ibusr_usrid='"+sLogin_id+"'";
								logger.info("update query is "+sql);
								//sql1="insert into s_ibusrstatuslog values('"+ sLogin_id+"','"+strTime+"','A','Auto')";
								sql1="insert into s_ibusrstatuslog(log_usrid,log_date,log_status,log_adminid,log_brncode,log_accno,log_usrkid)" +
								" values('"+ sLogin_id+"','"+strTime+"','A','Auto','0','0','"+usrid+"')";
								db.db_update(sql);
								db.db_Insert(sql1);
								isLocked=false;
							}else
							{
								isLocked=true;
							}

						}
						//		int unlockDayDiff=Integer.parseInt(Daydiff);
						//		java.util.Date newdate = DateTimeFunction.relativeDate(g_Date,unlockDayDiff);
					}else
					{
						isLocked=true;
					}

				}
			}

		}

		catch(Exception e)
		{
			logger.info("Error in chkforLock finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
		return isLocked;



	}

	public void deleteWrongPassEntry(String sLogin_id)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();


		try
		{
			String sql="delete from s_abbiblog where abbiblog_usrid='"+sLogin_id+"' and abbiblog_status='T'";
			logger.info("Delete T Query "+sql);
			db.db_delete(sql);
		}

		catch(Exception e)
		{
			logger.info("Error in deleteWrongPassEntry finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}


	}


	/*public void insertInUsrLog(String login_id,String log,String date,String appserver)throws RemoteException
	 {

	 BMLogger logger=new BMLogger(CentralBean.class);
	 DataBaseClass db=new DataBaseClass();

	 try
	 {
	 String sql="insert into s_ibusrlog values('"+login_id+"','LOGIN','"+date+"','"+appserver+"')";
	 logger.info("s_ibusrlog second 222222::: "+sql);
	 db.db_Insert(sql);
	 }

	 catch(Exception e)
	 {
	 logger.info("Error in insertInUsrLog finding");
	 e.printStackTrace();
	 }
	 finally
	 {
	 db.Finalize();
	 }	

	 }
	 */


	public String[][] loginIdtoAccNums(String login_id)throws RemoteException
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String accs[][]=null;
		try
		{
			String sql="select ibusr_accno from s_ibusr where ibusr_usrid='"+login_id+"'";
			accs=bean.getData(1,sql);

		}

		catch(Exception e)
		{
			logger.info("Error in loginIdtoAccNums finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}	

		return accs;

	}

	public String[] ibLogInformation(String sLogin_id,String sessionId)throws RemoteException
	{
		BMLogger logger=new BMLogger(this.getClass());
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String [] logInfo=null;
		String sql="";
		try
		{	
			sql="select top 1 abbiblog_kid,abbiblog_sessid from s_abbiblog where abbiblog_usrid='"+sLogin_id+"'"		
			+" and abbiblog_atvtid=1 and abbiblog_sessid <> '"+sessionId+"' order by abbiblog_kid desc";
			logger.info(sql);
			logInfo=bean.getRow(2,sql);
			if(logInfo!=null)
			{
				String LoginPrevKid=logInfo[0];
				String oldSessid=logInfo[1];
				sql="select abbiblog_kid,abbiblog_status from s_abbiblog where abbiblog_usrid='"+sLogin_id+"'"
				+" and abbiblog_atvtid=2 and abbiblog_kid > " +LoginPrevKid+
				" and abbiblog_sessid='"+oldSessid+"'";
				logger.info(sql);
				logInfo=bean.getRow(2,sql);
				if(logInfo!=null)
				{ // data here means a corresponding entry of logout
					if(logInfo[0]==null)
					{
						// no valid logout for last login corresponding to oldSessid
						logInfo=new String[0];
						logInfo[0]=oldSessid;
					}
					else 
						logInfo=null;
				}
				else
				{
					logInfo=new String[1];
					logInfo[0]=oldSessid; 
				}
			}
			/*		 sql="select top 1 abbiblog_sessId,abbiblog_usrid,abbiblog_atvtid ,abbiblog_status" +
			"  from s_abbiblog " +
			"where abbiblog_usrid=?  " +
			"  order by abbiblog_date desc";
			logger.info("S_Iblog first "+sql);
			ArrayList<Object> inList = new ArrayList<Object>();
			inList.add(0,sLogin_id);
			logInfo=bean.getRow(4,sql,inList);	*/		
		}
		catch(Exception e)
		{
			logger.info("Error in ibLogInfo(3) finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
		return logInfo;
	}

	public String[][] ibLogInfo(String sLogin_id)throws RemoteException
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] res=null;
		try
		{
			ArrayList<Object> argList=null;
			String sql="select ibusr_usrkid from s_ibusr where ibusr_usrid=?";
			argList = new ArrayList<Object>();
			argList.add(0,sLogin_id);
			res = bean.getData(1,sql,argList);
			sql="select abbiblog_lastlogattempt,abbiblog_sessId from s_abbiblog where  abbiblog_usrkid=? ";
			argList = new ArrayList<Object>();
			argList.add(0,res[0][0]);
			res = bean.getData(1,sql,argList);

			//res=bean.getData(1,sql);
		}

		catch(Exception e)
		{
			logger.fatal("Error in ibLogInfo(1) finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}	
		return res;

	}



	public void  insertInLog(String login_id,String date,char status,int attempt,String actvt,
			String hostIpAdd,String brnIpAdd,String sMacAdd,String sessionId)throws RemoteException
			{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean=new SelectDataBeanRowCol(db);
		try
		{
			String sql="select atvt_kid from s_atvt where atvt_sname='"+actvt+"'";
			logger.info(sql);
			String state=String.valueOf(status);
			String activityp[]=bean.getRow(1,sql);
			sql="select ibusr_kid from s_ibusr where ibusr_usrid='"+login_id+"'";
			logger.info(sql);
			String usrid[]=bean.getRow(1,sql);
			String sql1="insert into" +
			" s_abbiblog(abbiblog_usrkid," +
			"abbiblog_usrid," +
			"abbiblog_status," +
			"abbiblog_date," +
			"abbiblog_atvtid," +
			"abbiblog_lastlogattempt," +
			"abbiblog_hostname," +
			"abbiblog_hostbrnCode," +
			"abbiblog_macadd,abbiblog_sessId)" +
			" values(?,?,?,?,?,?,?,?,?,?)";			
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,usrid[0]);
			argList.add(1,login_id);
			argList.add(2,state);
			argList.add(3,date);
			argList.add(4,activityp[0]);
			argList.add(5,attempt);
			argList.add(6,hostIpAdd);
			argList.add(7,brnIpAdd);
			argList.add(8,sMacAdd);
			argList.add(9,sessionId);
			/*'"+login_id+"'," +
			"'"+status+"'," +
			"'"+date+"',"+
			"'"+activityp[0]+"',"+
			"'"+attempt+"','"+
			hostIpAdd+"','" +
			brnIpAdd+"'," +
		    "'"+sMacAdd+"'
			 */	    logger.info(sql1);
			 db.db_Insert(sql1, argList);

		}

		catch(Exception e)
		{
			logger.fatal("Error in insertInLog(4) finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}

			}


	public void updateLog(String sLogin_id,Date g_Date,char status,int attempt,String logkid)throws RemoteException
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		try
		{
			String sql="update  s_abbiblog " +
			"set abbiblog_status='"+status+"'," +
			"abbiblog_date='"+DateTimeFunction.getIbDateTime()+"'," +
			"abbiblog_lastlogattempt="+attempt+" " +
			"where abbiblog_kid='"+logkid+"'";
			db.db_update(sql);

		}

		catch(Exception e)
		{
			logger.info("Error in updateLog(4) finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}

	}


	public String[]  validIdCheck(String sLogin_id)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);

		String valid_idChk[]=null;
		try
		{		
			String sql="select ibusr_usrid,ibusr_flag,ibusr_status from s_ibusr where ibusr_usrid=? ";
			ArrayList<Object> inList = new ArrayList<Object>();
			inList.add(0,sLogin_id);
			logger.info("Valid User Check Sql"+sql);
			valid_idChk=bean.getRow(3,sql,inList);
		}

		catch(Exception e)
		{
			logger.info("Error in validIdCheck(1) finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
		return valid_idChk;
	}



	public String[] ibLogInfo(String sLogin_id,String actvt,char status)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String [] logInfo=null;

		try
		{	
			String qury="select atvt_kid from s_atvt where atvt_sname=?";
			logger.info(qury);
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,actvt);
			String logkid[]=bean.getRow(1,qury,argList);
			String sql="select top 1 abbiblog_status,abbiblog_lastlogattempt,abbiblog_date,abbiblog_kid" +
			"  from s_abbiblog " +
			"where abbiblog_usrid=? and" +
			" abbiblog_atvtid=? order by abbiblog_date desc";
			logger.info("S_Iblog first "+sql);
			ArrayList<Object> inList = new ArrayList<Object>();
			inList.add(0,sLogin_id);
			inList.add(1,logkid[0]);			
			logInfo=bean.getRow(4,sql,inList);			
		}

		catch(Exception e)
		{
			logger.info("Error in ibLogInfo(3) finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
		return logInfo;



	}


	public boolean ibLogInfo(String sLogin_id,char status)throws RemoteException
	{

		boolean isAlrLogin=false;	
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String [] logInfo=null;
		try {		
			String sql="select top 1 abbiblog_atvtid,abbiblog_status " +
			"from s_abbiblog" +
			" where abbiblog_usrid=? order by abbiblog_date desc";
			logger.info("S_Iblog first  line no  1975  "+sql);
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,sLogin_id);
			logInfo = bean.getRow(2,sql,argList);
			if(logInfo!=null) {
				sql="select atvt_sname from s_atvt where atvt_kid=?";
				logger.info(sql);
				ArrayList<Object> inList = new ArrayList<Object>();
				inList.add(0,logInfo[0]);
				String atvt[]=bean.getRow(1,sql,inList); 

				if((atvt[0].equalsIgnoreCase("logout")) && (logInfo[1].equalsIgnoreCase("Y")))
				{
					isAlrLogin=false;
				}
				else if((atvt[0].equalsIgnoreCase("login")) && (logInfo[1].equalsIgnoreCase("N")))
				{
					isAlrLogin=false;
				}
				/*	else
				{
					isAlrLogin=true;
				}*/
			}
		}
		catch(Exception e){
			logger.info("Error in ibLogInfo(2) finding");
			e.printStackTrace();
		}
		finally	{
			db.Finalize();
		}
		return isAlrLogin;
	}

///////////Finally////////	
	public void ibUsrLogout(String login_id,String hostipAdd,String sessid)throws RemoteException
	{	
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db= new SelectDataBeanRowCol(db);

		try
		{

			logger.info("from i user_logout is not null");
			String sql="select atvt_kid from s_atvt where atvt_sname='Logout'";
			logger.info("Logout 1 select  Query======"+sql);
			String logoutkid[]=sel_db.getRow(1,sql);
			//	String sql="select top 1 * from s_ibusrlog where ibusrlog_usrid='"+login_id+"' and ibusrlog_log='LOGIN' order by ibusrlog_kid desc";
			//	String[][] res=sel_db.getData(5,sql);


			//sql="insert into s_ibusrlog(ibusrlog_usrid,ibusrlog_log,ibusr_logdate,ibusr_hostname) values('"+login_id+"','LOGOUT','"+strTime+"','"+res[0][4]+"')";
			//		logger.info("sql for logout"+sql);
			//	db.db_Insert(sql);
			String sql1="insert into" +
			" s_abbiblog(abbiblog_usrid," +
			"abbiblog_status," +
			"abbiblog_date," +
			"abbiblog_atvtid," +
			"abbiblog_lastlogattempt," +
			"abbiblog_hostname," +
			"abbiblog_sessid," +
			"abbiblog_hostbrnCode)" +
			" values(?,?,?,?,?,?,?,?)";
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,login_id);
			argList.add(1,"N");
			argList.add(2,DateTimeFunction.getIbDateTime());
			argList.add(3,logoutkid[0]);
			argList.add(4,"0");
			argList.add(5,hostipAdd);
			argList.add(6,sessid);
			argList.add(7,"0");
			/*'"+login_id+"'," +
			"'Y'," +
			"'"+DateTimeFunction.getIbDateTime()+"',"+
			"'"+logoutkid[0]+"',"+
			"'0','"+
			hostipAdd+"','0'
			 */			logger.info(sql1);
			 db.db_Insert(sql1,argList);
		}

		catch(Exception e)
		{
			logger.info("Error in ibUsrLogout finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}


	}

	public int ibUsrNewPass(String login_id, String old_pass, String new_pass)
	throws RemoteException
	{	
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db= new SelectDataBeanRowCol(db);
		int flag=4;
		PasswordCrypt passcrpt=new PasswordCrypt();

		String ecrpt_old_pass = MD5.getMd5String(old_pass);
		//	String ecrpt_tra_old_pass=MD5.getMd5String(tra_old_pass);

		String ecrpt_new_pass=MD5.getMd5String(new_pass);
		//	String ecrpt_tra_new_pass=MD5.getMd5String(tra_new_pass);


//		String ecrpt_old_pass=passcrpt.getPasswordCrypted(old_pass);
		//String ecrpt_tra_old_pass=passcrpt.getPasswordCrypted(tra_old_pass);

		//String ecrpt_new_pass=passcrpt.getPasswordCrypted(new_pass);
		//String ecrpt_tra_new_pass=passcrpt.getPasswordCrypted(tra_new_pass);

		try
		{


			String 	sql="select ibusr_accno from s_ibusr where ibusr_usrid = '" + login_id + "'" ;
			String [][] res=sel_db.getData(1,sql);
			logger.info("First slecet SQL is::::"+sql);
			if(res==null)
			{
				flag=0;
			}
			else 
			{
				/*sql="select ibusr_accno from s_ibusr where ibusr_trnpass='"+ecrpt_tra_old_pass+"' and ibusr_usrid='"+login_id+"'";
				res=sel_db.getData(1,sql);
				logger.info("First slecet SQL is::::"+sql);
				if(res==null)
				{
					flag=1;
				}

				else
				{
				 */
				sql="update s_ibusr set ibusr_flag='Y',ibusr_status = 'A', ibusr_usrpass='"+ecrpt_new_pass +"' where  ibusr_usrid='"+login_id+"'";
				logger.info("update SQL is::::"+sql);
				db.db_update(sql);
				logger.info("Updated ");


				//}

			}

		}

		catch(Exception e)
		{
			logger.info("Error in ibUsrNewPass finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
		return flag;

	}

	public void stopChequeRequest(String sLogin_id,String sAccNo,String g_Date,String reqtype,String cheq_num,String sRemark)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		try
		{		
			String qry = "insert into s_ibreq" +
			"(ibreq_usrid," +
			"ibreq_date," +
			"ibreq_type," +
			"ibreq_accno," +
			"ibreq_flag," +
			"ibreq_chno," +
			"ibreq_remark) " +
			"values(?,?,?,?,?,?,?)";
			logger.info("qry is:::"+qry);
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,sLogin_id);
			argList.add(1,g_Date);
			argList.add(2,reqtype);
			argList.add(3,sAccNo);
			argList.add(4,"Y");
			argList.add(5,cheq_num);
			argList.add(6,sRemark);
			db.db_Insert(qry,argList);
			/*'"+sLogin_id+"'," +
			"'"+g_Date+"'," +
			"'"+reqtype+"'," +
			"'"+sAccNo+"'," +
			"'Y',"
			+cheq_num+",'"
			+sRemark+"'
			 */		}

		catch(Exception e)
		{
			logger.info("Error in stopChequeRequest finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}

	}

	public void debitCardRequest(String sLogin_id,String sAccNo,String g_Date,String reqtype)throws RemoteException
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		try
		{		

			String qry = "insert "+ 
			" into s_ibreq(ibreq_usrid,"+
			" ibreq_accno,"+
			" ibreq_date,"+
			" ibreq_type,ibreq_flag)"+
			" values (?,?,?,?,?)";
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,sLogin_id);
			argList.add(1,sAccNo);
			argList.add(2,g_Date);
			argList.add(3,reqtype);
			argList.add(4,"Y");
			logger.info("qry is:::"+qry);
			db.db_Insert(qry,argList);
			/*'"+sLogin_id+"'," +
			"'"+sAccNo+"'," +
			"'"+g_Date+"'," +
			"'"+reqtype+"','Y'
			 */		}

		catch(Exception e)
		{
			logger.info("Error in stopChequeRequest finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}

	}


	public void newChequeBookReq(String sLogin_id,String sAccNo,String sChkLeaf,String reqtype,String g_Date)throws RemoteException
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		try
		{		
			String qry ="insert into s_ibreq " +
			"(ibreq_usrid," +
			"ibreq_accno," +
			"ibreq_noofleafs," +
			"ibreq_date," +
			"ibreq_type,ibreq_flag) " +
			"values (?,?,?,?,?,?)";
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,sLogin_id);
			argList.add(1,sAccNo);
			argList.add(2,sChkLeaf);
			argList.add(3,g_Date);
			argList.add(4,reqtype);
			argList.add(5,"Y");
			logger.info("qry is:::"+qry);
			db.db_Insert(qry,argList);
			/*'"+sLogin_id+"'," +
			"'"+sAccNo+"'," +
			"'"+sChkLeaf+"'," +
			"'"+g_Date+"'," +
			"'"+reqtype+"','Y'
			 */		}

		catch(Exception e)
		{
			logger.info("Error in stopChequeRequest finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}


	}





	/*	public String [][] executeTranPass (String login_id,String tran_pass)throws RemoteException
	 {

	 BMLogger logger=new BMLogger(CentralBean.class);
	 DataBaseClass db=new DataBaseClass();
	 SelectDataBeanRowCol sel_db= new SelectDataBeanRowCol(db); 
	 String [][]res=null;
	 PasswordCrypt passcrpt=new PasswordCrypt();
	 String ecrptpass=passcrpt.getPasswordCrypted(tran_pass);
	 try
	 {			

	 String qry="select ibusr_kid," +
	 "ibusr_trnpass " +
	 "from s_ibusr " +
	 "where ibusr_trnpass='"+ecrptpass+"'" +
	 "and ibusr_usrid='"+login_id+"'";
	 res = sel_db.getData(2,qry);
	 logger.info("Check Password Query"+qry);
	 }		
	 catch(Exception e)
	 {
	 logger.info("Error in stopChequeRequest finding");
	 e.printStackTrace();
	 }
	 finally
	 {
	 db.Finalize();
	 }
	 return res;
	 } */


	public void executeFlexiDeposit(String sLogin_id,Date g_Date,String acc_num,int day1,int month1,int year1,float amt,float bal,int day2,int month2,int year2,String choice)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		try
		{
			logger.info("Starting method FlexiQuant" );
			String qry="insert into s_ibreqdeposit" +
			"(ibreq_usrid," +
			"ibreq_date," +
			"ibreq_accnodr," +
			"ibreq_type," +
			"ibreq_dd," +
			"ibreq_mm," +
			"ibreq_yyyy," +
			"ibreq_amt," +
			"ibreq_balabove," +
			"ibreq_renewdd," +
			"ibreq_renewmm," +
			"ibreq_renewyyyy," +
			"ibreq_choice,ibreq_flag) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,sLogin_id);
			argList.add(1,g_Date);
			argList.add(2,acc_num);
			argList.add(3,"FFD");
			argList.add(4,day1);
			argList.add(5,month1);
			argList.add(6,year1);
			argList.add(7,amt);
			argList.add(8,bal);
			argList.add(9,day2);
			argList.add(10,month2);
			argList.add(11,year2);
			argList.add(12,choice);
			argList.add(13,"Y");
			logger.info("qry is:::"+qry);
			db.db_Insert(qry,argList);
			/*'"+sLogin_id+"'," +
			"'"+g_Date+"'," +
			"'"+acc_num+"'," +
			"'FFD',"
			+day1+","+
			month1+","+
			year1+","+
			amt+","+
			bal+","+
			day2+","+
			month2+","+
			year2+",'"+
			choice+"','Y'
			 */		}
		catch(Exception e)
		{
			logger.info("Error in stopChequeRequest finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
	}
	public void saveLostAtmCard(String sLogin_id,String sAccNo,String reqtype,String s_card,String s_name,String g_Date)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		try
		{
			String qry = "insert into s_ibreq" +
			"(ibreq_usrid," +
			"ibreq_accno," +
			"ibreq_date," +
			"ibreq_type," +
			"ibreq_cardno," +
			"ibreq_name,ibreq_flag) values(?,?,?,?,?,?,?)";

			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,sLogin_id);
			argList.add(1,sAccNo);
			argList.add(2,g_Date);
			argList.add(3,reqtype);
			argList.add(4,s_card);
			argList.add(5,s_name);
			argList.add(6,"Y");
			logger.info("qry is:::"+qry);
			db.db_Insert(qry,argList);
			/*'"+sLogin_id+"'," +
			"'"+sAccNo+"'," +
			"'"+g_Date+"'," +
			"'"+reqtype+"'," +
			"'"+s_card+"'," +
			"'"+s_name+"','Y'
			 */			
		}
		catch(Exception e)
		{
			logger.info("Error in stopChequeRequest finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
	}



	public void mobCommRequest(String sLogin_id,String acc_num,Date g_Date,String sreqtype,String s_name,String servprov,String scell,String srelno)throws RemoteException
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		try
		{

			String qry = "Insert into s_ibreq" +
			"(ibreq_usrid," +
			"ibreq_accno," +
			"ibreq_date," +
			"ibreq_type," +
			"ibreq_name," +
			"ibreq_servprov," +
			"ibreq_mobile," +
			"ibreq_relno,ibreq_flag) values " +
			"(?,?,?,?,?,?,?,?,?)";
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,sLogin_id);
			argList.add(1,acc_num);
			argList.add(2,g_Date);
			argList.add(3,sreqtype);
			argList.add(4,s_name);
			argList.add(5,servprov);
			argList.add(6,scell);
			argList.add(7,srelno);
			argList.add(8,"Y");
			logger.info("qry is:::"+qry);
			db.db_Insert(qry,argList);
			/*'"+sLogin_id+"'," +
			"'"+acc_num+"'," +
			"'"+g_Date+"'," +
			"'"+sreqtype+"'," +
			"'"+s_name+"'," +
			"'"+servprov+"'," +
			"'"+scell+"'," +
			"'"+srelno+"','Y'
			 */			
		}
		catch(Exception e)
		{
			logger.info("Error in mobCommRequest finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}	

	}

	public void saveFixDep(String sLogin_id,String reqtyp,String scheme,int day,int month,int year,float amt,String duration,String creditacc,Date g_Date)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		String qry=null;
		try
		{


			logger.info("Starting method FixDep in Bean methods" );
			ArrayList<Object> argList = new ArrayList<Object>();
			if(scheme.equals("C"))
			{
				qry = "insert into s_ibreqdeposit" +
				"(ibreq_usrid," +
				"ibreq_date," +
				"ibreq_type," +
				"ibreq_scheme," +
				"ibreq_dd," +
				"ibreq_mm," +
				"ibreq_yyyy," +
				"ibreq_amt," +
				"ibreq_accnodr,ibreq_flag)" +
				"values(?,?,?,?,?,?,?,?,?,?)";

				//ArrayList<Object> argList = new ArrayList<Object>();
				argList.add(0,sLogin_id);
				argList.add(1,g_Date);
				argList.add(2,reqtyp);
				argList.add(3,scheme);
				argList.add(4,day);
				argList.add(5,month);
				argList.add(6,year);
				argList.add(7,amt);
				argList.add(8,creditacc);				
				argList.add(9,"Y");
				/*'"+sLogin_id+"'," +
				"'"+g_Date+"'," +
				"'"+reqtyp+"'," +
				"'"+scheme+"',"+day+","+month+","+year+","+amt+","+
				"'"+creditacc+"','Y'
				 */				}

			else
			{
				qry = "insert into s_ibreqdeposit" +
				"(ibreq_usrid," +
				"ibreq_date," +
				"ibreq_type," +
				"ibreq_scheme," +
				"ibreq_dd," +
				"ibreq_mm," +
				"ibreq_yyyy," +
				"ibreq_amt," +
				"ibreq_period," +
				"ibreq_accnocr," +
				"ibreq_accnodr,ibreq_flag)" +
				"values(?,?,?,?,?,?,?,?,?,?,?,?)";	

				argList.add(0,sLogin_id);
				argList.add(1,g_Date);
				argList.add(2,reqtyp);
				argList.add(3,scheme);
				argList.add(4,day);
				argList.add(5,month);
				argList.add(6,year);
				argList.add(7,amt);
				argList.add(8,duration);				
				argList.add(9,creditacc);
				argList.add(10,creditacc);
				argList.add(11,"Y");
				/*'"+sLogin_id+"'," +
				"'"+g_Date+"'," +
				"'"+reqtyp+"'," +
				"'"+scheme+"',"+day+","+month+","+year+","+amt+",'"+duration+"',"+
				"'"+creditacc+"'," +
				"'"+creditacc+"','Y'
				 */			}

			logger.info("qry is:::"+qry);
			db.db_Insert(qry,argList);

		}
		catch(Exception e)
		{
			logger.info("Error in saveFixDep finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}	

	}



	public void recurrDepositRequest(String usr_id,Date g_Date,String acc_num,int month,int year,float amt)throws RemoteException
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		try
		{
			String qry="insert into s_ibreqdeposit" +
			"(ibreq_usrid," +
			"ibreq_Date," +
			"ibreq_accnodr," +
			"ibreq_type," +
			"ibreq_mm," +
			"ibreq_yyyy," +
			"ibreq_amt,ibreq_flag) " +
			"values(?,?,?,?,?,?,?,?)";
			logger.info("qry is:::"+qry);
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,usr_id);
			argList.add(1,g_Date);
			argList.add(2,acc_num);
			argList.add(3,"RD");
			argList.add(4,month);
			argList.add(5,year);
			argList.add(6,amt);
			argList.add(7,"Y");
			db.db_Insert(qry,argList);

			/*'"+usr_id+"'," +
			"'"+g_Date+"'," +
			"'"+acc_num+"'," +
			"'RD',"+month+","+year+","+amt+",'Y'
			 */			
		}
		catch(Exception e)
		{
			logger.info("Error in recurrDepositRequest finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}	



	}




	public void Insertdata(String trntype,
			String docid,
			String brncode,
			String pname,
			String hpname,
			String hpadd1,
			String hpadd2,
			String padd1,
			String padd2,
			String cityid,
			String stateid,
			String panno,
			String curid,
			String purpose,
			String accNum,
			String amt,
			Date g_date)throws RemoteException
			{
		DataBaseClass db = new DataBaseClass();
		//	SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		BMLogger logger=new BMLogger(CentralBean.class);

		if(brncode.equalsIgnoreCase(""))
		{
			brncode="null";
		}
		if(purpose.equalsIgnoreCase(""))
		{
			purpose="null";
		}
		if(padd2.equalsIgnoreCase(""))
		{
			padd2="null";
		}
		try{

			db.doBeginTrans();
			logger.info("===========City Id=========="+cityid);
			String sql3=" insert into s_ibddreq (ddreq_trntype,ddreq_dmstrid,ddreq_brncode,ddreq_ename," +
			" ddreq_hname,ddreq_hadd1,ddreq_hadd2,ddreq_eadd1,ddreq_eadd2,ddreq_cityid, " +
			" ddreq_stateid,ddreq_panno,ddreq_curid,ddreq_purpse,ddreq_date,ddreq_flag, "+
			" ddreq_remark,ddreq_accno,ddreq_amt) " +
			" values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			logger.info(sql3);
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,"T");
			argList.add(1,docid);
			argList.add(2,brncode);
			argList.add(3,pname);
			argList.add(4,hpname);
			argList.add(5,hpadd1);
			argList.add(6,hpadd2);
			argList.add(7,padd1);
			argList.add(8,padd2);
			argList.add(9,cityid);
			argList.add(10,stateid);
			argList.add(11,panno);
			argList.add(12,curid);
			argList.add(13,purpose);
			argList.add(14,g_date);
			argList.add(15,"Y");
			argList.add(16,accNum);
			argList.add(17,amt);
			db.db_Insert(sql3,argList);
			db.doCommit();
			/*'T','"+docid+"','"+brncode+"','"+pname+"',N'"+hpname+"',N'"+hpadd1+"', " +
			" N'"+hpadd2+"','"+padd1+"','"+padd2+"','"+cityid+"','"+stateid+"','"+panno+"', "+
			" '"+curid+"','"+purpose+"','"+g_date+"','Y',' ',"+accNum+","+amt+"
			 */
		}catch(Exception e)
		{
			db.doRollback();
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}

			}




	////// mail Module ......../////////
	public boolean executeOnSendMail(MailMessageInfo info, MailMessage message) throws RemoteException
	{
		boolean result = false;
		BMLogger logger = new BMLogger(MailServiceBean.class);
		DataBaseClass db = null;
		try {
			MailFunctions func = new MailFunctions();

			info.SEND_HOST = BMConfig.getProperty("Mail.host");
			info.SEND_PORT = BMConfig.getProperty("Mail.send.port");

			if (!func.isServerActive(info.SEND_HOST, Integer
					.parseInt(info.SEND_PORT))) {
				db = new DataBaseClass();
				db.doBeginTrans();
				if (func.saveMessageOnDataBase(info, message, db)) {
					db.doCommit();
					return true;
				} else {
					db.doRollback();
					return false;
				}
			}
			logger.info("Port is active ");

			if (info.FILE_CLASS != null
					&& info.FILE_CLASS.getFileData() != null) {
				logger.info("  filename:: " + info.FILE_CLASS.getFileName());
				result = func.sendMessageWithAttach(message, info);
			} else
				result = func.sendMessage(message, info);
		} catch (Exception e) {
			logger.info("Error on Sending Message :::" + e);
			e.printStackTrace();
			result = false;
		} finally {
			if (db != null) {
				if (db.checkBeginTrans())
					db.doRollback();
				db.Finalize();
			}

		}
		return result;
	}

	public HashMap<Object, Object> executeOnReceieve(MailMessageInfo info)throws RemoteException 
	{
		HashMap<Object, Object> returnObjects = new HashMap<Object, Object>();
		BMLogger logger = new BMLogger(MailServiceBean.class);
		DataBaseClass db = null;
		try {
			MailFunctions func = new MailFunctions();
			info.RECV_HOST = BMConfig.getProperty("Mail.host");// "192.168.0.212";
			db = new DataBaseClass();
			info.RECV_PASS = "bank";
			info.RECV_ROOT="INBOX";
			if (info.RECV_PASS == null
					|| info.RECV_PASS.trim().equalsIgnoreCase("")) {
				logger
				.error("Password not fetched for User::"
						+ info.RECV_USER);
				returnObjects.put("Error-UserNotDefined-302", "Y");
				return returnObjects;
			}
			MailMessage[] messages = func.getMessagesNew(info);

			if (messages == null || messages.length == 0) {
				logger.error("No Single Mail for User::" + info.RECV_USER);
				returnObjects.put("Error-NoRowsRetrieved-1903", "Y");
				return returnObjects;
			} else {
				ArrayList<Object> messageArray = new ArrayList<Object>();
				for (int i = 0; i < messages.length; i++)
					messageArray.add(i, messages[i]);
				returnObjects.put("Messages", messageArray);
			}
		} catch (Exception e) {
			logger.error("No Single Mail for User::" + info.RECV_USER);
			returnObjects.put("Error-NoRowsRetrieved-1903", "Y");
			e.printStackTrace();
			return returnObjects;
		} finally {
			if (db != null)
				db.Finalize();
		}
		return returnObjects;
	}



	public boolean executeOnDeleteMail(MailMessageInfo info)
	throws RemoteException
	{
		BMLogger logger = new BMLogger(MailServiceBean.class);
		boolean flag = false;

		try {
			info.RECV_HOST = BMConfig.getProperty("Mail.host");// "192.168.0.212";
			info.RECV_PASS = "bank";
			info.RECV_ROOT="INBOX";
			Session session =(Session) new InitialContext().lookup("MailSession");
			session.setDebug(true);
			Store store = session.getStore();
			store.connect(info.RECV_HOST,info.RECV_USER, info.RECV_PASS);
			Folder rf;
			if (info.RECV_ROOT.length() != 0) {
				logger.info("Getting folder " + info.RECV_ROOT + ".");
				rf = store.getFolder(info.RECV_ROOT);
			} else {
				logger.info("Getting default folder.");
				rf = store.getDefaultFolder();
			}
			rf.open(Folder.READ_WRITE);
			Message[] msg = rf.getMessages();
			String mailIds = info.MAIL_IDS;
			int pos = mailIds.indexOf(",");
			int No = 0;
			logger.info("mailIds :: " + mailIds);
			while (mailIds != "" && pos > 0) {
				String msgNo = mailIds.substring(0, (pos));
				logger.info("msgno....." + msgNo);
				mailIds = mailIds.substring(pos + 1);
				pos = mailIds.indexOf(",");
				logger.info("mailIds :: " + mailIds);
				try {
					No = Integer.parseInt(msgNo);
				} catch (NumberFormatException e) {
					No = 0;
				}
				if (No > 0) {
					msg[No - 1].setFlag(Flags.Flag.DELETED, true);
					logger.info("deleted message :: " + No);
					flag = true;
				}
			}
			if (rf != null)
				rf.close(true);
			if (store != null)
				store.close();
			session = null;
		} catch (Exception e) 
		{
			e.printStackTrace();
		}

		return flag;
	}



	public HashMap<Object, Object> executeOnPendingMail(String purpose,
			String mailIds) throws RemoteException 
			{

		HashMap<Object, Object> returnObjects = new HashMap<Object, Object>();
		DataBaseClass db = null;
		MailFunctions mailFunc = new MailFunctions();
		BMLogger logger = new BMLogger(MailServiceBean.class);
		logger.info("Came for :: " + purpose);

		try {
			/*
			 * File f = new File("c:\\cbsinfo.ini"); FileInputStream fis = new
			 * FileInputStream(f); Properties prop = new Properties();
			 * prop.load(fis);
			 */
			db = new DataBaseClass();
			String host = BMConfig.getProperty("Mail.host");// "192.168.0.212";
			String port = BMConfig.getProperty("Mail.send.port");// "8090";

			if (purpose.trim().equalsIgnoreCase("pendingMails")) {
				returnObjects = mailFunc.getPendingMails(host, Integer
						.parseInt(port), db);
			} else if (purpose.trim().equalsIgnoreCase("sendPendingMails")) {
				returnObjects = mailFunc.sendPendingMails(host, Integer
						.parseInt(port), db);
			}
		} catch (Exception e) {
			logger.info("Exception in executeOnPendingMail " + e);
		} finally {
			if (db != null)
				db.Finalize();
		}
		return returnObjects;
			}








////////////function for Fixed Deposit//////////////
	/*
	public HashMap  getIbusrRequest(String sReq_type, String Date1, String Date2, String crite)throws RemoteException 
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();

		logger.info("in bean");
		logger.info("sreq_Type"+sReq_type);

		logger.info("Date1"+Date1);
		logger.info("Date2"+Date2);
		logger.info("crite"+crite);


		Date sqlDate1=DateTimeFunction.strToSqlDate(Date1);
		Date sqlDate2=DateTimeFunction.strToSqlDate(Date2);

		logger.info("sqlDate1"+sqlDate1);
		logger.info("sqlDate2"+sqlDate2);

		req_date.clear();
		req_name.clear();
		req_acc.clear();
		req_type.clear();
		req_mm.clear();
		req_yyyy.clear();
		req_dd.clear();
		req_scheme.clear();

		req_amt.clear();
		req_period.clear();


		req_newdd.clear();
		req_newmm.clear();
		req_newyyyy.clear();
		req_balAbv.clear();

		chk_leafs.clear();		
		req_cardNum.clear();
		ibreq_name.clear();

		req_servProv.clear();
		req_MobileNum.clear();
		req_Reln.clear();
		req_Kid.clear();
		req_flag.clear();
		req_remarks.clear();
		req_Kid.clear();

		try
		{
			sel_db=new SelectDataBeanRowCol(db);	


			if( sReq_type.equalsIgnoreCase("FD")||sReq_type.equalsIgnoreCase("FFD")||sReq_type.equalsIgnoreCase("RD"))
			{

				logger.info("I m in Bean and whether FD,FFD, RD Called");
				if(crite.equalsIgnoreCase("A"))

					sql="select * from s_ibreqdeposit where ibreq_type='"+sReq_type+"' and ibreq_date between '"+sqlDate1+"' and '"+sqlDate2+"' and ibreq_flag in('Y','R','D')";

				else

					sql="select * from s_ibreqdeposit where ibreq_type='"+sReq_type+"' and ibreq_date between '"+sqlDate1+"' and '"+sqlDate2+"' and ibreq_flag ='"+crite+"'";


				logger.info("first sql"+sql);

				result=sel_db.getData(19,sql);

				logger.info("first result"+result);

				if(result!=null)
				{
					for(int i=0;i<result.length;i++)
					{
						logger.info("result.length"+result.length);

						logger.info("In loop value of IIII"+i);


						req_date.add(result[i][2]);
						req_acc.add(result[i][4]);
						req_scheme.add(result[i][5]);

						req_dd.add(result[i][6]);
						req_mm.add(result[i][7]);
						req_yyyy.add(result[i][8]);
						req_amt.add(result[i][9]);

						req_period.add(result[i][10]);

						req_newdd.add(result[i][12]);
						req_newmm.add(result[i][13]);
						req_newyyyy.add(result[i][14]);
						req_balAbv.add(result[i][15]);

						req_flag.add(result[i][17]);
						req_remarks.add(result[i][18]);
						req_Kid.add(result[i][0]);

						logger.info("req_kid"+result[i][0]);

						/// common for all queries ////////	
						sql="select ibusr_usrid from s_ibusr where ibusr_accno='"+result[i][4]+"'";
						logger.info("second SQL IS"+sql);
						result1=sel_db.getData(1,sql);
						logger.info("second Result IS"+result1);
						req_name.add(result1[0][0]);
					}
					fix_reqDet.put("req_Dates",req_date);
					fix_reqDet.put("req_Names",req_name);
					fix_reqDet.put("req_AccNum",req_acc);
					fix_reqDet.put("req_Sch",req_scheme);
					fix_reqDet.put("req_Days",req_dd);
					fix_reqDet.put("req_Month",req_mm);
					fix_reqDet.put("req_Year",req_yyyy);
					fix_reqDet.put("req_Amount",req_amt);
					fix_reqDet.put("req_Per",req_period);
					fix_reqDet.put("req_newDays",req_newdd);
					fix_reqDet.put("req_newMonth",req_newmm);
					fix_reqDet.put("req_newYear",req_newyyyy);
					fix_reqDet.put("req_BalAbove",req_balAbv);
					fix_reqDet.put("req_Kids",req_Kid);
					fix_reqDet.put("req_Flags",req_flag);
					fix_reqDet.put("req_Remarks",req_remarks);


				}// if ends here 

			}// if ends here
			else if(sReq_type.equalsIgnoreCase("DD"))
			{

				String result_city[][]=null;
				ArrayList <Object> trn_type = new ArrayList<Object>();
				ArrayList <Object> str_type = new ArrayList<Object>();
				ArrayList <Object> brn_code = new ArrayList<Object>();
				ArrayList <Object> h_name = new ArrayList<Object>();
				ArrayList <Object> h_addr1 = new ArrayList<Object>();
				ArrayList <Object> h_addr2 = new ArrayList<Object>();
				ArrayList <Object> e_addr1 = new ArrayList<Object>();
				ArrayList <Object> e_addr2 = new ArrayList<Object>();
				ArrayList <Object> city_name = new ArrayList<Object>();
				ArrayList <Object> state_name = new ArrayList<Object>();
				ArrayList <Object> pan_num = new ArrayList<Object>();
				ArrayList <Object> curr_name = new ArrayList<Object>();
				ArrayList <Object> dd_pur = new ArrayList<Object>();
				ArrayList <Object> dd_amt = new ArrayList<Object>();


				if(crite.equalsIgnoreCase("A"))
					sql="select * from s_ibddreq where ddreq_date between '"+sqlDate1+"' and '"+sqlDate2+"' and ddreq_flag in('Y','R','D')";

				else

					sql="select * from s_ibddreq where ddreq_date between '"+sqlDate1+"' and '"+sqlDate2+"' and ddreq_flag ='"+crite+"'";

				logger.info("====DD sql===="+sql);

				result=sel_db.getData(20,sql);
				logger.info("DD result"+result);

				if(result!=null)
				{
					for(int i=0;i<result.length;i++)
					{
						logger.info("result.length"+result.length);
						logger.info("In loop value of IIII"+i);
						logger.info("In loop value result[i][2]"+result[i][2]);

						trn_type.add(result[i][2]);
						str_type.add(result[i][1]); 		
						brn_code.add(result[i][3]); 
						req_name.add(result[i][4]);
						h_name.add(result[i][5]); 
						h_addr1.add(result[i][6]);
						h_addr2.add(result[i][7]);
						e_addr1.add(result[i][8]);
						e_addr2.add(result[i][9]);


						String sql_city="select city_ename,city_hname from s_city where city_kid='"+result[i][10]+"'";
						logger.info("Sql_City"+sql_city);
						result_city=sel_db.getData(2,sql_city);
						if(result_city!=null)
						{
							String city_Name=result_city[0][0]+' '+result_city[0][1];
							logger.info("city_Name"+city_Name);
							city_name.add(city_Name);
						}

						String sql_state="select stat_ename from s_stat where stat_kid='"+result[i][11]+"'";
						logger.info("====State Query==="+sql_state);
						String[][]state_Name=(String[][])sel_db.getData(1,sql_state);
						if(state_Name!=null)
						{
							logger.info("state_Name"+state_Name[0][0]);
							state_name.add(state_Name[0][0]);
						}
						pan_num.add(result[i][12]);


						String sql_curr="select cur_ename,cur_hname from s_cur where cur_kid='"+result[i][13]+"'";
						logger.info("sql_curr"+sql_curr);
						String[][]curr_Name=(String[][])sel_db.getData(2,sql_curr);
						if(curr_Name!=null)
						{
							String curren=curr_Name[0][0]+' '+curr_Name[0][1]; 
							logger.info("curren"+curren);
							curr_name.add(curren);
						}
						dd_pur.add(result[i][14]);
						req_date.add(result[i][15]);
						req_flag.add(result[i][16]);
						req_remarks.add(result[i][17]);

						req_acc.add(result[i][19]);
						req_Kid.add(result[i][0]);
						dd_amt.add(result[i][18]);
					}

					fix_reqDet.put("req_Dates",req_date);
					fix_reqDet.put("req_Names",req_name);
					fix_reqDet.put("req_AccNum",req_acc);
					fix_reqDet.put("trn_Type",trn_type);
					fix_reqDet.put("str_Type",str_type);

					fix_reqDet.put("brn_Code",brn_code);
					fix_reqDet.put("h_Name",h_name);
					fix_reqDet.put("h_Addr1",h_addr1);
					fix_reqDet.put("h_Addr2",h_addr2);

					fix_reqDet.put("e_Addr1",e_addr1);
					fix_reqDet.put("e_Addr2",e_addr2);

					fix_reqDet.put("city_Name",city_name);
					fix_reqDet.put("state_Name",state_name);

					fix_reqDet.put("pan_Num",pan_num);
					fix_reqDet.put("curr_Name",curr_name);

					fix_reqDet.put("dd_Pur",dd_pur);
					fix_reqDet.put("dd_Amt",dd_amt);

					fix_reqDet.put("req_Kids",req_Kid);
					fix_reqDet.put("req_Flags",req_flag);
					fix_reqDet.put("req_Remarks",req_remarks);
				}

			}


			else
			{
		//		if(crite.equalsIgnoreCase("A"))
		//			sql="select ibreq_usrid,ibreq_accno,ibreq_noofleafs,ibreq_date,ibreq_type,ibreq_cardno,ibreq_name,ibreq_servprov,ibreq_mobile,ibreq_relno,ibreq_flag,ibreq_remark,ibreq_chno from s_ibreq where ibreq_type='"+sReq_type+"'  and ibreq_date between '"+sqlDate1+"' and '"+sqlDate2+"' and ibreq_flag in('Y','R','D')";
		// 		else
		//			sql="select ibreq_usrid,ibreq_accno,ibreq_noofleafs,ibreq_date,ibreq_type,ibreq_cardno,ibreq_name,ibreq_servprov,ibreq_mobile,ibreq_relno,ibreq_flag,ibreq_remark,ibreq_chno from s_ibreq where ibreq_type='"+sReq_type+"' and ibreq_date between '"+sqlDate1+"' and '"+sqlDate2+"' and ibreq_flag ='"+crite+"'";
				String sdate1=sqlDate1.toString()+" 0:0:0.000";
				String sdate2=sqlDate2.toString()+" 23:59:59.999";
				if(crite.equalsIgnoreCase("A"))
					sql="select ibreq_usrid,ibreq_accno,ibreq_noofleafs,ibreq_date,ibreq_type,ibreq_cardno,ibreq_name,ibreq_servprov,ibreq_mobile,ibreq_relno,ibreq_flag,ibreq_remark,ibreq_chno from s_ibreq where ibreq_type='"+sReq_type+"'  and ibreq_date between '"+sdate1+"' and '"+sdate2+"' and ibreq_flag in('Y','R','D')";
				else
					sql="select ibreq_usrid,ibreq_accno,ibreq_noofleafs,ibreq_date,ibreq_type,ibreq_cardno,ibreq_name,ibreq_servprov,ibreq_mobile,ibreq_relno,ibreq_flag,ibreq_remark,ibreq_chno from s_ibreq where ibreq_type='"+sReq_type+"' and ibreq_date between '"+sdate1+"' and '"+sdate2+"' and ibreq_flag ='"+crite+"'";


				logger.info("first sql"+sql);
				result=sel_db.getData(13,sql);
				logger.info("first result"+result);

				if(result!=null)
				{
					logger.info("result.length"+result.length);
					for(int i=0;i<result.length;i++)
					{
						logger.info("In loop value of IIII"+i);
						logger.info("In loop value result[i][2]"+result[i][2]);

						req_acc.add(result[i][1]);
						chk_leafs.add(result[i][2]);
						req_date.add(result[i][3]);
						req_type.add(result[i][4]);
						req_cardNum.add(result[i][5]);
						ibreq_name.add(result[i][6]);

						req_servProv.add(result[i][7]);
					//	req_MobileNum.add(result[i][9]);
					//	req_Reln.add(result[i][10]);

						req_flag.add(result[i][10]);
						req_remarks.add(result[i][11]);

						req_Kid.add(result[i][0]);

						logger.info("req_kid"+result[i][12]);

						sql="select ibusr_usrid from s_ibusr where ibusr_accno='"+result[i][1]+"'";
						logger.info("second SQL IS"+sql);
						result1=sel_db.getData(1,sql);
						logger.info("second Result IS"+result1);
						if(result1!=null)
						req_name.add(result1[0][0]);
					}

					fix_reqDet.put("req_Dates",req_date);
					fix_reqDet.put("req_Names",req_name);
					fix_reqDet.put("req_AccNum",req_acc);
					fix_reqDet.put("req_type",req_type);
					fix_reqDet.put("req_Leafs",chk_leafs);
					fix_reqDet.put("req_cardNum",req_cardNum);

					fix_reqDet.put("req_frmName",ibreq_name);
					fix_reqDet.put("req_SerPr",req_servProv);
					fix_reqDet.put("req_MobNo",req_MobileNum);
					fix_reqDet.put("req_Rel",req_Reln);
					fix_reqDet.put("req_Kids",req_Kid);
					fix_reqDet.put("req_Flags",req_flag);
					fix_reqDet.put("req_Remarks",req_remarks);
				}

			}


		}// try ends
		catch(Exception e)
		{
			logger.info("Exception is"+e);
			e.printStackTrace();
		}
		finally
		{db.Finalize();}
		System.out.println("data is"+fix_reqDet);
		return fix_reqDet;

	}

	 */

////////////function for Fixed Deposit//////////////
	public HashMap  getIbusrRequest(String sReq_type, String Date1, String Date2, String crite)throws RemoteException 
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		logger.info("in bean");
		logger.info("sreq_Type"+sReq_type);
		logger.info("Date1"+Date1);
		logger.info("Date2"+Date2);
		logger.info("crite"+crite);
		Date sqlDate1=DateTimeFunction.strToSqlDate(Date1);
		Date sqlDate2=DateTimeFunction.strToSqlDate(Date2);
		logger.info("sqlDate1"+sqlDate1);
		logger.info("sqlDate2"+sqlDate2);
		req_date.clear();
		req_name.clear();
		req_acc.clear();
		req_type.clear();
		req_mm.clear();
		req_yyyy.clear();
		req_dd.clear();
		req_scheme.clear();
		req_amt.clear();
		req_period.clear();
		req_balAbv.clear();
		chk_leafs.clear();		
		req_cardNum.clear();
		ibreq_name.clear();
		req_day.clear();
		req_month.clear();
		req_fdScheme.clear();	
		req_intrstAcc.clear();
		req_maturInst.clear();
		req_servProv.clear();
		req_MobileNum.clear();
		req_Reln.clear();
		req_Kid.clear();
		req_flag.clear();
		req_remarks.clear();
		req_Kid.clear();
		req_desc.clear();
		req_NameBen.clear();
		req_curcode.clear();
		req_payable.clear();
		req_dob.clear();// added by vijay...
		req_address.clear();
		req_cityCode.clear();
		req_countryCode.clear();
		req_pinCode.clear();
		req_mobNo.clear();
		req_email.clear();
		try
		{
			SelectDataBeanRowCol sel_db=new SelectDataBeanRowCol(db);	
			if(sReq_type.equalsIgnoreCase("FORGOTPASSREQ"))//new added by Vijay for Forgot password request...
			{
				logger.info("########### FOR THE FORGOT PASSWORD REQUEST ############");
				String sdate1=sqlDate1.toString()+" 0:0:0.000";
				String sdate2=sqlDate2.toString()+" 23:59:59.999";
				if(crite.equalsIgnoreCase("A")) {
					sql="select forpass_kid,forpass_custid,forpass_usrid,forpass_accno,forpass_dob,forpass_Eaddr," +
					"forpass_citycode,forpass_cntcode,forpass_pincode,forpass_mobno,forpass_email,forpass_date,forpass_flag,forpass_remarks" +
					" from s_ibforpass" +
					" where forpass_date between '"+sdate1+"' and " +
					"'"+sdate2+"' and forpass_flag in('Y','R','D')"; //14
					logger.info("########### the IF forgot password request query is -------->>>"+sql);
				}
				else {
					sql="select forpass_kid,forpass_custid,forpass_usrid,forpass_accno,forpass_dob,forpass_Eaddr," +
					"forpass_citycode,forpass_cntcode,forpass_pincode,forpass_mobno,forpass_email,forpass_date,forpass_flag,forpass_remarks" +
					" from s_ibforpass" +
					" where forpass_date between '"+sdate1+"' and " +
					"'"+sdate2+"' and forpass_flag='"+crite+"'";
					logger.info("########### the ELSE forgot password request query is -------->>>"+sql);
				}
				result=sel_db.getData(14,sql);
				logger.info("first result"+result);
				if(result!=null)
				{
					logger.info("############ result.length ------>"+result.length);
					for(int i=0;i<result.length;i++)
					{
						req_Kid.add(result[i][0]);//0         kid
						req_name.add(result[i][2]);//2        user id
						req_acc.add(result[i][3]);//3         Account No.
						req_dob.add(result[i][4]);//4         Date of Birth
						req_address.add(result[i][5]);//5     Address
						req_cityCode.add(result[i][6]);//6    City    
						req_countryCode.add(result[i][7]);//7 Country
						req_pinCode.add(result[i][8]);//8     Pin Code
						req_mobNo.add(result[i][9]);//9       Mobile No.
						req_email.add(result[i][10]);//10     Email Address
						req_date.add(result[i][11]);//11      Date
						req_flag.add(result[i][12]);//12      Flag
						req_remarks.add(result[i][13]);//13   remarks.
						req_type.add("FORGOTPASSREQ");
					}

					fix_reqDet.put("req_Kids",req_Kid);
					fix_reqDet.put("req_Names",req_name);
					fix_reqDet.put("req_AccNum",req_acc);
					fix_reqDet.put("req_Dob",req_dob);
					fix_reqDet.put("req_Address",req_address);
					fix_reqDet.put("req_CityCode",req_cityCode);
					fix_reqDet.put("req_CountryCode",req_countryCode);
					fix_reqDet.put("req_PinCode",req_pinCode);
					fix_reqDet.put("req_MobileNo",req_mobNo);
					fix_reqDet.put("req_Email",req_email);
					fix_reqDet.put("req_Dates",req_date);
					fix_reqDet.put("req_Flags",req_flag);
					fix_reqDet.put("req_Remarks",req_remarks);
					fix_reqDet.put("req_type",req_type);
				}



			}
			else if(sReq_type.equalsIgnoreCase("DDREQ"))
			{///for DD Request
				logger.info("FOR THE DEMAND DRAFT REQUEST");
				String sdate1=sqlDate1.toString()+" 0:0:0.000";
				String sdate2=sqlDate2.toString()+" 23:59:59.999";
				if(crite.equalsIgnoreCase("A")){
					sql="select ibreq_usrid,ibreq_accno,ibreq_noofleafs," +
					"ibreq_date,ibreq_type,ibreq_cardno,ibreq_name,ibreq_servprov,ibreq_mobile," +
					"ibreq_relno,ibreq_flag,ibreq_remark,ibreq_chno,ibreq_desc,ibreq_kid " +
					" from s_ibreq" +
					" where ibreq_type='"+sReq_type+"'  and ibreq_date between '"+sdate1+"' and " +
					"'"+sdate2+"' and ibreq_flag in('Y','R','D')";
					logger.info("the dd request query is -------->>>"+sql);
				}
				else{
					sql="select ibreq_usrid,ibreq_accno,ibreq_noofleafs,ibreq_date,ibreq_type,ibreq_cardno," +
					"ibreq_name,ibreq_servprov,ibreq_mobile,ibreq_relno,ibreq_flag,ibreq_remark," +
					"ibreq_chno,ibreq_desc,ibreq_kid" +
					" from s_ibreq where ibreq_type='"+sReq_type+"' and " +
					"ibreq_date between '"+sdate1+"' and '"+sdate2+"' and ibreq_flag ='"+crite+"'";
					logger.info("the else part of dd request query is -------->>>"+sql);
				}
				result=sel_db.getData(15,sql);
				logger.info("first result"+result);
				if(result!=null)
				{logger.info("SQL IS   "+sql);
				logger.info("result.length"+result.length);
				for(int i=0;i<result.length;i++)
				{
					logger.info("In loop value of IIII"+i);
					logger.info("In loop value result[i][2]"+result[i][2]);
					req_name.add(result[i][0]);
					logger.info("NAME IS   "+result[0][0]);
					req_acc.add(result[i][1]);
					logger.info("ACCOUNT  IS   "+result[i][1]);
					chk_leafs.add(result[i][2]);
					req_date.add(result[i][3]);
					req_type.add(result[i][4]);
					req_cardNum.add(result[i][5]);
					ibreq_name.add(result[i][6]);
					req_servProv.add(result[i][7]);
					req_flag.add(result[i][10]);
					req_remarks.add(result[i][11]);
					req_Kid.add(result[i][14]);
					logger.info("req_kid"+result[i][12]);
					req_desc.add(result[i][13]);

					String desc=result[i][13];
					logger.info("Value od desc!!!!!!"+desc);
					String desc1[]=desc.split(";");
					logger.info("Value of DESCRIBE "+desc1[0]);
					logger.info("Value of DESCRIBE"+desc1[1]);

					//	NAMEOFBEN=Manoj Madhavna;AMOUNT=150.0;CURCODE=5;PAYABLEAT=Delhi;
					req_NameBen.add(desc1[0].substring(desc1[0].indexOf("=")+1));
					req_amt.add(desc1[1].substring(desc1[1].indexOf("=")+1));
					req_curcode.add(desc1[2].substring(desc1[2].indexOf("=")+1));	
					req_payable.add(desc1[3].substring(desc1[3].indexOf("=")+1));



				}

				fix_reqDet.put("req_Dates",req_date);
				fix_reqDet.put("req_Names",req_name);
				fix_reqDet.put("req_AccNum",req_acc);
				fix_reqDet.put("req_type",req_type);
				fix_reqDet.put("req_Leafs",chk_leafs);
				fix_reqDet.put("req_cardNum",req_cardNum);

				fix_reqDet.put("req_frmName",ibreq_name);
				fix_reqDet.put("req_SerPr",req_servProv);
				fix_reqDet.put("req_MobNo",req_MobileNum);
				fix_reqDet.put("req_Rel",req_Reln);
				fix_reqDet.put("req_Kids",req_Kid);
				fix_reqDet.put("req_Flags",req_flag);
				fix_reqDet.put("req_Remarks",req_remarks);
				fix_reqDet.put("req_desc",req_desc);
				//	fix_reqDet.put("req_fdScheme",req_fdScheme);
				fix_reqDet.put("req_amt",req_amt);
				//	fix_reqDet.put("req_month",req_month);
				//	fix_reqDet.put("req_day",req_day);
				//fix_reqDet.put("req_maturInst",req_maturInst);
				fix_reqDet.put("req_payable",req_payable);
				//fix_reqDet.put("req_intrstAcc",req_intrstAcc);
				logger.info("!!!!!SIZE OF THE PAYABLE   &&&&"+req_payable.size());
				fix_reqDet.put("req_NameBen",req_NameBen);
				fix_reqDet.put("req_curcode",req_curcode);

				}
			}// DD check end here

			else if(sReq_type.equalsIgnoreCase("FDREQ"))
			{//for FD Request
				String sdate1=sqlDate1.toString()+" 0:0:0.000";
				String sdate2=sqlDate2.toString()+" 23:59:59.999";
				if(crite.equalsIgnoreCase("A")){
					sql="select ibreq_usrid,ibreq_accno,ibreq_noofleafs," +
					"ibreq_date,ibreq_type,ibreq_cardno,ibreq_name,ibreq_servprov,ibreq_mobile," +
					"ibreq_relno,ibreq_flag,ibreq_remark,ibreq_chno,ibreq_desc,ibreq_kid " +
					" from s_ibreq" +
					" where ibreq_type='"+sReq_type+"'  and ibreq_date between '"+sdate1+"' and " +
					"'"+sdate2+"' and ibreq_flag in('Y','R','D')";
					logger.info("FD query is this--------->>>"+sql);
				}
				else {
					sql="select ibreq_usrid,ibreq_accno,ibreq_noofleafs,ibreq_date,ibreq_type,ibreq_cardno," +
					"ibreq_name,ibreq_servprov,ibreq_mobile,ibreq_relno,ibreq_flag,ibreq_remark," +
					"ibreq_chno,ibreq_desc,ibreq_kid" +
					" from s_ibreq where ibreq_type='"+sReq_type+"' and " +
					"ibreq_date between '"+sdate1+"' and '"+sdate2+"' and ibreq_flag ='"+crite+"'";
					logger.info("FD Second query is this--------->>>"+sql);
				}
				result=sel_db.getData(15,sql);
				logger.info("first result"+result);
				if(result!=null)
				{
					logger.info("result.length"+result.length);
					for(int i=0;i<result.length;i++)
					{
						logger.info("In loop value of IIII"+i);
						logger.info("In loop value result[i][2]"+result[i][2]);
						req_name.add(result[i][0]);
						req_acc.add(result[i][1]);
						chk_leafs.add(result[i][2]);
						req_date.add(result[i][3]);
						req_type.add(result[i][4]);
						req_cardNum.add(result[i][5]);
						ibreq_name.add(result[i][6]);
						req_servProv.add(result[i][7]);
						req_flag.add(result[i][10]);
						req_remarks.add(result[i][11]);
						req_Kid.add(result[i][14]);
						logger.info("req_kid"+result[i][12]);
						req_desc.add(result[i][13]);

						String desc=result[i][13];
						String desc1[]=desc.split(";");

						req_fdScheme.add(desc1[0].substring(desc1[0].indexOf("=")+1));
						req_amt.add(desc1[1].substring(desc1[1].indexOf("=")+1));
						req_month.add(desc1[2].substring(desc1[2].indexOf("=")+1));
						req_day.add(desc1[3].substring(desc1[3].indexOf("=")+1));
						req_maturInst.add(desc1[4].substring(desc1[4].indexOf("=")+1));
						req_payable.add(desc1[5].substring(desc1[5].indexOf("=")+1));
						req_intrstAcc.add(desc1[6].substring(desc1[6].indexOf("=")+1));

						//		sql="select isnull(ibusr_usrid,0) from s_ibusr where ibusr_accno='"+result[i][1]+"'";
						//		logger.info("second SQL IS"+sql);
						//			result1=sel_db.getData(1,sql);
						//		logger.info("second Result IS"+result1);
						//		if(result1!=null)
						//	req_name.add(result1[0][0]);
					}

					fix_reqDet.put("req_Dates",req_date);
					fix_reqDet.put("req_Names",req_name);
					fix_reqDet.put("req_AccNum",req_acc);
					fix_reqDet.put("req_type",req_type);
					//		fix_reqDet.put("req_Leafs",chk_leafs);
					//		fix_reqDet.put("req_cardNum",req_cardNum);

					//		fix_reqDet.put("req_frmName",ibreq_name);
					//		fix_reqDet.put("req_SerPr",req_servProv);
					//		fix_reqDet.put("req_MobNo",req_MobileNum);
					//		fix_reqDet.put("req_Rel",req_Reln);
					fix_reqDet.put("req_Kids",req_Kid);
					fix_reqDet.put("req_Flags",req_flag);
					fix_reqDet.put("req_Remarks",req_remarks);
					fix_reqDet.put("req_desc",req_desc);
					fix_reqDet.put("req_fdScheme",req_fdScheme);
					fix_reqDet.put("req_amt",req_amt);
					fix_reqDet.put("req_month",req_month);
					fix_reqDet.put("req_day",req_day);
					fix_reqDet.put("req_maturInst",req_maturInst);
					fix_reqDet.put("req_payable",req_payable);
					fix_reqDet.put("req_intrstAcc",req_intrstAcc);

					/*			logger.info("size of req_Dates"+ req_date.size());
				logger.info("size of req_name"+ req_name.size());
				logger.info("size of req_acc"+ req_acc.size());
				logger.info("size of req_type"+ req_type.size());
				logger.info("size of req_Dates"+ req_date.size());
				logger.info("size of req_Dates"+ req_date.size());
				logger.info("size of req_Dates"+ req_date.size());
				logger.info("size of req_Dates"+ req_date.size());
				logger.info("size of req_Dates"+ req_date.size());
				logger.info("size of req_Dates"+ req_date.size());
				logger.info("size of req_Dates"+ req_date.size());
					 */			
				}

			}
			else
			{
				//		if(crite.equalsIgnoreCase("A"))
				//			sql="select ibreq_usrid,ibreq_accno,ibreq_noofleafs,ibreq_date,ibreq_type,ibreq_cardno,ibreq_name,ibreq_servprov,ibreq_mobile,ibreq_relno,ibreq_flag,ibreq_remark,ibreq_chno from s_ibreq where ibreq_type='"+sReq_type+"'  and ibreq_date between '"+sqlDate1+"' and '"+sqlDate2+"' and ibreq_flag in('Y','R','D')";
				// 		else
				//			sql="select ibreq_usrid,ibreq_accno,ibreq_noofleafs,ibreq_date,ibreq_type,ibreq_cardno,ibreq_name,ibreq_servprov,ibreq_mobile,ibreq_relno,ibreq_flag,ibreq_remark,ibreq_chno from s_ibreq where ibreq_type='"+sReq_type+"' and ibreq_date between '"+sqlDate1+"' and '"+sqlDate2+"' and ibreq_flag ='"+crite+"'";
				String sdate1=sqlDate1.toString()+" 0:0:0.000";
				String sdate2=sqlDate2.toString()+" 23:59:59.999";
				if(crite.equalsIgnoreCase("A")){
					sql="select ibreq_usrid,ibreq_accno,ibreq_noofleafs," +
					"ibreq_date,ibreq_type,ibreq_cardno,ibreq_name,ibreq_servprov,ibreq_mobile," +
					"ibreq_relno,ibreq_flag,ibreq_remark,ibreq_chno,ibreq_desc,ibreq_kid from s_ibreq" +
					" where ibreq_type='"+sReq_type+"'  and ibreq_date between '"+sdate1+"' and " +
					"'"+sdate2+"' and ibreq_flag in('Y','R','D')";
					logger.info(" Else of other  is this--------->>>"+sql);
				}
				else{
					sql="select ibreq_usrid,ibreq_accno,ibreq_noofleafs,ibreq_date,ibreq_type,ibreq_cardno," +
					"ibreq_name,ibreq_servprov,ibreq_mobile,ibreq_relno,ibreq_flag,ibreq_remark," +
					"ibreq_chno,ibreq_desc,ibreq_kid from s_ibreq where ibreq_type='"+sReq_type+"' and " +
					"ibreq_date between '"+sdate1+"' and '"+sdate2+"' and ibreq_flag ='"+crite+"'";
					logger.info("else part sql is  ----------)))))"+sql);
				}		
				result=sel_db.getData(15,sql);
				logger.info("first result"+result);

				if(result!=null)
				{
					logger.info("result.length"+result.length);
					for(int i=0;i<result.length;i++)
					{
						logger.info("In loop value of IIII"+i);
						logger.info("In loop value result[i][2]"+result[i][2]);

						req_acc.add(result[i][1]);
						chk_leafs.add(result[i][2]);
						req_date.add(result[i][3]);
						req_type.add(result[i][4]);
						req_cardNum.add(result[i][5]);
						ibreq_name.add(result[i][6]);

						req_servProv.add(result[i][7]);
						//	req_MobileNum.add(result[i][9]);
						//	req_Reln.add(result[i][10]);

						req_flag.add(result[i][10]);
						req_remarks.add(result[i][11]);
						req_Kid.add(result[i][14]);
						logger.info("req_kid"+result[i][12]);
						req_desc.add(result[i][13]);
						//	sql="select isnull(ibusr_usrid,0) from s_ibusr where ibusr_accno='"+result[i][1]+"'";
						//	logger.info("second SQL IS"+sql);
						//	result1=sel_db.getData(1,sql);
						//	logger.info("second Result IS"+result1);
						//	if(result1!=null)
						req_name.add(result[0][0]);
					}

					fix_reqDet.put("req_Dates",req_date);
					fix_reqDet.put("req_Names",req_name);
					fix_reqDet.put("req_AccNum",req_acc);
					fix_reqDet.put("req_type",req_type);
					fix_reqDet.put("req_Leafs",chk_leafs);
					fix_reqDet.put("req_cardNum",req_cardNum);

					fix_reqDet.put("req_frmName",ibreq_name);
					fix_reqDet.put("req_SerPr",req_servProv);
					fix_reqDet.put("req_MobNo",req_MobileNum);
					fix_reqDet.put("req_Rel",req_Reln);
					fix_reqDet.put("req_Kids",req_Kid);
					fix_reqDet.put("req_Flags",req_flag);
					fix_reqDet.put("req_Remarks",req_remarks);
					fix_reqDet.put("req_desc",req_desc);
				}

			}

		}// try ends
		catch(Exception e)
		{
			logger.info("Exception is"+e);
			e.printStackTrace();
		}
		finally
		{db.Finalize();}
		//	System.out.println("data is"+fix_reqDet);
		return fix_reqDet;

	}

	public void saveReqData(String sReq_type,String date1,String date2,String crite,String[] Status,String[] Remarks,ArrayList kids)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		logger.info("############## in saveReqData() method.................");
		DataBaseClass db=new DataBaseClass();
		logger.info("sReq_type"+sReq_type);
		logger.info("date1"+date1);
		logger.info("date1"+date1);
		logger.info("Status"+Status);
		logger.info("Remarks"+Remarks);
		logger.info("kids"+kids);



		try
		{
			db.doBeginTrans();
			if(sReq_type.equalsIgnoreCase("FORGOTPASSREQ")){ //newly added by Vijay
				logger.info("######### I m in Save Bean and whether FORGOTPASSREQ Called");
				for(int i=0;i<kids.size();i++)
				{
					sql="update s_ibforpass set forpass_flag='"+Status[i]+"',forpass_remarks='"+Remarks[i]+"' where forpass_kid="+kids.get(i) ;
					logger.info("Update of If"+sql);
					db.db_update(sql);
				}

			}
			else if( sReq_type.equalsIgnoreCase("FD")||sReq_type.equalsIgnoreCase("FFD")||sReq_type.equalsIgnoreCase("RD"))
			{
				logger.info("I m in Save Bean and whether FD,FFD, RD Called");
				for(int i=0;i<kids.size();i++)
				{
					sql="update s_ibreqdeposit set ibreq_flag='"+Status[i]+"',ibreq_remark='"+Remarks[i]+"' where ibreq_type='"+sReq_type+"' and  ibreq_kid="+kids.get(i) ;
					logger.info("Update of If"+sql);
					db.db_update(sql);
				}
			}
			else if(sReq_type.equalsIgnoreCase("DD"))
			{
				logger.info("I m in Save Bean DD Called");
				for(int i=0;i<kids.size();i++)
				{
					sql="update s_ibddreq set ddreq_flag='"+Status[i]+"',ddreq_remark='"+Remarks[i]+"' where ddreq_kid="+kids.get(i) ;
					logger.info("Update of dd If"+sql);
					db.db_update(sql);
				}

			}

			else
			{
				logger.info("I m in Save Bean and whether FD,FFD, RD Called");
				for(int i=0;i<kids.size();i++)
				{
					sql="update s_ibreq set ibreq_flag='"+Status[i]+"',ibreq_remark='"+Remarks[i]+"'where ibreq_type='"+sReq_type+"' and  ibreq_kid="+kids.get(i) ;
					logger.info("Update of Else "+sql);
					db.db_update(sql);
				}	

			}
			db.doCommit();

		}
		catch(Exception e)
		{
			db.doRollback();
			logger.info("Exception is"+e);
		}
		finally
		{

			db.Finalize();
		}
	}

//	------------------- For Branch Status --------------------//
	public String[][] brStatusInfo()throws RemoteException{
		BMLogger logger=new BMLogger(CentralBean.class);
		logger.info("In the brStatusInfo() in CentralBean"); 
		String [][]brnDtl = null;
		//	String[][] detailedBranchStatus = null;   
		DataBaseClass db=new DataBaseClass();
		logger.info("In the brStatusInfo() in CentralBean-----------"); 
		try{

			result = null;
			sql = "select brn_appserver,brn_brcode,brn_ename,brn_isconnected,brn_cdate,brn_day from s_brn";
			logger.info("sql query is : "+sql);
			SelectDataBeanRowCol sel_db=new SelectDataBeanRowCol(db);	
			brnDtl = sel_db.getData(6,sql);
			brnDtl[0][3] = "C";		// Hard coded for HO connectivity
			brnDtl[0][4].trim().substring(0,10);
			logger.info("cdatevalue = "+brnDtl[0][4].trim().substring(0,10));
		} catch(Exception e){
			e.printStackTrace();
		}
		finally{ 
			db.Finalize();
		}
		return brnDtl;
	}


	//by ashish varma






	public String[][] isBranchConnected(String brncode)throws RemoteException{
		BMLogger logger=new BMLogger(CentralBean.class);
		logger.info("In the brStatusInfo() in CentralBean"); 
		String [][]brnDtl = null;
		//	String[][] detailedBranchStatus = null;
		DataBaseClass db=new DataBaseClass();
		logger.info("In the brStatusInfo() in CentralBean-----------"); 
		try{

			result = null;
			sql = "select brn_isconnected from s_brn where brn_brcode ='"+brncode+"'";
			logger.info("sql query is : "+sql);
			SelectDataBeanRowCol sel_db=new SelectDataBeanRowCol(db);	
			brnDtl = sel_db.getData(1,sql);
		} catch(Exception e){
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return brnDtl;
	}

	public boolean executeTranPass (String login_id,String tran_pass)throws RemoteException
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBean bean = new SelectDataBean(db); 
		String []res=null;
		boolean flag=false;



		PasswordCrypt passcrpt=new PasswordCrypt();
		logger.info("_______BEFORE ENCRYPTION_______"+tran_pass);
		String ecrptpass=passcrpt.getPasswordCrypted(tran_pass);
		logger.info("_______AFTER ENCRYPTION_______"+ecrptpass);
		try
		{			

			String qry= " select distinct ibusr_trnpass "+
			" from s_ibusr where ibusr_usrid='"+login_id+"'";

			logger.info("___Check Password Query____"+qry);


			res=bean.getRow(1,qry);

			if(res!=null){
				logger.info("_____________"+res[0]);
			}

			if(res!=null && res[0].equals(ecrptpass)){


				flag = true;
			}


		}		
		catch(Exception e)
		{
			logger.info("Error in stopChequeRequest finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
		return flag;

	}
	//New Changes by Ajay on 09/08/2008
	public String[] getLastLoginTime(String sLogin_id, Date g_date)throws RemoteException {	
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String []logInfo=new String[2];
		String []fetchVal=new String[logInfo.length];

		try	{	
			String sql="SELECT atvt_kid FROM s_atvt WHERE atvt_sname='login'";
			logger.info(sql);
			String activityp[]=bean.getRow(1,sql);
			sql="select ibusr_kid from s_ibusr where ibusr_usrid='"+sLogin_id+"'";
			logger.info(sql);
			String usrid[]=bean.getRow(1,sql);
			sql="SELECT top 1 abbiblog_date FROM s_abbiblog" +
			" WHERE abbiblog_usrid=?" +
			" AND abbiblog_atvtid=? AND abbiblog_status='Y' ORDER BY abbiblog_date DESC";
			ArrayList<Object> inList = new ArrayList<Object>();
			inList.add(0,usrid[0]);
			inList.add(1,activityp[0]);
			logInfo=bean.getRow(1,sql,inList);
			logger.info("S_Iblog first by rrrrr "+sql);
			if(logInfo!=null&& fetchVal!=null)
				fetchVal[0]=logInfo[0];
			sql="SELECT COUNT(*) FROM s_abbiblog " +
			"WHERE abbiblog_atvtid =1 AND  abbiblog_usrid=? AND " +
			"abbiblog_date=? and "+
			"abbiblog_status='Y'";
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,sLogin_id);
			argList.add(1,g_date);			
			logInfo=bean.getRow(1,sql,argList);
			logger.info("How many time login Query"+sql);
			if(logInfo!=null&& fetchVal!=null)
				fetchVal[1]=logInfo[0];
		}
		catch(Exception e){	
			logger.info("error in get lastlogin time ");
			e.printStackTrace();
		}
		finally	{
			db.Finalize();
		}
		return fetchVal; 
	}

//	*****FUNCTION USED TO FETCH THE DATA FOR USER 
	//*****AFTER CONSIDERING THE MULTIPLE BRANCHES OPTION
	//******programmer Vinay Singh Tomar**************//
	public String[][] fetchFundTxInfoFromHO(String usrid)
	throws RemoteException
	{ 
		BMLogger logger =new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String [][]data =null;
		String [][]datatoSend =null;
		String  lsSql="";
		ArrayList<Object> inList = new ArrayList<Object>(1);
		try{

			lsSql= " select ibusr_accNo,ibusr_curKid,ibusr_curCode,ibusr_actSName," +
			" brn_appserver,ibusr_brncode,brn_isconnected "+ 
			" from s_ibusr,s_brn "+
			" where  ibusr_brncode =  brn_brcode	and "+
			" ibusr_usrId = ? "; 

			inList.add(usrid);
			data=bean.getData(7,lsSql,inList);

			if(data!=null){

				datatoSend=new String [data.length][8];
				for(int i=0;i<data.length;i++){
					datatoSend[i][0]=data[i][0];
					datatoSend[i][1]=data[i][1];
					datatoSend[i][2]=data[i][2];
					datatoSend[i][3]=data[i][3];
					datatoSend[i][4]=data[i][0]+"splitHere"+data[i][4]+"splitHere"+data[i][5];
					//acc_no,appserver,brcode
					//-----datatoSend[i][4] used to set the value of combo--------------
					datatoSend[i][5]=data[i][5];
					//---------
					if(data!=null && data[i][6].equalsIgnoreCase("D"))
						datatoSend[i][6]="D";
					else if(data!=null && data[i][6].equalsIgnoreCase("C"))
						datatoSend[i][6]="C";
					//----datatoSend[i][7] used to display data on combo------	
					datatoSend[i][7]=data[i][0]+" "+data[i][2]+" "+data[i][3]+" "+data[i][5]+" "+datatoSend[i][6];

					logger.info("___datatoSend[i][0]_____"+datatoSend[i][0]);
					logger.info("___datatoSend[i][1]_____"+datatoSend[i][1]);
					logger.info("___datatoSend[i][2]_____"+datatoSend[i][2]);
					logger.info("___datatoSend[i][3]_____"+datatoSend[i][3]);
					logger.info("___datatoSend[i][4]_____"+datatoSend[i][4]);
					logger.info("___datatoSend[i][5]_____"+datatoSend[i][5]);
					//------
					logger.info("___datatoSend[i][6]_____"+datatoSend[i][6]);
					//--to set on combo(page)
					logger.info("___datatoSend[i][7]_____"+datatoSend[i][7]);

				}

			}

		}
		catch(Exception e)
		{
			logger.fatal("___ERROR IN fetchFundTxInfoFromHO_________"+e);
			e.printStackTrace();
		}

		finally
		{
			db.Finalize();
		}

		return datatoSend;
	}//_______FUNCTION ENDS HERE________
	/////////////////////////////////////////////////////////////////////////
	//	added by naveen
	public String[][] getUsrInfo(String loginid)throws RemoteException{
		BMLogger logger=new BMLogger(CentralBean.class);
		String [][]userInfo = null;
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol beanRowCol = new SelectDataBeanRowCol(db);
		try{
			sql = " select ibusr_accno,ibusr_brncode,brn_isconnected,brn_appserver,ibusr_curkid,ibusr_curcode,brn_port," +
			"        ibusr_usrEname,ibusr_brlinkedno" +
			" from s_ibusr,s_brn where ibusr_brncode = brn_brcode and ibusr_usrid ='"+loginid+"'";
			userInfo = beanRowCol.getData(9,sql);
			logger.info("getUsrInfo SQL is : "+sql);
		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			db.Finalize();
		}
		return userInfo;
	}

	public String[] brcodeToAppserver(String brcode)throws RemoteException { //written by naveen

		String[] appserver = new String[2] ;
		appserver[0] = BMConfig.getProperty("CBSSERVER", "127.0.0.1");
		appserver[1] = "Y"  ; 
		return appserver ; 
		/*
		BMLogger logger = new BMLogger(CentralBean.class);
		logger.info("In the brcodeToAppserver method =--------->>>>>>");
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol sel_db = new SelectDataBeanRowCol(db);
		String[] appserver = null;
		try	{
			sql = "select nullif(brn_appserver,''),nullif(brn_isconnected,''),brn_port from s_brn "+
			" where brn_brcode='"+brcode+ "'";

			logger.info("Brn : "+sql);
			appserver = sel_db.getRow(3,sql);
			if(appserver!=null){
				appserver[0]= appserver[0]+":"+appserver[2];
				appserver[1]= appserver[1];
			}
		}
		catch(Exception e){
			logger.info("CentralBean Excption"+e);
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}

		return appserver;
		*/
	}


	//added by naveen 26-12-06
	public void createMailBox(String mailid,String serverName){
		BMLogger logger = new BMLogger(CentralBean.class);
		//	String mailId="testingId";
		logger.info("In the createMailBox() method on CentralBean class : "+mailid+" : "+serverName);
		MailFunctions mailFunctions = new MailFunctions();
		try{
			logger.info("Before calling createMailBoxFunction");
			mailFunctions.createMailBoxFunction(mailid,serverName);
			logger.info("After calling createMailBoxFunction");
		}catch (Exception e) {
			e.printStackTrace();
		}
	}

	//added by tomar 
	public String[][] giveConnectedBranchesInfo()throws RemoteException {

		BMLogger logger=new BMLogger(CentralBean.class);
		logger.info("_______giveConnectedBranchesInfo_________");
		logger.info("_______giveConnectedBranchesInfo_________");
		logger.info("__________In the brStatusInfo()_______");

		String [][]sBrnData = null;
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		String lsSql="";
		try	{

			lsSql= " select brn_appserver,brn_brcode,brn_ename,brn_isconnected,brn_port "+ 
			" from s_brn "+
			" where brn_isconnected='C' AND brn_appserver <>'NULL' ";
			sBrnData = bean.getData(5,lsSql);

		} 
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return sBrnData;
	}
//	added By Jagan
	public boolean checkAvailableUsrId(String usrid)
	{
		boolean availableuserid=false;
		BMLogger logger = new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		String[] userid = null;
		try	{
			sql = "select ibusr_usrid from s_ibusr where ibusr_usrid='"
				+usrid.trim()+ "'";
			logger.info("user id check : "+sql);
			userid = bean.getRow(1,sql);
			if(userid==null)
			{
				availableuserid=true;
			}
			else
			{
				availableuserid=false;
			}
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();	
		}

		return availableuserid;
	}
//	added By Jagan
	public String usrIdChange(String oldusrid,String newusrid,String usrpass)
	{
		BMLogger logger = new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		String[] userid = null;
		PasswordCrypt passcrpt=new PasswordCrypt();
		String encrpt=passcrpt.getPasswordCrypted(usrpass);
		logger.info("usrpass befor encryption "+usrpass);
		logger.info("usrpass after encryption "+encrpt);

		try	{
			db.doBeginTrans();
			sql = "select ibusr_usrid from s_ibusr where ibusr_usrid='"
				+oldusrid.trim()+ "'and ibusr_usrpass='"+encrpt+"'";

			logger.info("user id check : "+sql);
			userid = bean.getRow(1,sql);
			if(userid==null)
			{
				userid=new String[1];
				userid[0]="invalidusr"; 
			}
			else
			{
				sql="update s_ibusr set ibusr_usrid='"+newusrid+"' where ibusr_usrid='"+oldusrid+"' and ibusr_usrpass='"+encrpt+"'";
				logger.info(sql);
				db.db_update(sql);
				db.doCommit();
				return newusrid;
			}
		}catch(Exception e)
		{
			db.doRollback();
			userid=new String[1];
			userid[0]="error";
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();	
		}
		return userid[0];
	}

	public ActivationDto getBranchInfo(String brncode)
	{
		ActivationDto actdto=new ActivationDto();
		BMLogger logger = new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		String[] data = null;
		try{
			String sql="select brn_brcode from s_brn where brn_brcode='"+brncode+"'";
			logger.info(sql);
			data=bean.getRow(1,sql);
			if(data!=null)
			{
				sql="select brn_ename,brn_eaddr,brn_appserver,brn_port from s_brn where brn_brcode='"+brncode+"'";
				logger.info(sql);
				data=bean.getRow(4,sql);
				if(data!=null)
				{
					actdto.setBrnname(data[0]);
					actdto.setBrnadd(data[1]);
					actdto.setBrnip(data[2]);
					actdto.setBrnport(data[3]);

				}
			}
			else
			{
				data=new String[1];
				data[0]="invalidbrncode";
				actdto.setBrnname(data[0]);
			}

		}catch(Exception e){e.printStackTrace();}
		finally
		{
			db.Finalize();
		}

		return actdto;
	}
	public String saveBranchInfo(ActivationDto actdto)
	{
		BMLogger logger = new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		String brncode=actdto.getBrncode();
		String brnname=actdto.getBrnname();
		String brnadd=actdto.getBrnadd();
		String brnip=actdto.getBrnip();
		String brnport=actdto.getBrnport();
		String addedit=actdto.getAddedit();
		String status="";
		String sql="";
		String data[]=null;
		try{
			db.doBeginTrans();
			if(addedit.equalsIgnoreCase("edit"))
			{

				sql="UPDATE s_brn SET brn_ename='"+brnname+"',brn_eaddr='"+brnadd+"',brn_appserver='"+brnip+"',brn_port='"+brnport+"' where brn_brcode='"+brncode+"'";
				logger.info("query is  "+sql);
				db.db_update(sql);
			}
			else if(addedit.equalsIgnoreCase("add"))
			{
				sql="select brn_brcode from s_brn where brn_brcode='"+brncode+"'";
				data=bean.getRow(1,sql);
				if(data==null){
					sql="INSERT INTO s_brn(brn_brcode,brn_ename,brn_eaddr,brn_appserver,brn_port,brn_isconnected)" + //New changes on 03/07/2008
					" VALUES('"+brncode+"','"+brnname+"','"+brnadd+"','"+brnip+"','"+brnport+"','C')";
					logger.info(sql);
					db.db_Insert(sql);
				}else
				{
					status="alreadyExist";

				}
			}
			db.doCommit();
		}
		catch(Exception e)
		{
			e.printStackTrace();
			db.doRollback();
		}
		finally
		{
			db.Finalize();
		}

		return status;
	}


	public String insertValuesInAbbLog(ABBTransferDTO dto,
			String entryFlag,
			String respFlag)
	{
		BMLogger logger = new BMLogger(CentralBean.class);
		logger.info("+++insertValuesInAbbLog++++");
		String sRetValue="";
		String lsSql="";
		ArrayList<Object>inList = new ArrayList<Object>();  
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		logger.info("+++++++++"+dto.getsDate().trim());

		//String sDate = DateTimeFunction.sqlDateStrToStr(dto.getsDate()+":00:00:00");

		String sDate = DateTimeFunction.sqlDateStrToStr(dto.getsDate()+" 00:00:00");

		/*
		 * THIS FORMAT WAS CHANGED AS FUNCTION sqlDateStrToStr i/p PARAMETER WAS
		 * CHANGED FROM yyyy-mm-dd:00:00:00 TO  yyyy-mm-dd 00:00:00
		 */

		logger.info("+++++TR-Date++++"+sDate);
		logger.info("+++++DOC-DATE++++"+dto.getsABBDocDate());
		java.sql.Date sqlDate = new java.sql.Date(0); 
		sqlDate = DateTimeFunction.strToSqlDate(sDate.trim());
		logger.info("+++sqlDate++++++"+sqlDate);
		logger.info("++respFlag++++"+respFlag);
		logger.info("+++DocDate+++"+DateTimeFunction.strToSqlDate(dto.getsABBDocDate().trim()));

		lsSql=  " insert into abb_log ( "+ 
		" msgCode,procCode,srBranch,trBranch ,"+ 
		" accNo,Amount,trnType,trnDate,"+
		" docType,docSeries,docNo, "+ 
		" respCode,respFlag, "+
		" abb_enarr,toAccNo,trnDrCr)"+
		" values ( ?,?,?,?, "+
		" ?,?,?,'"+sDate.trim()+"' , "+
		" ?,?,?,?, "+
		" ?,?,?,? ) ";	

		//"+dto.getsABBDocDate().trim()+"

		inList.add(entryFlag);//HOLOG1,2,3,4,5,6
		inList.add("01");//01 for Debit entry
		inList.add(dto.getsFromBranch());
		inList.add(dto.getsToBranch());

		inList.add(dto.getsAcnoFrom());
		inList.add(dto.getsAmount2());
		inList.add(dto.getsTrnType());
		//inList.add(sqlDate);

		inList.add(dto.getsABBDocType());
		inList.add(dto.getsABBDocSeries());//docSeries
		inList.add(dto.getsABBDocNo());


		//inList.add(DateTimeFunction.strToSqlDate(dto.getsABBDocDate().trim()));


		inList.add("00");
		inList.add(respFlag);
		inList.add(dto.getsNarration());
		inList.add(dto.getsAcnoTo());
		inList.add(dto.getsDrCr());

		try{
			sRetValue =db.db_Insert(lsSql,inList);
		}
		catch(Exception e){
			logger.fatal("_________"+e);
			sRetValue="-1";
		}



		/*String sql="Select max(txnNo) from abb_log";
		String[] value=null;
		try{
			value =bean.getRow(1,sql);
			sRetValue=value[0].trim();
		}
		catch(Exception e){
			logger.fatal("_________"+e);
			sRetValue="-1";
		}*/


		finally{
			db.Finalize();
		}

		return sRetValue;
	}

	public String insertValuesInIBLog(InternetFundTransferDTO dto,
			String entryFlag,
			String respFlag)
	{
		BMLogger logger = new BMLogger(CentralBean.class);
		logger.info("+++insertValuesInAbbLog++++");
		String sRetValue="";
		String lsSql="";
		ArrayList<Object>inList = new ArrayList<Object>();  
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		//	logger.info("+++++++++"+dto.getsDate().trim());

		//String sDate = DateTimeFunction.sqlDateStrToStr(dto.getsDate()+":00:00:00");

		//	String sDate = DateTimeFunction.sqlDateStrToStr(dto.getsDate()+" 00:00:00");
		String sDate=DateTimeFunction.getIbDateTime();
		/*
		 * THIS FORMAT WAS CHANGED AS FUNCTION sqlDateStrToStr i/p PARAMETER WAS
		 * CHANGED FROM yyyy-mm-dd:00:00:00 TO  yyyy-mm-dd 00:00:00
		 */

		logger.info("+++++TR-Date++++"+sDate);
		//	logger.info("+++++DOC-DATE++++"+dto.getsABBDocDate());
		//	java.sql.Date sqlDate = new java.sql.Date(0); 
		//	sqlDate = DateTimeFunction.strToSqlDate(sDate.trim());
		//	logger.info("+++sqlDate++++++"+sqlDate);
		logger.info("++respFlag++++"+respFlag);
		logger.info("+++DocDate+++"+DateTimeFunction.strToSqlDate(dto.getsABBDocDate().trim()));

		lsSql=  " insert into s_trdlog ( "+ 
		" msgCode,procCode,srBranch,trBranch ,"+ 
		" fraccNo,Amount,trnType,trnDate,"+
		" docType,docSeries,docNo, "+ 
		" respCode,respFlag, "+
		" edesc,toAccNo)"+
		" values ( ?,?,?,?, "+
		" ?,?,?,?, "+
		" ?,?,?,?, "+
		" ?,?,? ) ";	

		//"+dto.getsABBDocDate().trim()+"

		inList.add(entryFlag);//HOLOG1,2,3,4,5,6
		inList.add("01");//01 for Debit entry
		inList.add(dto.getsABBFromBranchCode());
		inList.add(dto.getsABBToBranchCode());

		inList.add(dto.getsAccNoFrom());
		inList.add(dto.getdAmount());
		inList.add("IB");
		inList.add(sDate.trim());
		inList.add(dto.getsABBDocType());
		inList.add(dto.getsABBDocSeries());//docSeries
		inList.add(dto.getsABBDocNo());
		//inList.add(DateTimeFunction.strToSqlDate(dto.getsABBDocDate().trim()));
		inList.add("00");
		inList.add(respFlag);
		inList.add(dto.getIsEnglishDescription());
		inList.add(dto.getsAccNoTo());

		try{
			sRetValue =db.db_Insert(lsSql,inList);
		}
		catch(Exception e){
			logger.fatal("_________"+e);
			sRetValue="-1";
		}
		/*String sql="Select max(txnNo) from abb_log";
		String[] value=null;
		try{
			value =bean.getRow(1,sql);
			sRetValue=value[0].trim();
		}
		catch(Exception e){
			logger.fatal("_________"+e);
			sRetValue="-1";
		}*/


		finally{
			db.Finalize();
		}

		return sRetValue;
	}



	public String updateValuesInAbbLog(ABBTransferDTO dto,
			String entryFlag,
			String respFlag,
			String respCode,String uniqueTxnNo)
	{
		BMLogger logger = new BMLogger(CentralBean.class);
		logger.info("+++insertValuesInAbbLog++++");
		String sRetValue="";
		String lsSql="1";
		ArrayList<Object>inList = new ArrayList<Object>();  
		DataBaseClass db = new DataBaseClass(); 


		lsSql=  " update abb_log set msgCode = ? ,respCode = ? ,respFlag = ? " +
		" where txnNo = ? ";


		inList.add(entryFlag);
		inList.add(respCode);
		inList.add(respFlag);
		inList.add(uniqueTxnNo);

		try{
			db.db_update(lsSql,inList);
		}
		catch(Exception e){
			logger.fatal("_________"+e);
			sRetValue="-1";
		}
		finally{
			db.Finalize();
		}

		return sRetValue;
	}
	public String updateValuesInIBLog(InternetFundTransferDTO dto,
			String entryFlag,
			String respFlag,
			String respCode,String uniqueTxnNo)
	{
		BMLogger logger = new BMLogger(CentralBean.class);
		logger.info("+++insertValuesInAbbLog++++");
		String sRetValue="";
		String lsSql="1";
		ArrayList<Object>inList = new ArrayList<Object>();  
		DataBaseClass db = new DataBaseClass(); 


		lsSql=  " update s_trdlog set msgCode = ? ,respCode = ? ,respFlag = ? " +
		" where txnNo = ? ";


		inList.add(entryFlag);
		inList.add(respCode);
		inList.add(respFlag);
		inList.add(uniqueTxnNo);

		try{
			db.db_update(lsSql,inList);
		}
		catch(Exception e){
			logger.fatal("_________"+e);
			sRetValue="-1";
		}
		finally{
			db.Finalize();
		}

		return sRetValue;
	}
//	--------Method By Nirmal Kumar Sharma----------//
	public String[][] abbTop10TransRept() throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db1= new SelectDataBeanRowCol(db);
		String[][] data=null;
		try{
			//--------Query Changed By Nirmal Kumar Sharma----------//
			String sql=" SELECT  top 10 srBranch, trBranch, accNo,toAccNo, "+
			" Amount,trnType,logmsg_msg "+ 
			" FROM     abb_log,abb_logmsg "+
			" WHERE (logmsg_code+logmsg_respflag+logmsg_DrCr) = (msgcode+respflag+trnDrCr) AND " +
			" (trnType = 'TR' or logmsg_DrCr like trnDrCr) " +
			" order by txnno desc"; 
			logger.info("SQL IS "+sql);

			data=sel_db1.getData(7,sql);

		}catch(Exception e)
		{logger.info("Exception in ABB"+e);
		e.printStackTrace();		
		}
		finally
		{
			db.Finalize();
		}	
		return data;	
	}
	public String[][] abbTransFailRept(String fromDate,String toDate,String loginBrnCode) throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db1= new SelectDataBeanRowCol(db);
		String[][] data=null;
		logger.info("--------IN Central-Bean------------"+fromDate);
		logger.info("--------IN Central-Bean-------------"+toDate);
		try{
			/*String sql=" SELECT  sourceBranch, "+   
					   " targetBranch, "+   
					   " actNo, "+ 
					   " amt,transhead,	opreq,retcode, "+
					   " (Select brn_ename From s_brn Where brn_brcode  = targetbranch) brhEname, "+ 
					   " transstatus "+
					   " FROM     abb_trd "+   
					   " WHERE    curdate = '"+brnDate+"' "+
					   " AND      transstatus  not in ('TRA','UPLOAD') "+ 
					   " ORDER BY targetbranch ";
			 */
			//--------Query Changed By Nirmal Kumar Sharma----------//
			String sql=" SELECT  trnDate,txnNo,srBranch, trBranch, accNo,toAccNo, "+
			" Amount,trnType,logmsg_msg "+ 
			" FROM     abb_log,abb_logmsg "+
			" WHERE   cast(SUBSTRING(trndate,7,10)+ '-' +SUBSTRING(trndate,4,2)+ '-' + SUBSTRING(trndate,0,3) as datetime) between "+
			" cast(SUBSTRING('"+fromDate+"',7,10)+ '-' +SUBSTRING('"+fromDate+"',4,2)+ '-' + SUBSTRING('"+fromDate+"',0,3) as datetime) and " +
			" cast(SUBSTRING('"+toDate+"',7,10)+ '-' +SUBSTRING('"+toDate+"',4,2)+ '-' + SUBSTRING('"+toDate+"',0,3) as datetime)" + 
			" AND      respFlag  not in('TRAT') AND " +
			" (logmsg_code+logmsg_respflag+logmsg_DrCr) = (msgcode+respflag+trnDrCr) AND " +
			" (trnType = 'TR' or logmsg_DrCr like trnDrCr) And ((srBranch = '" + loginBrnCode.trim() +
			"' or trBranch = '" + loginBrnCode.trim() +"')"+
			" OR '"+ loginBrnCode.trim() +"' = 'HO' ) order by txnno"; 
			logger.info("SQL IS :"+sql);

			data=sel_db1.getData(9,sql);

		}catch(Exception e)
		{logger.info("Exception in ABB"+e);
		e.printStackTrace();		
		}
		finally
		{
			db.Finalize();
		}	
		return data;	
	}
	public String[][] abbTransSucessRept(String fromDate,String toDate,String loginBrnCode) throws RemoteException
	{		
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db1= new SelectDataBeanRowCol(db);
		String[][] data=null;


		try{
			/*String sql=" SELECT sourceBranch,targetBranch, "+   
					   " actNo,	amt, transhead, "+   
					   " opreq,	retcode, "+
					   " (Select brn_ename From s_brn Where brn_brcode  = targetbranch) brhEname, "+ 
					   " transstatus "+
					   " FROM     abb_trd "+   
					   " WHERE    curdate = '"+brnDate+"' "+
					   " AND      transstatus  in ('TRA', 'TRAS') "+ 
					   " ORDER BY targetbranch, actno , opreq desc ";

			 */
			String sql=" SELECT  trnDate,txnNo,srBranch, trBranch, accNo,toAccNo, "+ 
			" Amount,trnType,logmsg_msg  FROM     abb_log,abb_logmsg "+
			" WHERE   cast(SUBSTRING(trndate,7,10)+ '-' +SUBSTRING(trndate,4,2)+ '-' + SUBSTRING(trndate,0,3) as datetime) between "+
			"cast(SUBSTRING('"+fromDate+"',7,10)+ '-' +SUBSTRING('"+fromDate+"',4,2)+ '-' + SUBSTRING('"+fromDate+"',0,3) as datetime) and " +
			"cast(SUBSTRING('"+toDate+"',7,10)+ '-' +SUBSTRING('"+toDate+"',4,2)+ '-' + SUBSTRING('"+toDate+"',0,3) as datetime)" + 
			" AND      respFlag   in('TRAT') AND " +
			" (logmsg_code+logmsg_respflag+logmsg_DrCr) = (msgcode+respflag+trnDrCr) AND " +
			" (trnType = 'TR' or logmsg_DrCr like trnDrCr)And ((srBranch = '" + loginBrnCode.trim() +
			"' or trBranch = '" + loginBrnCode.trim() +"')"+
			" OR '"+ loginBrnCode.trim() +"' = 'HO' ) order by txnno"; 

			logger.info("SQL QUERY IS     "+sql);	
			data=sel_db1.getData(9,sql);

		}catch(Exception e){ 
			logger.info("Exception in ABB"+e);
			e.printStackTrace();	
		}

		finally
		{
			db.Finalize();
		}	
		return data;	
	}

	public String[][] abbBrDeCrBal(String fromDate,String toDate,String loginBrnCode) throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db1= new SelectDataBeanRowCol(db);
		String[][] data=null;
		logger.info("---------In the abbBrDeBal------------------");
		try
		{
			/*	String sql=" select sourceBranch,targetBranch,sum(convert(decimal(12,2),amt))as Amount,opreq from abb_trd "+ 
				   " WHERE    abb_trd.curdate = '"+brnDate+"' "+
				   " AND      abb_trd.transstatus  in ('TRA') "+
				   " group by targetBranch,sourceBranch,opreq "+
				   " order by targetBranch , sourceBranch ";
			 */
			String sql= " select srBranch,trBranch,sum(convert(decimal(12,2),Amount))as Amount " +
			" from abb_log,abb_logmsg WHERE   cast(SUBSTRING(trndate,7,10)+ '-' +SUBSTRING(trndate,4,2)+ '-' + SUBSTRING(trndate,0,3) as datetime) between "+
			"cast(SUBSTRING('"+fromDate+"',7,10)+ '-' +SUBSTRING('"+fromDate+"',4,2)+ '-' + SUBSTRING('"+fromDate+"',0,3) as datetime) and " +
			"cast(SUBSTRING('"+toDate+"',7,10)+ '-' +SUBSTRING('"+toDate+"',4,2)+ '-' + SUBSTRING('"+toDate+"',0,3) as datetime)" + 
			" AND      respFlag  in('TRAT') AND " +
			" (logmsg_code+logmsg_respflag+logmsg_DrCr) = (msgcode+respflag+trnDrCr) AND " +
			" (trnType = 'TR' or logmsg_DrCr like trnDrCr) And ((srBranch = '" + loginBrnCode.trim() +
			"' or trBranch = '" + loginBrnCode.trim() +"')"+
			" OR '"+ loginBrnCode.trim() +"' = 'HO' )"+
			" group by trBranch,srBranch "+
			" order by trBranch,srBranch "; 

			data=sel_db1.getData(3,sql);
			logger.info("QUERY IS     "+sql);
		}catch(Exception e)
		{logger.info("Exception in ABB"+e);
		e.printStackTrace();			
		}
		finally
		{
			db.Finalize();
		}	
		return data;		
	}
	public String[][] showMessage()
	{
		BMLogger logger = new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		String data[][]=null;
		try{
			String sql="Select * from s_abbibmsg order by msg_code";
			logger.info(sql);
			data=bean.getData(3,sql);
		}catch(Exception e)
		{e.printStackTrace();}
		finally
		{
			db.Finalize();
		}
		return data;
	}
	public String addMessage(String sname,String desc)
	{
		BMLogger logger = new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		String data[]=null;
		String res="";
		try{
			db.doBeginTrans();
			String sql="Select msg_sname from s_abbibmsg where msg_sname='"+sname+"'";
			logger.info(sql);
			data=bean.getRow(1,sql);
			if(data==null)
			{
				sql="INSERT INTO s_abbibmsg(msg_sname,msg_desc) VALUES('"+sname+"','"+desc+"')";
				logger.info(sql);
				db.db_Insert(sql);
				db.doCommit();
			}else
			{
				//data=new String[1];
				res="errorExist";
			}
		}catch(Exception e)
		{
			e.printStackTrace();
			db.doRollback();
		}
		finally
		{
			db.Finalize();
		}
		return res;
	}
	public String rejectPassword(String userid)
	{

		BMLogger logger = new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		String sql="",result="";
		String data[]=null;
		sql="select ibusr_usrid from s_ibusr where ibusr_usrid='"+userid+"'";
		logger.info(sql);

		try{
			db.doBeginTrans();
			data=bean.getRow(1,sql);
			if(data!=null)
			{
				sql="update s_ibusr set ibusr_ispassprinted='N' where ibusr_usrid='"+userid+"'";
				logger.info(sql);
				db.db_update(sql);
				db.doCommit();
				result="success";
			}
			else
			{
				result="invaliduserid";
				logger.info("invalid user ");
			}
		}
		catch(Exception e){
			db.doRollback();
			e.printStackTrace();
		}
		finally{db.Finalize();}
		return result;
	}
	public void rePrintPassword(String userid,String pass)
	{
		BMLogger logger = new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		PasswordCrypt passcrpt=new PasswordCrypt();
		String encrpass=passcrpt.getPasswordCrypted(pass);
		String sql="update s_ibusr set ibusr_ispassprinted='Y',ibusr_usrpass='"+encrpass+"',ibusr_trnpass='"+encrpass+"',ibusr_flag='N' where ibusr_usrid='"+userid.trim()+"'";
		logger.info("sql "+sql);
		try{
			db.doBeginTrans();
			db.db_update(sql);
			db.doCommit();
		}catch(Exception e)
		{
			db.doRollback();
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}
	}

	public boolean saveAddrChangeRequest(String usrid,String accNo,String address,String phoneNo,String mobileNo)

	{
		boolean isSaved=false;
		BMLogger logger = new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		try{
			String descStr="address="+address.trim()+";phone="+phoneNo.trim()+";mobile="+mobileNo.trim()+"";
			logger.info("string is --"+descStr);
			String date=DateTimeFunction.getIbDateTime();
			db.doBeginTrans();
			String sql="Insert into s_ibreq(ibreq_usrid,ibreq_accno,ibreq_desc,ibreq_date,ibreq_type,ibreq_flag)" +
			" values('"+usrid+"','"+accNo+"','"+descStr+"','"+date+"','ADDRESS','Y')";
			logger.info("sql query is -"+sql);
			db.db_Insert(sql);
			db.doCommit();
			isSaved=true;
		}catch(Exception e)
		{
			e.printStackTrace();
			db.doRollback();
		}
		finally{
			db.Finalize();
		}
		return isSaved;
	}
	public FdRequestDto saveFdRequest(FdRequestDto dto)
	{
		boolean b=false;
		DataBaseClass db = new DataBaseClass();
		BMLogger logger =new BMLogger(CentralBean.class);
		String userid=(String)dto.getUserid();
		String accNo=dto.getAccList();
		String date=DateTimeFunction.getIbDateTime();
		String fdScheme=dto.getFdscheme();
		double amt=dto.getSAmt();
		int month=dto.getSMonth();
		int day=dto.getSDay();
		String maturInst=dto.getMaturInst();
		String instPayable=dto.getInstPayable();
		String instAcc=dto.getInstAcc();
		String descStr="FDSCHEME="+fdScheme+";AMOUNT="+amt+";MONTH="+month+";DAY="+day+";MATURIRY="+maturInst+";INTERSTPAY="+instPayable+";INTRESTACC="+instAcc+";";
		String sql="INSERT INTO s_ibreq(ibreq_usrid,ibreq_accno,ibreq_date,ibreq_type," +
		"ibreq_flag,ibreq_desc)" +
		" VALUES(?,?,?,?,?,?)";

		ArrayList<Object> arrData=new ArrayList<Object>();
		arrData.add(userid);
		arrData.add(accNo);
		arrData.add(date);
		arrData.add("FDREQ");
		arrData.add("Y");
		arrData.add(descStr);
		try{
			db.doBeginTrans();
			db.db_Insert(sql,arrData);
			db.doCommit();
		}catch(Exception e){
			e.printStackTrace();
			db.doRollback();
		}finally{
			db.Finalize();
		}

		logger.info("sql query is -"+sql);
		return dto;
	}

//	------------- added by Ashish Varma ---------------------

	public String updatingbrn(String zo,String ro,String br)throws RemoteException
	{

		BMLogger logger = new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);

		String status = "";
		String data[]=null;
		try
		{
			logger.info("zoid = "+zo);
			logger.info("zocode"+ro);
			logger.info("zotext"+br);

			sql="update s_brn set brn_zonid='"+zo+"',brn_rgnid='"+ro+"' where brn_brcode='"+br+"'";
			logger.info(sql);
			db.db_update(sql);
			status="Saved Sucessfuly";
		}	
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		/*try{
					sql ="select zon_kid,zon_code,zon_ename from abb_zon"; 
					status = bean.getData(3,sql);
					logger.info("getUsrInfo SQL is : "+sql);
				}catch(Exception e){
					e.printStackTrace();
				}
				finally {
					db.Finalize();
				}
		 */
		return status;
	}

	// -------------added by Ashish varma 25may07----------------------

	public String addingroidname (String roid,String srocode,String srotext,String zocodeselect)throws RemoteException
	{
		BMLogger logger = new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);

		String status = "";
		String data[]=null;
		try
		{
			logger.info("zoid = "+roid);
			logger.info("zocode"+srocode);  
			logger.info("zotext"+srotext);

			//sql="select rgn_code from abb_rgn where rgn_code='"+srocode+"'";
			sql="select rgn_code from s_rgn where rgn_code='"+srocode+"'";
			logger.info("query of select ="+sql);
			data=bean.getRow(1,sql); 
			logger.info("value for data = "+data);
			if(data==null)
			{
				//sql="insert into abb_rgn(rgn_kid,rgn_code,rgn_ename,rgn_zonid) values('"+roid+"','"+srocode+"','"+srotext+"','"+zocodeselect+"')";
				sql="insert into s_rgn(rgn_kid,rgn_code,rgn_ename,rgn_zonid) values('"+roid+"','"+srocode+"','"+srotext+"','"+zocodeselect+"')";
				logger.info(sql);
				db.db_Insert(sql);
				status="Saved Sucessfuly";
			}
			else
			{

				status="Record Already Exist";
				logger.info("in Central Bean status= "+status);
			}							
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		/*try{
					sql ="select zon_kid,zon_code,zon_ename from abb_zon"; 
					status = bean.getData(3,sql);
					logger.info("getUsrInfo SQL is : "+sql);
				}catch(Exception e){
					e.printStackTrace();
				}
				finally {
					db.Finalize();
				}
		 */
		return status;
	}
	public HashMap<Object, Object> DayWiseUserReport(StatusLogReportDto adminDto,ErrorVar errArg)// added by Jagan 23-12-06
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		HashMap<Object, Object> retMap = new HashMap<Object, Object>();
		String[][] actvtlist=null;
		String[][] userAdmin=null;
		Calendar cal = Calendar.getInstance();
		java.util.Date utilDate = cal.getTime();
		long lTime = utilDate.getTime();
		java.sql.Date sqlDate = new java.sql.Date(lTime);
		Time time = new Time(lTime);
		String strTime = sqlDate + " " + time;
		String sSQL="";
		String state="";
		String status="";
		status=adminDto.getUserStatus();
		if(status.equalsIgnoreCase("activated"))
			state="'A'";
		if(status.equalsIgnoreCase("deactivated"))
			state="'D'";
		if(status.equalsIgnoreCase("created"))
			state="'C'";
		if(status.equalsIgnoreCase("locked"))
			state="'L'";
		if(status.equalsIgnoreCase("All"))
			state="'L','D','A','C'";
		java.util.Date fromdate=DateTimeFunction.strToUtilDate(adminDto.getTodate());
		java.util.Date newdate=DateTimeFunction.relativeDate(fromdate,-1);
		java.util.Date newdate1=DateTimeFunction.relativeDate(fromdate,1);
		logger.info("newdate------"+newdate);
		logger.info("newdate1------"+newdate1);
		logger.info("newdate1------"+state);
		String userId=adminDto.getUserid();
		try{
			logger.info("DayWiseUserReport in central bean   ="+status+"---state--="+state);
			if(userId.equalsIgnoreCase("")){
				sSQL="select log_usrid,log_accno,log_date,case " +
				" when log_status='A' then 'Activate'" +
				" when log_status='D' then 'Deactivate' " +
				" when log_status='L' then 'Locked'" +
				" when log_status='C' then 'Created'" +
				" else 'Existing' end  from s_ibusrstatuslog where log_brncode='"+adminDto.getSrbranch()+"' " +
				" and log_date between'"+DateTimeFunction.utilDateToSqlDate(newdate)+"'" +
				" and '"+DateTimeFunction.utilDateToSqlDate(newdate1)+"'" +
				" and log_status in ("+state+")";
			}
			else{
				sSQL=   " select log_usrid,log_accno,log_date,case " +
				" when log_status='A' then 'Activate'" +
				" when log_status='D' then 'Deactivate' " +
				" when log_status='L' then 'Locked'" +
				" when log_status='C' then 'Created'" +
				" else 'Existing' end  from s_ibusrstatuslog where log_brncode='"+adminDto.getSrbranch()+"' " +
				" and log_date between'"+DateTimeFunction.utilDateToSqlDate(newdate)+"'" +
				" and '"+DateTimeFunction.utilDateToSqlDate(newdate1)+"'" +
				" and log_status in ("+state+") and log_usrid='"+userId+"'"; 
			}
			userAdmin=bean.getData(4,sSQL);
			logger.info("sSQL is ----===  "+sSQL);
			if(userAdmin==null){
				retMap.put("error",errArg);
			}
			else 
			{
				retMap.put("data",userAdmin);
			}
		}catch(Exception e){e.printStackTrace();}
		finally
		{
			db.Finalize();
		}
		return retMap;
	}
	public String[][] ZoOnLoad()throws RemoteException
	{
		BMLogger logger = new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		logger.info("in central bean in ZoOnLoad");
		String data[][]=null;
		try{
			//String sql="Select zon_code,zon_ename from abb_zon";
			String sql="Select zon_code,zon_ename from s_zon";
			logger.info(sql);
			data=bean.getData(2,sql);
			logger.info("in central bean after data");
		}catch(Exception e)
		{e.printStackTrace();}  
		finally
		{
			db.Finalize();
		}
		return data;
	}

	public String[][] roOnLoad(String SelectValueZo)throws RemoteException
	{
		BMLogger logger = new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		logger.info("in central bean in roOnLoad");
		String data[][]=null;
		try{
			//String sql="Select rgn_code,rgn_ename from abb_rgn where rgn_zonid='"+SelectValueZo+"'";
			String sql="Select rgn_code,rgn_ename from s_rgn where rgn_zonid='"+SelectValueZo+"'";
			logger.info(sql);
			data=bean.getData(2,sql);
			logger.info("in central bean after data");
		}catch(Exception e)
		{e.printStackTrace();}
		finally
		{
			db.Finalize();
		}
		return data;
	}

	public String[][] brndataLoad( )throws RemoteException
	{
		BMLogger logger = new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		logger.info("in central bean in brndataLoad");
		String data[][]=null;
		try{
			String sql="Select brn_brcode,brn_ename from s_brn ";
			logger.info(sql);
			data=bean.getData(2,sql);
			logger.info("in central bean after data from s_brn");
		}catch(Exception e)
		{e.printStackTrace();}
		finally
		{
			db.Finalize();
		}
		return data;
	}

	public String addingzoidname (String zoid,String zocode,String zotext)throws RemoteException
	{

		BMLogger logger = new BMLogger(CentralBean.class);
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);

		String status = "";
		String data[]=null;
		try
		{
			logger.info("zoid = "+zoid);
			logger.info("zocode"+zocode);
			logger.info("zotext"+zotext);

			//sql="select zon_code from abb_zon where zon_code='"+zocode+"'";
			sql="select zon_code from s_zon where zon_code='"+zocode+"'";
			logger.info("query of select ="+sql);
			data=bean.getRow(1,sql); 
			logger.info("value for data = "+data);
			if(data==null)
			{
				//sql="insert into abb_zon(zon_kid,zon_code,zon_ename) values('"+zoid+"','"+zocode+"','"+zotext+"')";
				sql="insert into s_zon(zon_kid,zon_code,zon_ename) values('"+zoid+"','"+zocode+"','"+zotext+"')";
				logger.info(sql);
				db.db_Insert(sql);
				status="Saved Sucessfuly";
			}
			else
			{

				status="Record Already Exist";
				logger.info("in Central Bean status= "+status);
			}							
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}

		/*try{
					sql ="select zon_kid,zon_code,zon_ename from abb_zon"; 
					status = bean.getData(3,sql);
					logger.info("getUsrInfo SQL is : "+sql);
				}catch(Exception e){
					e.printStackTrace();
				}
				finally {
					db.Finalize();
				}
		 */
		return status;
	}

	public String[][] brStatInforHome(String rohome)throws RemoteException{
		BMLogger logger=new BMLogger(CentralBean.class);
		logger.info("In the brStatusInfo() in CentralBean"); 
		String [][]brnDtl = null;
		//	String[][] detailedBranchStatus = null;   
		DataBaseClass db=new DataBaseClass();
		logger.info("In the brStatusInfo() for home on RO select in CentralBean-----------"); 
		try{

			result = null;
			sql = "select brn_appserver,brn_brcode,brn_ename,brn_isconnected,brn_cdate,brn_day from s_brn where brn_rgnid='"+rohome+"'";
			logger.info("sql query is : "+sql);
			SelectDataBeanRowCol sel_db=new SelectDataBeanRowCol(db);	
			brnDtl = sel_db.getData(6,sql);
			if(brnDtl != null) 
			{
				brnDtl[0][3] = "C";		// Hard coded for HO connectivity
				brnDtl[0][4].trim().substring(0,10);
				logger.info("cdatevalue = "+brnDtl[0][4].trim().substring(0,10));
			}
		}
		catch(Exception e)
		{

			logger.info("in else due to null");
			e.printStackTrace();
		}
		finally{ 
			db.Finalize();
		}
		return brnDtl;
	}

	public DDRequestDto saveDDRequest(DDRequestDto dto)
	{
		boolean b=false;
		DataBaseClass db = new DataBaseClass();
		BMLogger logger =new BMLogger(CentralBean.class);
		String userid=(String)dto.getUserid();
		String accNo=dto.getAccList();
		String date=DateTimeFunction.getIbDateTime();
		logger.info("Date in Central Bean is"+date);
		//	DateTimeFunction.
		//	Datetime date1=DateTimeFunction.
		String nameOfBen=dto.getNameOfBen();
		double amount=dto.getAmount();
		String curCode=dto.getCurCode();
		String payableAt=dto.getPayableAt();
		String maturInst=dto.getUserid();
		String descStr="NAMEOFBEN="+nameOfBen+";AMOUNT="+amount+";CURCODE="+curCode+";PAYABLEAT="+payableAt+";";
		String sql="Insert into s_ibreq(ibreq_usrid,ibreq_accno,ibreq_date,ibreq_type," +
		"ibreq_flag,ibreq_desc)" +
		" values('"+userid+"','"+accNo+"','"+date+"','DDREQ','Y','"+descStr+"')";
		logger.info("Insert query is   "+sql);

		try{
			db.doBeginTrans();
			db.db_Insert(sql);
			db.doCommit();
		}catch(Exception e){
			e.printStackTrace();
			db.doRollback();
		}finally{
			db.Finalize();
		}
		logger.info("sql query is -"+sql);
		return dto;
	}
	//Function for get brn code at load of Admin user creation
	public String[][] getBrnCodAtAdminUsrCrt()throws RemoteException {

		BMLogger logger=new BMLogger(CentralBean.class);
		logger.info("_______AtbrndataforAdminUsrCreation_________");

		String [][]sBrnData = null;
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		String lsSql="";
		try	{

			lsSql= " select brn_brcode "+ 
			" from s_brn "+
			" where brn_isconnected='C' AND brn_appserver <>'NULL' ";
			sBrnData = bean.getData(1,lsSql);
			logger.info("Brn Code query"+lsSql);

		} 
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return sBrnData;
	}

	public HashMap<Object, Object> savePassWordChange(String sOld_Pass,String snew_Pass,String sconf_Pass,String sIbUsr_LogId,String schangePassFor,ErrorVar errArg)// added by Jagan 23-12-06
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		HashMap<Object, Object> retMap = new HashMap<Object, Object>();
		logger.info("getSOld_Pass()---"+sOld_Pass);
		logger.info("sIbUsr_LogId()---"+sIbUsr_LogId);
		try{
			//	PasswordCrypt passcrpt=new PasswordCrypt();
			String encrOldpass="";
			String encrNewpass="";
			String encrconfpass="";
			String sSql="";
			String sSQL="";
			String password[]=null;
			String encString ="" ; 
			//encrOldpass = MD5.getMd5String(sOld_Pass.trim());
			encrOldpass = sOld_Pass.trim();
			//encrNewpass=MD5.getMd5String(snew_Pass.trim());
			encrNewpass=snew_Pass.trim();
			//encrconfpass=MD5.getMd5String(sconf_Pass.trim());
			encrconfpass=sconf_Pass.trim();
			logger.info("getSOld_Pass()---"+encrOldpass);
			if(schangePassFor.equalsIgnoreCase("LoginPass") ){
				sSql=" select ibusr_usrpass,ibusr_accno,ibusr_brncode from s_ibusr where ibusr_usrid=?";
			}
			else{
				sSql=" select ibusr_trnpass,ibusr_accno,ibusr_brncode,ibusr_usrpass from s_ibusr where  ibusr_usrid=?";
			}
			logger.info("sql query "+sSql);
			ArrayList<Object> inList = new ArrayList<Object>();
			inList.add(0, sIbUsr_LogId.trim());
			if(schangePassFor.equalsIgnoreCase("LoginPass") ){
				password=bean.getRow(3,sSql,inList);}
			else {
				password=bean.getRow(4,sSql,inList);			
			}

			if(password!=null){
				// at the time of Creating user by default we set transaction password as bank 
				if (schangePassFor.equals("TranPass")) {
					if (!encrOldpass.equalsIgnoreCase(password[0]) && !"bank".equalsIgnoreCase(password[0])) {
						retMap.put("oldPassWordNotMatch",errArg);
						return retMap;
					}
				}else {
					if (!encrOldpass.equalsIgnoreCase(password[0])) {
						retMap.put("oldPassWordNotMatch",errArg);
						return retMap;
					}
				}
				if(!schangePassFor.equalsIgnoreCase("LoginPass")){
					if(password[3].equalsIgnoreCase(encrNewpass)){
						retMap.put("LoginandTranSame",errArg);
						return retMap;
					}
				}
				logger.info("password[0]---"+password[0]);
				logger.info("password[1]---"+password[1]);
				logger.info("password[2]---"+password[2]);
				if(encrNewpass.trim().equalsIgnoreCase(encrconfpass.trim())){
					db.doBeginTrans();
					if(schangePassFor.equalsIgnoreCase("LoginPass")){
						sSQL=" update s_ibusr set ibusr_usrpass=?, ibusr_status='A',ibusr_flag='Y' where  ibusr_usrid=?";
					}
					else{
						sSQL=" update s_ibusr set ibusr_trnpass=? where  ibusr_usrid=?";
					}
					logger.info("sql query "+sql);
					ArrayList<Object> argList = new ArrayList<Object>();
					argList.add(0, encrNewpass);
					argList.add(1, sIbUsr_LogId.trim());

					String inslog="insert into s_ibusrstatuslog (log_usrid,log_date,log_status,log_adminid,log_brncode,log_accno) values(?,?,?,?,?,?)";
					ArrayList<Object> insLogList = new ArrayList<Object>();
					insLogList.add(0, sIbUsr_LogId.trim());
					insLogList.add(1,DateTimeFunction.getIbDateTime());	
					insLogList.add(2,"P");
					insLogList.add(3, sIbUsr_LogId.trim());
					insLogList.add(4,password[2].trim());
					insLogList.add(5,password[1].trim());
					db.db_update(sSQL, argList);
					logger.info("inslog query "+inslog);
					db.db_Insert(inslog, insLogList);				
					if(db.getErrorCount()>0){
						db.doRollback();
						retMap.put("Fetal",errArg);
						return retMap;
					}
					else
					{
						db.doCommit();
						retMap.put("PassWordSave",errArg);
						return retMap;
					}
				}			   
				else{
					retMap.put("PassWordNotMatch",errArg);
					return retMap;}


			}
			else{
				retMap.put("oldPassWordNotMatch",errArg);
			}

		}
		catch(Exception e)
		{
			e.printStackTrace();
			db.doRollback();
			retMap.put("Fetal",errArg);
		}
		return retMap;
	}
	public HashMap<Object, Object> reportForPerformOperationByUser(StatusLogReportDto adminDto,ErrorVar errArg)// added by Jagan 23-12-06
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		HashMap<Object, Object> retMap = new HashMap<Object, Object>();
		String date =DateTimeFunction.dateToStrFmt(adminDto.getFromdate(),"yyyy/mm/dd");
		String newDate =date.replaceAll("/", ".");

		String[][] actvtlist=null;
		String[][] userOperate=null;
		try{ 

			String sSQL=" select distinct abbiblog_usrid,convert(varchar(10),abbiblog_date,104) from s_abbiblog" +
			" where convert(varchar(10),abbiblog_date,102) = '"+newDate+"'  and " +
			" abbiblog_atvtid=1 and abbiblog_usrid in" +
			" (select ibusr_usrid from s_ibusr where ibusr_accno<>'0')";
			userOperate=bean.getData(2,sSQL);
			logger.info("sSQL is ----===  "+sSQL);
			if(userOperate==null){
				//errArg.add("421","ListEmpety");
				retMap.put("error",errArg);
			}
			else 
			{
				retMap.put("data",userOperate);
			}    

		}
		catch(Exception e){e.printStackTrace();}
		finally
		{
			db.Finalize();
		}
		return retMap;
	}
	public HashMap<Object, Object> ShowUserwiseDetail(StatusLogReportDto adminDto,ErrorVar errArg)// added by Jagan 23-12-06
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		HashMap<Object, Object> retMap = new HashMap<Object, Object>();
		java.util.Date fromdate=DateTimeFunction.strToUtilDate(adminDto.getFromdate());
		java.util.Date newdate=DateTimeFunction.relativeDate(fromdate,-1);
		java.util.Date newdate1=DateTimeFunction.relativeDate(fromdate,1);
		logger.info("newdate------"+newdate);
		logger.info("newdate1------"+newdate1);
		logger.info("getUserid------"+adminDto.getUserid());

		String[][] actvtlist=null;
		String[][]reqlist=null;
		String[][] abiblist=null;

		try{   

			String sSql0= "  select atvt_sname ,abbiblog_date from s_abbiblog ,s_atvt where abbiblog_usrid='"+adminDto.getUserid()+"'" +
			" and atvt_kid=abbiblog_atvtid" +
			"  and abbiblog_date between '"+DateTimeFunction.strToSqlDate(adminDto.getFromdate())+" 0:0:0.000"+"'" +
			" and '"+DateTimeFunction.strToSqlDate(adminDto.getFromdate())+" 23:59:59.999"+"'";
			abiblist=bean.getData(2,sSql0);

			String sSql1="select ibreq_type,ibreq_date from s_ibreq,s_atvt where ibreq_usrid='"+adminDto.getUserid()+"'" +
			" and ibreq_type=atvt_sname" +
			" and ibreq_date between '"+DateTimeFunction.strToSqlDate(adminDto.getFromdate())+" 0:0:0.000"+"'" +
			" and '"+DateTimeFunction.strToSqlDate(adminDto.getFromdate())+" 23:59:59.999"+"'";
			reqlist=bean.getData(2,sSql1); 

			String sSql2=" select atvt_sname,log_date from s_activitylog ,s_atvt where log_usrid='"+adminDto.getUserid()+"'" +
			" and atvt_kid=log_activityid" +
			" and log_date between '"+DateTimeFunction.strToSqlDate(adminDto.getFromdate())+" 0:0:0.000"+"'" +
			"  and '"+DateTimeFunction.strToSqlDate(adminDto.getFromdate())+" 23:59:59.999"+"'";
			actvtlist=bean.getData(2,sSql2); 

			logger.info("sSQL is ----===  "+sSql0);   
			logger.info("sSQL is ----===  "+sSql1);
			logger.info("sSQL is ----===  "+sSql2);
			if(abiblist==null && reqlist==null && actvtlist==null ){
				retMap.put("error",errArg);          }
			if (abiblist==null){}
			else retMap.put("data0",abiblist);

			if (reqlist==null){}
			else retMap.put("data1",reqlist);

			if (actvtlist==null){}
			else retMap.put("data2",actvtlist);


		}
		catch(Exception e){e.printStackTrace();}
		finally
		{
			db.Finalize();
		}
		return retMap;
	}
	public void ejbCreate(){}
	public void ejbRemove(){}
	public void ejbActivate(){}
	public void ejbPassivate(){}
	public void setSessionContext(SessionContext sc){}

	public String[][] ibLastLoginInfo(String sLogin_id)throws RemoteException
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] res=null;
		try
		{
			ArrayList<Object> argList=null;
			sql="select abbiblog_date,isnull(ibusr_usrEname,''),abbiblog_hostname,abbiblog_status,abbiblog_sessId from s_abbiblog , s_ibusr where abbiblog_usrkid = s_ibusr.ibusr_kid and abbiblog_usrid = ?  and abbiblog_atvtid = 1 order by abbiblog_date desc ";
			argList = new ArrayList<Object>();
			argList.add(0,sLogin_id);
			res = bean.getData(5,sql,argList);
		}

		catch(Exception e)
		{
			logger.fatal("Error in ibLogInfo(1) finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}	
		return res;

	}


	public String fetchAddPayee(String usrid)throws RemoteException
	{ 
		String userinfodata="";
		String newMobile="";
		try
		{
			UserInformation userinfo= new UserInformation();
			userinfodata=userinfo.getUserInformation(usrid);
			System.out.println(userinfodata);

			newMobile=	XmlParse.extractAttribute(userinfodata,"accountData","mobileNo" );
			System.out.println("newMobile--------------"+newMobile);


		}
		catch(Exception e)
		{
			e.printStackTrace();	

		}
		return newMobile;
	}
	public String ownAccPayee(FundForm fund,String purpose)
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		String sql=null;
		String success="Success"; 

		try
		{ if(purpose.equalsIgnoreCase("Entry"))
		{

			if (fund.getSelect().equals("S")) {  // in case of Same bank no need to confirm Payee direct save with status Y  
				sql="insert into s_ibfundtrpayee(ibfund_accno,ibfund_nick,ibfund_mobile,ibfund_email,ibfund_brncode," +
				"ibfund_linkedno,ibfund_payeename,ibfund_ifscode,ibfund_userid,ibfund_type,ibfund_acctype,ibfund_status)" +
				" values('"+fund.getsPayeeAcc()+"','"+fund.getsNickName()+"','"+fund.getPayeeMob()+"','','',0,'"+fund.getPayeeName()+"','"+fund.getIFSCcode()+"','"+fund.getusrid()+"','"+fund.getSelect()+"','"+fund.getsAccountType()+"','E')";
				logger.info("IBUSRSTATUSLOG Query" + sql);
				db.db_Insert(sql);
			}else { 
				sql="insert into s_ibfundtrpayee(ibfund_accno,ibfund_nick,ibfund_mobile,ibfund_email,ibfund_brncode," +
				"ibfund_linkedno,ibfund_payeename,ibfund_ifscode,ibfund_userid,ibfund_type,ibfund_acctype,ibfund_status)" +
				" values('"+fund.getsPayeeAcc()+"','"+fund.getsNickName()+"','"+fund.getPayeeMob()+"','','',0,'"+fund.getPayeeName()+"','"+fund.getIFSCcode()+"','"+fund.getusrid()+"','"+fund.getSelect()+"','"+fund.getsAccountType()+"','E')";
				logger.info("IBUSRSTATUSLOG Query" + sql);
				db.db_Insert(sql);

			}



		}	else {   ///retail customer dirrect insert case
			SelectDataBeanRowCol sdb = new SelectDataBeanRowCol(db) ;

			sql = "select count(*) from s_ibfundtrpayee where ibfund_userid = '" + fund.getusrid().trim()+ "' and ibfund_accno = '" + fund.getsPayeeAcc().trim() + "'" ; 
			String[] payeeRow = sdb.getRow(1, sql);
			if ( (payeeRow != null) && (Long.parseLong(payeeRow[0]) == 0 )) {
				db.doBeginTrans();

				if (fund.getSelect().equals("S")) {  // in case of Same bank no need to confirm Payee direct save with status Y  
					sql="insert into s_ibfundtrpayee(ibfund_accno,ibfund_nick,ibfund_mobile,ibfund_email,ibfund_brncode," +
					"ibfund_linkedno,ibfund_payeename,ibfund_ifscode,ibfund_userid,ibfund_type,ibfund_acctype,ibfund_status)" +
					" values('"+fund.getsPayeeAcc()+"','"+fund.getsNickName()+"','"+fund.getPayeeMob()+"','','',0,'"+fund.getPayeeName()+"','"+fund.getIFSCcode()+"','"+fund.getusrid()+"','"+fund.getSelect()+"','"+fund.getsAccountType()+"','Y')";
					logger.info("IBUSRSTATUSLOG Query" + sql);
					db.db_Insert(sql);
				}else {

					sql="insert into s_ibfundtrpayee(ibfund_accno,ibfund_nick,ibfund_mobile,ibfund_email,ibfund_brncode," +
					"ibfund_linkedno,ibfund_payeename,ibfund_ifscode,ibfund_userid,ibfund_type,ibfund_acctype,ibfund_status,ibfund_mmid)" +
					" values('"+fund.getsPayeeAcc()+"','"+fund.getsNickName()+"','"+fund.getPayeeMob()+"','','',0,'"+fund.getPayeeName()+"','"+fund.getIFSCcode()+"','"+fund.getusrid()+"','"+fund.getSelect()+"','"+fund.getsAccountType()+"','N','"+fund.getMmid()+"')";
					logger.info("IBUSRSTATUSLOG Query" + sql);
					db.db_Insert(sql);


				}
				db.doCommit(); 
			}
			else if(Long.parseLong(payeeRow[0])>0){
				success="all";
			}

			else { 
				success="failure";
			}
		}
		}
		catch(Exception e)
		{
			db.doRollback();
			logger.info("Error in existUserIbInfo finding");
			success="failure";
			e.printStackTrace();

		}
		finally
		{
			db.Finalize();
		}

		return success ;
	}

	/*
	 * called from fund transfer screen to display list of payyee 
	 *  
	 */
	public String[][] fetchPayee(String userid,String payeeStatus,String purpose)
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] res=null;
		try
		{
			if((purpose.equalsIgnoreCase("AddPayeeSB"))|| (purpose.equalsIgnoreCase("AddPayeeOB"))) { 
				// userid will cust id of corporate user
				if (payeeStatus.equals("N")) {	// All unconfirm payee 
					sql="select ibfund_nick,ibfund_mobile,ibfund_accno,ibfund_ifscode,ibfund_type,ibfund_payeename," +
					" case ibfund_acctype when 'S' then 'Saving' when 'A' then 'Current' when 'C' then 'Cash Credit' when 'E' then 'RD' when 'T' then 'Loan' end as ibfund_acctype ,ibfund_kid,ibfund_userid from s_ibfundtrpayee where ibfund_userid in (select ibusr_usrid from s_ibusr where  ibusr_brlinkedno = '" +userid+"' and ibusr_status = 'A' and ibusr_custRole in ( 'S','E')) and  ibfund_status = 'E' and ibfund_type = 'S'";
				}else if (payeeStatus.equals("O")) {	// Other bank confirm  payee 
					sql="select ibfund_nick,ibfund_mobile,ibfund_accno,ibfund_ifscode,ibfund_type,ibfund_payeename," +
					" case ibfund_acctype when 'S' then 'Saving' when 'A' then 'Current' when 'C' then 'Cash Credit' when 'E' then 'RD' when 'T' then 'Loan' end as ibfund_acctype,ibfund_kid,ibfund_userid from s_ibfundtrpayee where ibfund_userid in (select ibusr_usrid from s_ibusr where  ibusr_brlinkedno = '" +userid+"' and ibusr_status = 'A' and ibusr_custRole in ( 'S','E'))  and  ibfund_status = 'E'  and ibfund_type = 'O' ";
				} 
				res = bean.getData(9,sql); 

			} else {
				if (payeeStatus.equals("N")) {	// All unconfirm payee 
					sql="select ibfund_nick,ibfund_mobile,ibfund_accno,ibfund_ifscode,ibfund_type,ibfund_payeename," +
					"case ibfund_acctype when 'S' then 'Saving' when 'A' then 'Current' when 'C' then 'Cash Credit' when 'E' then 'RD' when 'T' then 'Loan' end as ibfund_acctype,ibfund_kid from s_ibfundtrpayee where ibfund_userid = '"+userid+"' and  ibfund_status = '" + payeeStatus +"'";
				}else if (payeeStatus.equals("O")) {	// Other bank confirm  payee
					sql="select ibfund_nick,ibfund_mobile,ibfund_accno,ibfund_ifscode,ibfund_type,ibfund_payeename," +
					"case ibfund_acctype when 'S' then 'Saving' when 'A' then 'Current' when 'C' then 'Cash Credit' when 'E' then 'RD' when 'T' then 'Loan' end as ibfund_acctype,ibfund_kid from s_ibfundtrpayee where ibfund_userid = '"+userid+"' and  ibfund_status = 'Y' and ibfund_type = 'O' ";
				}
				else { 		// only same bank payee
					sql="select ibfund_nick,ibfund_mobile,ibfund_accno,ibfund_ifscode,ibfund_type,ibfund_payeename," +
					"case ibfund_acctype when 'S' then 'Saving' when 'A' then 'Current' when 'C' then 'Cash Credit' when 'E' then 'RD' when 'T' then 'Loan' end as ibfund_acctype,ibfund_kid from s_ibfundtrpayee where ibfund_userid = '"+userid+"' and  ibfund_status = '" + payeeStatus +"' and ibfund_type = 'S' ";
				}
				res = bean.getData(8,sql);  
			}
		}

		catch(Exception e)
		{
			logger.fatal("Error in ibLogInfo(1) finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}	
		return res;



	}

	public String[][] fetchPayeeforDelete(String userid,String payeeStatus,String purpose)
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] res=null;
		try
		{
			if((purpose.equalsIgnoreCase("AddPayeeSB"))|| (purpose.equalsIgnoreCase("AddPayeeOB"))) { 
				// userid will cust id of corporate user
				if (payeeStatus.equals("N")) {	// All unconfirm payee 
					sql="select ibfund_nick,ibfund_mobile,ibfund_accno,ibfund_ifscode,ibfund_type,ibfund_payeename," +
					"case ibfund_acctype when 'S' then 'Saving' when 'A' then 'Current' when 'C' then 'Cash Credit' when 'E' then 'RD' when 'T' then 'Loan' end as ibfund_acctype,ibfund_kid,ibfund_userid from s_ibfundtrpayee where ibfund_userid in (select ibusr_usrid from s_ibusr where  ibusr_brlinkedno = '" +userid+"' and ibusr_status = 'A' and ibusr_custRole in ( 'S','E')) and  ibfund_status = 'E' and ibfund_type = 'S'";
				}else if (payeeStatus.equals("O")) {	// Other bank confirm  payee 
					sql="select ibfund_nick,ibfund_mobile,ibfund_accno,ibfund_ifscode,ibfund_type,ibfund_payeename," +
					"case ibfund_acctype when 'S' then 'Saving' when 'A' then 'Current' when 'C' then 'Cash Credit' when 'E' then 'RD' when 'T' then 'Loan' end as ibfund_acctype,ibfund_kid,ibfund_userid from s_ibfundtrpayee where ibfund_userid in (select ibusr_usrid from s_ibusr where  ibusr_brlinkedno = '" +userid+"' and ibusr_status = 'A' and ibusr_custRole in ( 'S','E'))  and  ibfund_status = 'E'  and ibfund_type = 'O' ";
				} 
				res = bean.getData(9,sql); 

			} else {

				sql="select ibfund_nick,ibfund_mobile,ibfund_accno,ibfund_ifscode,ibfund_type,ibfund_payeename," +
				"case ibfund_acctype when 'S' then 'Saving' when 'A' then 'Current' when 'C' then 'Cash Credit' when 'E' then 'RD' when 'T' then 'Loan' end as ibfund_acctype,ibfund_kid from s_ibfundtrpayee where ibfund_userid = '"+userid+"' and  ibfund_status = '" + payeeStatus +"' ";
				res = bean.getData(8,sql);  
			}
		}

		catch(Exception e)
		{
			logger.fatal("Error in ibLogInfo(1) finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}	
		return res;



	}


	public String[][] fetchPayeeInfo(String userid,String payeeID)
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] res=null;
		try
		{
			sql="select ibfund_accno,ibfund_mobile,ibfund_ifscode,ibfund_type" +
			" from s_ibfundtrpayee where ibfund_userid = '"+userid+"' and  ibfund_status = 'Y' and ibfund_kid = " + payeeID ;

			res = bean.getData(4,sql);
		}


		catch(Exception e)
		{
			logger.fatal("Error in ibLogInfo(1) finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}	
		return res;


	}

	public String otpVerify(String userId,String beneficAcc){
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		String sqll="";
		try{
			sqll= "update s_ibfundtrpayee set ibfund_status='Y' where  ibfund_userid = '" + userId + "' and ibfund_kid='"+beneficAcc+"' ";
			logger.info(sqll);
			db.db_update(sqll);
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally { 
			db.Finalize();
		}
		return "success";
	}

	public String[][] fetchPayeeWithinBank(String userid,String mode)
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] res=null;
		String sqlac="";
		try
		{
			if (!(mode.equals("S") || mode.equals("O") || mode.equalsIgnoreCase("ALL"))) {
				return null ; 
			}
			if(mode.equals("ALL")) {
				sql="select ibfund_nick,ibfund_mobile,ibfund_accno,ibfund_ifscode,ibfund_type,ibfund_payeename, " +
				"ibfund_acctype,ibfund_kid ,ibusr_accno from s_ibusr,s_ibfundtrpayee where ibusr_usrid=ibfund_userid and ibfund_userid = '"+userid+"' and  ibfund_status = 'Y' and ibfund_type in ('S','O')  ";
				res = bean.getData(9,sql);
			} else {  
				sql="select ibfund_nick,ibfund_mobile,ibfund_accno,ibfund_ifscode,ibfund_type,ibfund_payeename, " +
				"ibfund_acctype,ibfund_kid ,ibusr_accno,isnull(ibfund_FavFlag,'N'),ibfund_mmid from s_ibusr,s_ibfundtrpayee where ibusr_usrid=ibfund_userid and ibfund_userid = '"+userid+"' and  ibfund_status = 'Y' and ibfund_type ='" + mode + "'";
				res = bean.getData(11,sql);
			}
		}


		catch(Exception e)
		{
			logger.fatal("Error in ibLogInfo(1) finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}	
		return res;



	}

	public String[][] getUserAccount(String userid)
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] res=null;
		String sqlac="";
		try
		{
			String sql="select ibusr_accno from s_ibusr where ibusr_usrid = '"+userid+"'";
			res = bean.getData(1,sql);

		}


		catch(Exception e)
		{
			logger.fatal("Error in ibLogInfo(1) finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		}	
		return res;



	}

	public String insertCBSuser(String[] customerId,String[] accountNo,String[] branchCode,String[] customerName, String[] emailId, String[] mobileNo)throws RemoteException

	{
		DataBaseClass db= new DataBaseClass();
		SelectDataBeanRowCol bean=new SelectDataBeanRowCol(db);
		BMLogger logger=new BMLogger(CentralBean.class);
		String eportalUrl = BMConfig.getProperty("EPORTALURL");
		String prompUrl = BMConfig.getProperty("PROMPTME");
		String ibusrStatus="";
		String returnStr="";
		String template="";
		String[][] res=null;
		sql = "insert into s_ibusr"
			+ "(ibusr_brlinkedno,ibusr_accno,ibusr_brncode,ibusr_usrid,ibusr_usrpass," +
			" ibusr_trnpass,ibusr_flag,ibusr_status,ibusr_crdate,ibusr_usrtype," +
			" ibusr_activedate,ibusr_holinkedno,ibusr_curcode,ibusr_curkid,ibusr_actSname," +
			" ibusr_ispassprinted,ibusr_usrEname,ibusr_usrHname,ibusr_mkrid,ibusr_mob,ibusr_mailid)"
			+ "values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		for(int i=0;i<customerId.length;i++){
			ibusrStatus="C";
			if (mobileNo[i].trim().length()==10){
				ibusrStatus="A";

			}
			String usrid=branchCode[i]+customerId[i];
			String sq2="select count(*) from s_ibusr where ibusr_Brlinkedno="+usrid;
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,customerId[i]);
			argList.add(1,accountNo[i]);
			argList.add(2,branchCode[i]);
			argList.add(3,usrid);
			argList.add(4,"");
			argList.add(5,"");
			argList.add(6,"Y");
			argList.add(7,ibusrStatus);
			argList.add(8,DateTimeFunction.getIbDateTime());
			argList.add(9,"U");
			argList.add(10,"");
			argList.add(11,0);
			argList.add(12,"");
			argList.add(13,"");
			argList.add(14,"SB");
			argList.add(15,"Y");
			argList.add(16,customerName[i]);
			argList.add(17,"");
			argList.add(18,"");
			argList.add(19,mobileNo[i]);
			argList.add(20,emailId[i]);

			logger.info("SQl For Acc Ib Insert" + sql);
			try {
				res = bean.getData(1,sq2);
				if (res!=null){
					int iCount = Integer.parseInt(res[0][0]);
					if (iCount>0){
						continue;
					}
				}
				db.db_Insert(sql,argList);
				URL  url=new URL(eportalUrl+"/createUserDynamic.action?name="+java.net.URLEncoder.encode(customerName[i],"UTF-8")+"&email="+java.net.URLEncoder.encode(emailId[i],"UTF-8")+"&userid="+java.net.URLEncoder.encode(usrid,"UTF-8") +"&mobile="+java.net.URLEncoder.encode(mobileNo[i],"UTF-8"));
				//http://192.168.1.130:8082/Eportal_04082015/createUserDynamic.action?name=DOGRA&email=adarsh@gmail.com&mobile=9829751644
				URLConnection conn = url.openConnection();
				conn.setDoInput(true);
				conn.setDoOutput(true);
				BufferedReader br=new BufferedReader(new InputStreamReader(conn.getInputStream()));
				String line,retval="";
				while ((line = br.readLine()) != null) {
					retval += line;
				}
				br.close();
				URL  url1=new URL(prompUrl+"/app/IB/verify.php?name="+customerName[i]+"&usermail="+emailId[i]+"&userid="+usrid +"&mobile="+mobileNo[i]);
				URLConnection conn1 = url1.openConnection();
				conn1.setDoInput(true);
				conn1.setDoOutput(true);
				BufferedReader br1=new BufferedReader(new InputStreamReader(conn1.getInputStream()));
				String line1,retval1="";
				while ((line1 = br1.readLine()) != null) {
					retval1 += line1;
				}
				br1.close();

				if (ibusrStatus.equals("A")){  // ibusrstatus 'A' means customer have mobile no 

					template ="Dear " + customerName[i]+ ", we are extremely glad that your MobileBanking user Id has been created. Your User ID is  " + usrid + 
					". Kindly download the HPSCB mSys application from your respective store (Google/Apple/Windows). The links are : \r\n " + 
					" Please activate your Account which will give you access to all Account Holders of the bank for all banking services, " + 
					" Precisecart.com, Promptme.com etc.. " ;

					String reply = SMSLaneSend.SMSLaneSend(mobileNo[i],template);
					System.out.println(reply);
					SMSLaneSend.saveSMSDetail(mobileNo[i],accountNo[i],usrid,"Mobile Banking",template,reply);


				}


			} catch (Exception e) {
				e.printStackTrace();
			}
			finally{
				db.Finalize();
			}

		}
		return "success";
	}

	public String[] getAccountNo(String mobileNo)throws RemoteException{
		BMLogger logger=new BMLogger(CentralBean.class);
		String accountNo="";
		String custId="";
		String data[]=new String[2];
		DataBaseClass db=new DataBaseClass();
		String sql="";
		try { 
			IBFunction ibfun = new IBFunction() ; 
			data = ibfun.getAccountFromMobile(mobileNo, db) ;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return data;

	}

	public boolean removePayee(String userID, String beneAccNo)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		String sql=""; boolean IsSuccess=false;

		try {
			// delete facility is available in ICICI bank 
			sql="delete from s_ibfundtrpayee where ibfund_userid='"+userID+"' and ibfund_kid='"+beneAccNo+"'";

			logger.info("Delete beneAccNo Query "+sql);
			db.db_delete(sql);
			IsSuccess=true;
		} catch (Exception e) {
			logger.info("Error in delete payee where beneAccNo"+beneAccNo);
			e.printStackTrace();
		}
		finally{ 
			db.Finalize();
		}

		return IsSuccess;
	}

	public String[][] fetchPayeewithPayAcc(String userID, String beneAccNo)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		String sql=""; boolean IsSuccess=false;
		String[][] row = null;
		try {
			// select Details  
			SelectDataBeanRowCol sdb = new SelectDataBeanRowCol(db);
			sql="select ibfund_nick,ibfund_mobile,ibfund_accno,ibfund_ifscode,ibfund_type,ibfund_payeename," +
			"ibfund_acctype,ibfund_kid,ibfund_mmid from s_ibfundtrpayee where ibfund_userid = '"+userID+"' and ibfund_accno='"+beneAccNo+"' and  ibfund_status = 'Y' ";
			logger.info("Payee details "+sql);
			row = sdb.getData(9,sql);
			IsSuccess=true;
		} catch (Exception e) {
			logger.info("Error in fetching payee where beneAccNo"+beneAccNo);
			e.printStackTrace();
		}
		finally{ 
			db.Finalize();
		}

		return row;
	}

	public String saveDateRequest(String jsonString,String userId,String accNO,String mode,String entryflag)throws RemoteException {
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		String date=DateTimeFunction.getIbDateTime();
		String sql="Insert into s_ibreq(ibreq_usrid,ibreq_accno,ibreq_date,ibreq_type," +
		"ibreq_flag,ibreq_desc)" +
		" values('"+userId+"','"+accNO+"','"+date+"','"+mode+"','N','"+jsonString+"')";
		logger.info("Insert query is   "+sql);
		try{
			db.doBeginTrans();
			db.db_Insert(sql);
			db.doCommit();
		}catch(Exception e){
			e.printStackTrace();
			db.doRollback();
		}finally{
			db.Finalize();
		}
		logger.info("sql query is -"+sql);
		return "success";

	}

	public String saveDateRequest(String jsonString,String userId,String accNO,String mode,String entryflag,String schDate)throws RemoteException {
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		String date=DateTimeFunction.getIbDateTime();
		String sql="Insert into s_ibreq(ibreq_usrid,ibreq_accno,ibreq_date,ibreq_type," +
		"ibreq_flag,ibreq_desc)" +
		" values('"+userId+"','"+accNO+"','"+date+"','"+mode+"','N','"+jsonString+"')";
		logger.info("Insert query is   "+sql);
		try{
			db.doBeginTrans();
			db.db_Insert(sql);
			db.doCommit();
		}catch(Exception e){
			e.printStackTrace();
			db.doRollback();
		}finally{
			db.Finalize();
		}
		logger.info("sql query is -"+sql);
		return "success";

	}

	public void addUrlInAtvt(String url)
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		String date=DateTimeFunction.getIbDateTime();
		SelectDataBeanRowCol sdb = new SelectDataBeanRowCol(db);

		try{
			String[] row = sdb.getRow(1, "select atvt_kid from s_atvt where atvt_url = '" + url + "'");
			if (row == null) { 
				String sql="Insert into s_atvt(atvt_url) values('"+url+"')";
				logger.info("Insert query is   "+sql);
				db.doBeginTrans();
				db.db_Insert(sql);
				db.doCommit();

			}
		}catch(Exception e){
			e.printStackTrace();
			db.doRollback();
		}finally{
			db.Finalize();
		}
	}

	public void bulkAccountTransfer(String accnoFromFile,String acName,String ifcCode,int amount,String remark,String status,String id,String acno)
	{
		System.out.println("Bran method called");
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		String date=DateTimeFunction.getIbDateTime();
		String sql="Insert into s_BulkTrn(bulktrn_accno,bulktrn_name,bulktrn_ifsc,bulktrn_amount,bulktrn_remark,bulktrn_status,bulktrn_userid,bulktrn_fromaccount,bulktrn_date)" +
		" values('"+accnoFromFile+"','"+acName+"','"+ifcCode+"','"+amount+"','"+remark+"','"+status+"','"+id+"','"+acno+"','"+date+"')";
		logger.info("Insert query is   "+sql);
		try{
			db.doBeginTrans();
			db.db_Insert(sql);
			db.doCommit();
		}catch(Exception e){
			e.printStackTrace();
			db.doRollback();
		}finally{
			db.Finalize();
		}
	}
	public String  updateStatusBulkTransfer(String acno,String TrdRefNo ,String userid,String bulkTrfKid,String bulktrn_entryType,double amount,String entryuser)   
	{   
		String sRetval = "-1"; 
		//	int id = Integer.parseInt(userid); 
		//int n = Integer.parseInt(TrdRefNo);
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();    
		SelectDataBeanRowCol sdb = new SelectDataBeanRowCol(db);
		String retdata[][] = null;
		String date=DateTimeFunction.getIbDateTime(),sql = "";   
		// Y is success , T is temporary success and gone for postibfund trn...
		sql="update s_BulkTrn set bulktrn_status ='T',TrdRefNo='"+TrdRefNo+"',bulktrn_checkerdate="+"'"+date+"'"+",bulktrn_suderid='"+userid+"',bulktrn_amount="+amount+" where bulktrn_kid = '" + bulkTrfKid+"'";   
		logger.info("Insert query is   "+sql);    

		try{   
			db.doBeginTrans();   
			db.db_update(sql);
			sRetval = "1";				
			db.doCommit();
		}catch(Exception e){
			e.printStackTrace();
			sRetval = "-1";
			db.doRollback();
		}finally{
			db.Finalize();
		}
		return sRetval;
	}

	public String[] saveproduct(String first,String discr,String image2,String img3,String pdf,String img4,String img5,String img6) throws RemoteException{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();

		try{
			FileInputStream fis=null;
			File  image22=new File(image2);
			fis=new FileInputStream(image22); 
			FileInputStream fis1=null;
			File  image33=new File(img3);
			fis1=new FileInputStream(image33);
			FileInputStream fis2=null;
			File  image44=new File(img4);
			fis2=new FileInputStream(image44);
			FileInputStream fis3=null;
			File  image55=new File(img5);
			fis3=new FileInputStream(image55);
			FileInputStream fis4=null;
			File  image66=new File(img6);
			fis4=new FileInputStream(image66);
			String sql="Insert into s_Productlaunch(product_name,product_desc,product_image,product_PDF,product_ppt,product_ppt1,product_ppt2,product_ppt3)" 
				+" values('"+first+"','"+discr+"','"+fis+"','"+pdf+"','"+fis1+"','"+fis2+"','"+fis3+"','"+fis4+"')";
			logger.info("Insert query is   "+sql);
			db.doBeginTrans();
			db.db_Insert(sql);
			db.doCommit();
		}catch(Exception e){
			e.printStackTrace();
			db.doRollback();
		}finally{
			db.Finalize();
		}
		return null;
	}
	public List<String[]> showProduct() throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		List<String[]> list =new ArrayList<String[]>();
		String[] namestrings=null;
		String[] dscstrings=null;
		String[] imgstrings=null;
		String[] pdfstrings=null;
		ResultSet resultSet;
		String imgString="";

		int count;

		try{ 

			String sql="select product_name,product_desc,product_image,product_PDF from s_Productlaunch";
			logger.info("select query is   "+sql);
			db.doBeginTrans();
			resultSet=db.db_select(sql);
			db.doCommit();
			resultSet.last();
			count=resultSet.getRow();

			namestrings=new String[count];;
			dscstrings=new String[count];;
			imgstrings=new String[count];;
			pdfstrings=new String[count];;
			resultSet.beforeFirst();

			for(int i=0;i<count;i++)
			{
				resultSet.next();
				namestrings[i]=resultSet.getString("product_name");
				dscstrings[i]=resultSet.getString("product_desc");
				imgstrings[i]=resultSet.getString("product_image");
				pdfstrings[i]=resultSet.getString("product_PDF");


				byte [] data = imgstrings[i].getBytes();
				BufferedImage img=null;
				try
				{
					img=ImageIO.read(new ByteArrayInputStream(data));
					int h=5;

				}
				catch (Exception e)
				{
					e.printStackTrace();
				}

				/*System.out.println("index"+index);
				response.reset();
				response.setContentType("image/jpg");
				response.getOutputStream().write(rb,0,len);
				response.getOutputStream().flush();*/
			}

			list.add(namestrings);
			list.add(dscstrings);
			list.add(dscstrings);
			list.add(pdfstrings);








		}catch(Exception e){
			e.printStackTrace();
			db.doRollback();
		}finally{
			db.Finalize();
		}
		return list;

	}

	public String deactivateEBankAcc(String accNo)throws RemoteException{
		String result="";
		String sql="Select count(*) as count,ibusr_status as status from s_ibusr where ibusr_AccNo='"+accNo+"'  group by ibusr_status,ibusr_AccNo;";
		System.out.println("Select query is  "+sql);
		DataBaseClass db=new DataBaseClass();
		try{
			ResultSet rs=db.db_select(sql);
			if(rs!=null){
				rs.next();
				int cnt=rs.getInt("count");
				String status=rs.getString("status");
				if(cnt==0)
					result="~1"; //no account exists in IB
				else if(status.equals("D")==false){ //account exist and active
					sql="Update s_ibusr set ibusr_status='D' where  ibusr_AccNo='"+accNo+"';";
					System.out.println("Update query is"+sql);
					db.db_update(sql);
					result="Y";
				}
				else {
					result="~2"; //Account exists but not active
				}
			}
			else{
				result="N";
			}
		}
		catch(Exception e){
			e.printStackTrace();
			result="N";
		}
		finally{
			db.Finalize();
		}
		return result;
	}
	public  boolean createCBUser(HashMap<String, String[][]> cbusrdata)
	{

		BMLogger logger=new BMLogger(CentralBean.class);
		Boolean IsUsrCreated = false;
		String linkNum = "",  acc_Num="", 
		brnCode="",  usrid="", 
		usrpass="bank",  strDate="",
		holinkedno="",  curcode="",  curkid="",  sname="",  ename="",  hname="",  mkrid="",  custRole="",  crdLmt="";
		boolean isAlreadyCr= false;
		HashMap<String, String> map = new HashMap<String, String>();
		DataBaseClass db = new DataBaseClass(); 
		String[][] parent =cbusrdata.get("acsData");  
		String [][] acsdata =null;
		try {  
			// ibusr_brlinkedno will store -->Parent Corporate User Customer Id
			// ibusr_h0linkedno will store -->All Child  Corporate User(Authorised Signatory CustomerID) Customer Id
			Boolean isSingledataINsertSUccess= false;
			String	prevacsKID="";  
			int i=0; 
			String acsCIN="" ;
			String CBUsrCIN="" ;
			String mobileNo="";  
			String mobileData[] = new String[parent.length];  
			String sALLCBUSERID[] =  parent[0][0].split(Pattern.quote("^"));
			CBUsrCIN = sALLCBUSERID[1];
			db.doBeginTrans();  
			for (i = 0;i<parent.length;i++)  
			{  
				// parent hold all person detail whome ib_usr will create from below. 
				if(parent[i][0].toString().contains("^"))    
				{
					String[] data= 	parent[i][0].split(Pattern.quote("^"));
					parent[i][0] = data[0];    
					acsCIN = data[1];  
					if (	acsCIN.trim().length() > 0) {
						RestClient rc=new RestClient();
						String responseStr = (String)rc.callRestService("/AccInfoService/getCustomerInfo/" + data[1], "JSON");  
						logger.info(responseStr);
						JSONObject jobj = new JSONObject(responseStr);
						mobileNo = (String) jobj.get("adr_mobile"); 
						mobileData[i] = mobileNo;            
						logger.info("mobileNo" + mobileNo);   
					}
					String acsUserId ="";  
					if(i>0)    
					{  
						parent[i][0] = sALLCBUSERID[0]+"A"+i;   

					}

					map = insertInIbUsr(db,CBUsrCIN, parent[0][1], parent[0][1].substring(0, 4), parent[i][0], usrpass, strDate, isAlreadyCr, data[1], parent[i][3], parent[i][4], parent[i][2], parent[i][2], parent[i][2], String.valueOf(parent[i][5]), custRole,mobileNo);
					String result = map.get("insert");
					if(!result.equalsIgnoreCase("YES"))
					{			
						//if any usr creation fail then--> Do not insert any more and --> go out from loop
						isSingledataINsertSUccess = false;
						logger.info("NOT INSERTED FOR::"+data[1]+"CUSTOMER ID:::"+parent[i][0]);   
						break; 
					}  else {
						isSingledataINsertSUccess = true;
						logger.info(" INSERTED FOR::"+data[1]+"CUSTOMER ID:::"+parent[i][0]); 
					}

				} 
			}  
			if(!isSingledataINsertSUccess)
			{   
				db.doRollback();
				db.Finalize();
				logger.info("User Creation fail for all Users");
				return IsUsrCreated;

			} else {
				db.doCommit();
				IsUsrCreated = true;
				logger.info("User Created Successfully for all Users");
				for(i=0;i<mobileData.length;i++)
				{	    
					String eportalUrl = BMConfig.getProperty("EPORTALURL");  
					String prompUrl = BMConfig.getProperty("PROMPTME");
					String e_name = "customer";
					String accNo = parent[0][1];  
					String template ="Dear " + e_name + " , Your MobileBanking user Id " + usrid +" . Kindly download the HPSCB mSys application from your respective store (Google/Apple/Windows). " + 
					"Please activate your Account after installation. For assistance , visit www.hpscb.com." ; 


					String reply = SMSLaneSend.SMSLaneSend(mobileData[i],template);
					System.out.println(reply); 
					//call method to save sms
					SMSLaneSend.saveSMSDetail(mobileData[i],accNo,usrid,"Mobile Banking",template,reply);

					URL  url=new URL(eportalUrl+"/OtherAppLogin.action?App=IB&Token=123456&userid="+java.net.URLEncoder.encode(usrid,"UTF-8") +"&mobile="+java.net.URLEncoder.encode(mobileData[i],"UTF-8"));
					//http://192.168.1.130:8082/Eportal_04082015/createUserDynamic.action?name=DOGRA&email=adarsh@gmail.com&mobile=9829751644
					URLConnection conn = url.openConnection();
					conn.setDoInput(true);
					conn.setDoOutput(true);
					BufferedReader br=new BufferedReader(new InputStreamReader(conn.getInputStream()));
					String line,retval="";
					while ((line = br.readLine()) != null) {
						retval += line;
					}
					br.close();
					URL  url1=new URL(prompUrl+"/app/IB/verify.php?name="+e_name+"&usermail="+""+"&userid="+usrid +"&mobile="+mobileData[i]); 
					URLConnection conn1 = url1.openConnection();
					conn1.setDoInput(true);
					conn1.setDoOutput(true);
					BufferedReader br1=new BufferedReader(new InputStreamReader(conn1.getInputStream()));
					String line1,retval1="";
					while ((line1 = br1.readLine()) != null) {
						retval1 += line1;
					}
					br1.close();
				} 
			}
		} catch(Exception e )
		{   logger.info("Exception While creatig user for Other Services "); 
		e.printStackTrace();
		IsUsrCreated = false;
		}finally{
			db.Finalize();
		}
		return IsUsrCreated;
	}
	public HashMap<String,String> insertInIbUsr(DataBaseClass db, String linkNum,String acc_Num, 
			String brnCode,String usrid, 
			String usrpass,String strDate,
			boolean isAlreadyCr,
			String holinkedno,String curcode,String curkid,String sname,String ename,String hname,String mkrid,String custRole,String mobile)
			throws RemoteException
			{
		String mobileData="";
		HashMap<String,String> map = new HashMap<String,String>() ; 
		BMLogger logger=new BMLogger(CentralBean.class);    
		String data[]=null;
		String flag=""; 
		//	DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean=new SelectDataBeanRowCol(db); 
		PasswordCrypt passcrpt=new PasswordCrypt();      
		String encrpass="";     
		if (linkNum.equals("") || linkNum.equals(null)) {
			linkNum= "0";
			holinkedno ="0";
		}  

		if(isAlreadyCr)
			encrpass=usrpass;
		else
			encrpass=passcrpt.getPasswordCrypted(usrpass);
		if (custRole.trim().equals("")) {		//set default role Customer  
			custRole="C" ;    
		}
		if(!sname.equals("")){
			sname = ""; hname = "";
		}

		try
		{
			String sql ="select ibusr_flag from s_ibusr where ibusr_usrid='"+usrid+"'";
			data=bean.getRow(1,sql);
			if(data==null)
				flag="N";  
			else
				flag=data[0];
			// ibusr_brlinkedno will store -->Parent Corporate User Customer Id
			// ibusr_brlinkedno will store -->All Child  Corporate User(Authorised Signatory CustomerID) Customer Id

			sql = "insert into s_ibusr"     
				+ "(ibusr_brlinkedno,ibusr_accno,ibusr_brncode,ibusr_usrid,ibusr_usrpass," +
				" ibusr_trnpass,ibusr_flag,ibusr_status,ibusr_crdate,ibusr_usrtype," +
				" ibusr_activedate,ibusr_holinkedno,ibusr_curcode,ibusr_curkid,ibusr_actSname," +
				" ibusr_ispassprinted,ibusr_usrEname,ibusr_usrHname,ibusr_mkrid,ibusr_mob,ibusr_custRole)"
				+ "values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"; //changes on 15/07/2008
			ArrayList<Object> argList = new ArrayList<Object>();
			argList.add(0,Integer.parseInt(linkNum));      
			argList.add(1,acc_Num);
			argList.add(2,brnCode);
			argList.add(3,String.valueOf(usrid));
			argList.add(4,encrpass);
			argList.add(5,encrpass);
			argList.add(6,flag);
			argList.add(7,"C");
			argList.add(8,DateTimeFunction.getIbDateTime());
			argList.add(9,"U");
			argList.add(10,"");
			argList.add(11,Integer.parseInt(holinkedno));
			argList.add(12,curcode); 
			argList.add(13,Integer.parseInt(curkid));
			argList.add(14,sname);
			argList.add(15,"Y");
			argList.add(16,ename); 
			argList.add(17,hname);
			argList.add(18,mkrid);
			argList.add(19,mobile);    
			argList.add(20,custRole);
			logger.info("SQl For Acc Ib Insert" + sql);
			db.db_Insert(sql,argList);
			map.put("insert", "YES");
		}
		catch(Exception e)
		{
			map.put("insert", "NO");
			logger.info("Error in insertInIbUsr finding");
			e.printStackTrace();
		}
		return map ; 
			}

	public String getOperatorList(String reqFrom[],int length)throws RemoteException{
		String data[][]=null;
		String result=null;
		String  sql="";
		if(length==1)
			sql="select service_category from s_service_operator WHERE SERVICE_TYPE='"+reqFrom[0]+"' GROUP BY SERVICE_TYPE,service_category ;";
		else if(length==2)
			sql="select service_operator,service_code from s_service_operator WHERE SERVICE_TYPE='"+reqFrom[0]+"' and service_category='"+reqFrom[1]+"';";
		System.out.println("Sql query is:"+sql);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sdb=new SelectDataBeanRowCol(db);
		try{
			data=sdb.getData(length, sql);
			if(data!=null){
				result="";
				for(int i=0;i<data.length;i++){
					for(int j=0;j<data[i].length;j++){
						result+=data[i][j];
						if(j!=data[i].length-1)
							result+="~";
					}
					result+="|";
				}
			}
		}
		catch(Exception e){
			e.printStackTrace();
			result=null;
		}

		finally{
			db.Finalize();
		}
		return result;

	}
	public String[] getMasterNumForPayment(String userId,String number,String serType)throws RemoteException{
		String phoneNum[]=null;
		String sql="";
		if(number==null)
			sql="Select distinct serviceNoMst_no from s_serviceNoMst where serviceNoMst_userid='"+userId+"' and serviceNoMst_type='"+serType+"';";
		else
			sql="insert into s_serviceNoMst(serviceNoMst_userid,serviceNoMst_no,serviceNoMst_type)values('"+userId+"','"+number+"','"+serType+"'); ";

		System.out.println("Sql query is:"+sql);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sdb=new SelectDataBeanRowCol(db);
		try{
			if(number==null){
				String[][] data=null;
				try
				{
					data=sdb.getData(1, sql);
				}
				catch(Exception e){
					e.printStackTrace();
					System.out.println("Error in service master");
				}
				if(data!=null){
					phoneNum=new String[data.length];
					for(int i=0;i<data.length;i++){
						for(int j=0;j<data[i].length;j++){
							phoneNum[i]=data[i][j];
						}
					}
				}
			}else{
				String id=db.db_Insert(sql);
				phoneNum=new String[1];
				phoneNum[0]=id;
			}
		}
		catch(Exception e){
			e.printStackTrace();
			result=null;
		}

		finally{
			db.Finalize();
		}
		return phoneNum;
	}

	public String[][] benList(String usrId)throws RemoteException
	{

		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] beninfo=null;
		String sql="";
		try
		{ 

			sql="select ibfund_accno,ibfund_nick,ibfund_payeename,ibfund_status from s_ibfundtrpayee where ibfund_userid='"+usrId+"'";
			beninfo=bean.getData(4,sql);
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return beninfo;
	}
	public String[][] searchbenList(String usrId, String benName,
			String accountNO, String benNic)throws RemoteException
			{

		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] beninfo=null;
		String sql="";
		try
		{ 


			if(benName.trim().equals(""))
				benName = " 1='1'";
			else
				benName = " ibfund_payeename='"+benName+"'";

			if(accountNO.trim().equals(""))
				accountNO = " 1='1'";
			else
				accountNO = " ibfund_accno='"+accountNO+"'";

			if(benNic.trim().equals(""))
				benNic = " 1='1'";
			else
				benNic = " ibfund_nick='"+benNic+"'";

			sql="select ibfund_accno,ibfund_nick,ibfund_payeename,ibfund_status from s_ibfundtrpayee where ibfund_userid='"+usrId+"' and "+benName+" and "+accountNO+" and "+benNic+" ";
			beninfo=bean.getData(4,sql);
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return beninfo ;
			}

	public String[][] favAccount(String usrId)throws RemoteException
	{
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] accinfo=null;
		String sql="";
		try
		{ 

			sql="select ibfund_accno,ibfund_payeename from s_ibfundtrpayee where ibfund_userid='"+usrId+"' and ibfund_FavFlag='Y'";
			accinfo=bean.getData(2,sql);
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return accinfo;


	}
	public String[][] fetchaccInfo(String accNo,String usrId)throws RemoteException
	{
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);

		String[][] accinfo=new String[1][6];
		String payeeID="";
		String payStatus="";
		String sql="";
		try
		{ 

			sql="select isnull(ibfund_kid,''),isnull(ibfund_status,'')  from s_ibfundtrpayee where ibfund_accno='"+accNo+"' and ibfund_userid='"+usrId+"'";
			ResultSet rs = db.db_select(sql);
			if(rs.next()){
				payeeID = rs.getString(1);
				payStatus = rs.getString(2);
			}
			if((!payeeID.equals(""))&&(payStatus.equalsIgnoreCase("Y"))){
				sql="select ibfund_kid,ibfund_accno,ibfund_nick,ibfund_ifscode,ibfund_payeename,ibfund_acctype  from s_ibfundtrpayee where  ibfund_accno='"+accNo+"'";
				accinfo=bean.getData(6,sql);
			}
			else if((!payeeID.equals(""))&&(payStatus.equalsIgnoreCase("N")))
			{
				accinfo[0][0]="confirm"; 
			}
			else
			{
				accinfo[0][0]="fav";   
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return accinfo;


	}
	public String makeFav(String pkid)throws RemoteException
	{
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String accinfo="";
		String payeeID="";
		String sql="";
		try
		{ 

			sql="select ibfund_kid  from s_ibfundtrpayee where ibfund_FavFlag='Y' and ibfund_kid='"+pkid+"'";
			ResultSet rs = db.db_select(sql);
			if(rs.next()){
				payeeID = rs.getString(1);
			}
			if(payeeID.equals("")){
				sql="update s_ibfundtrpayee set ibfund_FavFlag ='Y' where ibfund_kid='"+pkid+"'";
				db.db_update(sql);
				accinfo = "ok"; 
			}else
			{
				accinfo = "fav";   
			}

		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return accinfo;


	}


	public HashMap<Object,Object> getmnuList()throws RemoteException {
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] mnu=null;
		String[][] subMnu = null;
		HashMap<Object,Object> hmap = new HashMap<Object, Object>();
		HashMap<Object,Object> hmap1 = new HashMap<Object, Object>();
		//HashsubMenus= new HashMap<String, ArrayList<String[][]>>();
		String sql="";
		try
		{ 
			sql="select mnu_lvlsno,mnu_ename from s_mnu where mnu_lvlno =''";
			mnu=bean.getData(2,sql);
			for(int i=0;i<mnu.length;i++){

				sql="select isnull(mnu_lvlno,''),isnull(mnu_lvlsno,''),isnull(mnu_ename,'') from s_mnu where mnu_lvlno='"+mnu[i][0]+"'";
				subMnu =bean.getData(3,sql); 
				if(subMnu !=null){
					hmap.put(mnu[i][0], subMnu);
				}
				//arrlist.add(i,subMnu);
				// subMenus.put(mnu[i][0], arrlist);

			}
			hmap1.put("MainMenu", mnu);
			hmap1.put("SubMenu", hmap);
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return hmap1;

	}

	public ArrayList<Object> createDonor_IBUsr(String name, String mobileNo, String custid,String brnCode,String mkrid)throws RemoteException{
		DataBaseClass db=new DataBaseClass();
		String userid=brnCode.trim()+custid.trim();
		String sql="select count(*) as count from s_ibusr where ibusr_usrid='"+userid+"'";
		BMLogger logger=new BMLogger(this.getClass());
		boolean isCreated=true;
		ArrayList<Object> result=new ArrayList<Object>();
		try{
			db.doBeginTrans();
			logger.info("Select query for existing user id :"+sql);
			ResultSet rs=db.db_select(sql);
			if(rs!=null && rs.next()){
				int cnt=rs.getInt("count");
				if(cnt>0){
					logger.info("User id already exists");
					isCreated= false;
				}
			}
			logger.info("Create New user id="+isCreated);
			result.add(isCreated);
			if(isCreated){
				String usrpass=(MD5.getMd5String(mobileNo)).toLowerCase();
				String crDate=DateTimeFunction.getIbDateTime();

				sql="Insert into s_ibusr(ibusr_usrid,ibusr_usrpass,ibusr_trnpass,ibusr_flag,ibusr_crdate,ibusr_status,ibusr_brncode,"
					+ "ibusr_brlinkedno,ibusr_usrtype,ibusr_holinkedno,ibusr_curkid,ibusr_ispassprinted,"
					+ "ibusr_curcode,ibusr_usrename,ibusr_usrhname,ibusr_mkrid,ibusr_mob,ibusr_custrole) values ('"+userid+"','"+usrpass+"',"
					+ "'"+usrpass+"', 'Y','"+crDate+"','A','"+brnCode+"','"+custid+"','U','"+custid+"','2','2','Y','"+name+"','"+name+"','"+mkrid+"','"+mobileNo
					+ "','B');";
				logger.info("Insert query for user id is:"+sql);
				db.db_Insert(sql);

			}
			db.doCommit();
			result.add(userid);
			result.add("bank");

		}catch(Exception e){
			e.printStackTrace();
			isCreated=false;
			db.doRollback();
		}
		finally{
			db.Finalize();
		}
		return result;
	}

	public String[][] getParentCIBUsr(String custId) throws RemoteException
	{ 
		String sParentUsrdata[][]=null;
		String sql = "select * from s_ibusr where ibusr_Brlinkedno = '"+custId+"' and ibusr_holinkedNo = '"+custId+"' and ibusr_custRole = 'F' and  ibusr_status = 'A'";
		DataBaseClass db = new DataBaseClass();  
		SelectDataBeanRowCol sdbc = new SelectDataBeanRowCol(db);
		try {   
			sParentUsrdata = sdbc.getData(28, sql);  

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return sParentUsrdata;


	}

	public String deletefromibusr(String usrid) throws RemoteException
	{
		String sRespStr = "-1";
		String sql = "update s_ibusr set ibusr_status = 'D' where ibusr_usrid='"+usrid+"'";
		DataBaseClass db=new DataBaseClass();
		BMLogger logger = new BMLogger(CentralBean.class);
		try  
		{
			db.db_update(sql);
			logger.info("After Updateing Query with sql::"+sql);
			sRespStr = "1";      
		}catch(Exception e)
		{ 
			e.printStackTrace();
			logger.info("Exceptation while deleting/blocking user for Corporate User login with sql::"+sql);
		}
		finally { 
			db.Finalize() ;
		}
		return sRespStr;
	} 

	public String[][] fetchVoucherForCIBAuthorization(String sACSUSerID,String bulktrn_entryType,String sACSCustID,String sMode) throws RemoteException {      

		String aVoucherData[][]=null;     
		DataBaseClass db=new DataBaseClass();   
		SelectDataBeanRowCol sdbrc = new SelectDataBeanRowCol(db); 
		BMLogger logger = new BMLogger(CentralBean.class); 
		String sql = ""; 
		if(sMode.equals("CIBAuth"))
		{ // // data of all  user of Corp Banking  for authorization

			if(bulktrn_entryType.equalsIgnoreCase("EXCELFILE"))  
			{
				sql  = "select bulktrn_Accno ,bulktrn_name,bulktrn_ifsc,bulkTrn_amount,bulkTrn_remark,bulkTrn_kid,bulktrn_userid,bulktrn_fromaccount  from s_bulktrn where bulktrn_status = 'N' and bulktrn_entrytype = 'EXCELFILE' and bulktrn_userid  in (select ibusr_usrid from s_ibusr where  ibusr_brlinkedno = '" +sACSCustID+"' and ibusr_status = 'A' and ibusr_custRole in ('E','S','F')  and  ibusr_usrid not in ('"+sACSUSerID+"')) ";
				logger.info(sql);   

			}else if (bulktrn_entryType.equalsIgnoreCase("NEFTREQ")) {
				sql = "select ibreq_kid,ibreq_usrid,ibreq_accno,ibreq_date,ibreq_desc from s_ibreq where ibreq_type = 'NEFTREQ' and ibreq_flag = 'E' and ibreq_usrid in (select ibusr_usrid from s_ibusr where  ibusr_brlinkedno = '" +sACSCustID+"' and ibusr_status = 'A' and ibusr_custRole in ('E','S'))";

			} 	else { 
				sql = "select bulktrn_accno,bulktrn_name,bulktrn_ifsc,bulktrn_amount,bulktrn_remark,bulktrn_status,bulktrn_userid,bulkTrn_entryType,bulkTrn_kid,bulkTrn_mob,bulktrn_accType,bulktrn_fromaccount from s_bulkTrn" 
					+" where  bulkTrn_status = 'N'  and  bulktrn_userid  in (select ibusr_usrid from s_ibusr where  ibusr_brlinkedno = '" +sACSCustID+"' and ibusr_status = 'A' and ibusr_custRole in ('E','S'))  and "+     
					"bulktrn_entryType  in( 'SameBank','OtherBank')";
				logger.info(sql);
			} 
		} else if (sMode.equals("CIBEdit")) {  // data of logged in user for edition
			if(bulktrn_entryType.equalsIgnoreCase("EXCELFILE"))  
			{
				sql  = "select bulktrn_Accno ,bulktrn_name,bulktrn_ifsc,bulkTrn_amount,bulkTrn_remark,bulkTrn_kid,bulktrn_userid,bulktrn_fromaccount  from s_bulktrn where bulktrn_status = 'N' and bulktrn_entrytype = 'EXCELFILE' and bulktrn_userid ='"+sACSUSerID+"'";
				logger.info(sql);   

			}else if (bulktrn_entryType.equalsIgnoreCase("NEFTREQ")) {
				sql = "select ibreq_kid,ibreq_usrid,ibreq_accno,ibreq_date,ibreq_desc from s_ibreq where ibreq_type = 'NEFTREQ' and ibreq_flag = 'E' and ibreq_usrid ='"+sACSUSerID+"'";

			} 	else if(bulktrn_entryType.equalsIgnoreCase("SameBank") || bulktrn_entryType.equalsIgnoreCase("OtherType")) {  // condition seted for showing same other bank entries in one window
				sql = "select bulktrn_accno,bulktrn_name,bulktrn_ifsc,bulktrn_amount,bulktrn_remark,bulktrn_status,bulktrn_userid,bulkTrn_entryType,bulkTrn_kid,bulkTrn_mob,bulktrn_accType,bulktrn_fromaccount from s_bulkTrn" 
					+" where  bulkTrn_status = 'N'  and  bulktrn_userid ='"+sACSUSerID+"' and "+    
					"bulktrn_entryType  in( 'SameBank','OtherBank')";
				logger.info(sql); 
			}
			else {
				sql = "select bulktrn_accno,bulktrn_name,bulktrn_ifsc,bulktrn_amount,bulktrn_remark,bulktrn_status,bulktrn_userid,bulkTrn_entryType,bulkTrn_kid,bulkTrn_mob,bulktrn_accType,bulktrn_fromaccount from s_bulkTrn" 
					+" where  bulkTrn_status = 'N'  and  bulktrn_userid  in (select ibusr_usrid from s_ibusr where  ibusr_brlinkedno = '" +sACSCustID+"' and ibusr_status = 'A' and ibusr_custRole in ('E','S'))  and "+
					"bulktrn_entryType  in( 'SameBank','OtherBank')";
				logger.info(sql); 
			}

		} 
		try     
		{    
			if(bulktrn_entryType.equalsIgnoreCase("EXCELFILE"))  
			{     
				aVoucherData = sdbrc.getData(8, sql);          
			} else if (bulktrn_entryType.equalsIgnoreCase("NEFTREQ")) {
				String[][] neftData = sdbrc.getData(5, sql);    
				if(neftData[0][4]!=null)
				{
					aVoucherData= new String[neftData.length][16];     
					for(int i=0;i<neftData[0][4].length();i++) 
					{
						JSONObject jo = new JSONObject(neftData[i][4].toString());
						aVoucherData[i][0] = jo.getString("mode");          
						aVoucherData[i][1]= String.valueOf(jo.getInt("amount"));           
						aVoucherData[i][2] = jo.getString("beneficiaryName");
						aVoucherData[i][3] = jo.getString("remiAccount");
						aVoucherData[i][4] = jo.getString("beneAccount");
						aVoucherData[i][5]= jo.getString("address");
						aVoucherData[i][6] = jo.getString("address2");
						aVoucherData[i][7]= jo.getString("address3");
						aVoucherData[i][8] = jo.getString("remark");
						aVoucherData[i][9] = jo.getString("ifsc");
						aVoucherData[i][10] = jo.getString("accType");
						aVoucherData[i][11] = jo.getString("brncode"); 
						aVoucherData[i][12] = jo.getString("userid");
						aVoucherData[i][13] = jo.getString("BranchName");
						aVoucherData[i][14] = jo.getString("charge");
						aVoucherData[i][15] = neftData[i][0];
						logger.info("NEFT ENTRY DATA COLLECTED AND CONVERTED TO 2-D Array with size::::"+aVoucherData);    
					}
				}
			} else {
				aVoucherData = sdbrc.getData(12, sql);     
			}
			if(aVoucherData!=null)
			{
				logger.info("After  successfully fetching  fetchVoucherForCIBAuthorization Query with sql::"+sql);  
			} else {
				logger.info("No data found  with sql::"+sql);
			}
		}catch(Exception e)
		{ 
			e.printStackTrace();
			logger.info("Exceptation while fetchVoucherForCIBAuthorization with sql::"+sql);
		}
		finally{
			db.Finalize();
		}
		return aVoucherData;
	}

	public String updateFailSuccessPostIbFunfTranStatus(String bulktrn_kid,String purpose,String trd_kid) throws RemoteException 
	{     
		String sRetStatus = "false";

		DataBaseClass db=new DataBaseClass();
		BMLogger logger = new BMLogger(CentralBean.class);
		String sql = "",sql2=""; 
		if(purpose.equalsIgnoreCase("fail") || purpose.equalsIgnoreCase("EXCELFILE"))
		{
			sql ="update s_bulkTrn set bulkTrn_status = 'F' where bulkTrn_kid ='"+bulktrn_kid+"'";
			sql2 = "select bulkTrn_status from s_bulkTrn where bulkTrn_kid= ' "+bulktrn_kid+"'";
		}else if(purpose.equalsIgnoreCase("regect")) {
			sql ="update s_bulkTrn set bulkTrn_status = 'R' where bulkTrn_kid ='"+bulktrn_kid+"'"; 
			sql2 = "select bulkTrn_status from s_bulkTrn where bulkTrn_kid= ' "+bulktrn_kid+"'";
		} else if (purpose.equals("AddPayee") || purpose.equalsIgnoreCase("AddPayee")) { 
			sql = "update s_ibfundtrpayee set ibfund_status = 'R' where   ibfund_kid = ' "+bulktrn_kid+"'";
			sql2 = "select ibfund_status from s_ibfundtrpayee where ibfund_kid= ' "+bulktrn_kid+"'";	
		} else if(purpose.equalsIgnoreCase("INSERT_TRD")){
			sql ="update s_bulkTrn set bulkTrn_status = 'Y', TrdRefNo = '"+Integer.parseInt(trd_kid)+"' where bulkTrn_kid ='"+bulktrn_kid+"'";
			sql2 = "select bulkTrn_status from s_bulkTrn where bulkTrn_kid= ' "+bulktrn_kid+"'";
		}
		try{
			db.db_update(sql);
			logger.info("After Updating status");
			//	sql = "select ibfund_status from s_ibfundtrpayee where ibfund_kid= ' "+bulktrn_kid+"'";
			SelectDataBeanRowCol sdbrc = new SelectDataBeanRowCol(db);  
			String sretdata [][] = sdbrc.getData(1, sql2);
			if((sretdata[0][0].equalsIgnoreCase("F") )|| sretdata[0][0].equalsIgnoreCase("R") || sretdata[0][0].equalsIgnoreCase("Y")) 
			{
				sRetStatus = "true";
			}
		}catch(Exception e) {
			e.printStackTrace();

		}
		finally{
			db.Finalize();
		}
		return sRetStatus; 
	}
	public String[][] getPendingstatementforUnauthorisedTransaction(String sUserId, String saccNo,String fromDate,String toDate,String tranType,String reportFor) throws RemoteException {

		String aVoucherData[][]=null;  
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sdbrc = new SelectDataBeanRowCol(db);  
		BMLogger logger = new BMLogger(CentralBean.class);
		String sql = "";
		if(tranType.equalsIgnoreCase("EXCEL")){    
			tranType = "EXCELFILE";
			sql = " select bulktrn_accno,bulktrn_name,bulktrn_ifsc,bulktrn_amount,bulktrn_remark,"
				+" bulktrn_status,bulktrn_userid,bulkTrn_entryType,bulkTrn_kid,bulkTrn_date,bulkTrn_checkerdate,bulkTrn_fromaccount from s_bulkTrn where "
				+" bulkTrn_status = 'N' "
				+" and bulktrn_userid = '"+sUserId+"' and bulktrn_entryType ='"+tranType+"'"   
				+" and bulkTrn_date between '" + fromDate 	+ " 00:00:00' and '" 
				+ toDate + " 23:59:59'  and bulkTrn_fromaccount = '"+saccNo+"' "; 
		}else {
			sql = " select bulktrn_accno,bulktrn_name,bulktrn_ifsc,bulktrn_amount,bulktrn_remark,"
				+" bulktrn_status,bulktrn_userid,bulkTrn_entryType,bulkTrn_kid,bulkTrn_date,bulkTrn_checkerdate,bulkTrn_fromaccount from s_bulkTrn where "
				+" bulkTrn_status = 'N' "
				+" and bulktrn_userid = '"+sUserId+"' and bulktrn_entryType in ('IFT','SameBank','OtherBank','P2P','P2A','NEFTREQ','AddPayeeOB','AddPayeeSB')"   
				+" and bulkTrn_date between  '" + fromDate 	+ " 00:00:00' and '" 
				+ toDate + " 23:59:59'  and bulkTrn_fromaccount = '"+saccNo+"' ";
		}
		try   
		{    
			aVoucherData = sdbrc.getData(12, sql);
			if(aVoucherData!=null)
			{
				logger.info("After  successfully fetching  fetchVoucherForCIBPendingStatement Query with sql::"+sql);
			} else {
				logger.info("No data found  with sql::"+sql);
			}
		}catch(Exception e)
		{ 
			e.printStackTrace();
			logger.info("Exceptation while fetchVoucherForCIBPendingStatement with sql::"+sql);
		}
		finally{
			db.Finalize();
		}
		return aVoucherData;
	} 


	public  String[][]getACSUserId(String CorporateUserCustID)
	{ 
		String[][] ACSUserId = null;
		//HashMap  CorporateUserAcs = new HashMap<String, String>();  
		String sql = "select ibusr_kid,ibusr_usrid,ibusr_BrlinkedNo,ibusr_HolinkedNo,ibusr_UsrEname from s_ibusr where ibusr_status = 'A' and  ibusr_BrlinkedNo = '"+CorporateUserCustID+"'";
		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		try {
			ACSUserId = bean.getData(5, sql);     
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return ACSUserId;   

	}
	/*
		public String storeAcsUsrLmt (CorporateUsrLimitDto corplmtdto)
		{
			String result ="-1";
			String sql = "insert into s_ibutp(Ibutp_Custid,Ibutp_userid,Ibutp_atpid,Ibutp_type,Ibutp_amt) values ('"+Integer.parseInt(corplmtdto.getCbusrCustId())+"','"+corplmtdto.getUserId()+"','"+Integer.parseInt("12")+"','"+"E',"+corplmtdto.getEntrylimit()+")";
			String sql1 = "insert into s_ibutp(Ibutp_Custid,Ibutp_userid,Ibutp_atpid,Ibutp_type,Ibutp_amt) values ('"+Integer.parseInt(corplmtdto.getCbusrCustId())+"','"+corplmtdto.getUserId()+"','"+Integer.parseInt("12")+"','"+"P',"+corplmtdto.getPassinglimit()+")";
			   DataBaseClass db = new DataBaseClass();
			   SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
			   try {    
				db.doBeginTrans();
				db.db_Insert(sql);    
				db.db_Insert(sql1);  
				db.doCommit();
				result="1";    
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				db.doRollback();
				db.Finalize();

				result ="-2";
			}

			return result;   
		}

	 */

	public String  authorizeAddPayee(String accno,String userId, String ibfundkid,String purpose)
	{ 
		BMLogger logger=new BMLogger(CentralBean.class);
		// userId = custId of corp user
		String sReturnStatus="Fail";
		String sql = "";
		String payetype = "";
		String [][] updatedata=null;
		if(purpose.equalsIgnoreCase("AddPayeeSB"))	{
			payetype ="S";
		}
		else if(purpose.equalsIgnoreCase("AddPayeeOB"))
		{
			payetype = "O";
		}

		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		sql = "update s_ibfundtrpayee set ibfund_status = 'Y' where ibfund_accno = '"+accno+"' and ibfund_type= '"+payetype+"' and  ibfund_kid = '"+ibfundkid+"'";     
		logger.info(sql);
		try {   
			db.db_update(sql); 

			String selsql = "select ibfund_status from  s_ibfundtrpayee where ibfund_kid = '"+ibfundkid+"'";
			logger.info(sql);
			updatedata = bean.getData(1, selsql);  
			if(updatedata[0][0].equals("Y"))
			{
				sReturnStatus = "Success";  
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return sReturnStatus;

	}


	public String validateTxnPassword(String userId,String pass,String brncode )
	{
		String sql = "select  ibusr_trnpass from s_ibusr where ibusr_usrid ='"+userId+"' and ibusr_flag = 'Y' and  ibusr_status ='A' and ibusr_brncode = '"+brncode+"'" ; 
		DataBaseClass db = new DataBaseClass();
		BMLogger logger = new BMLogger(CentralBean.class);
		SelectDataBeanRowCol bean = new SelectDataBeanRowCol(db);
		String spassdata[][]= null;
		String sReturnStatus = "-1";
		logger.info("Password match sql :::"+sql);
		try {
			spassdata = bean.getData(1, sql);
			if(spassdata[0][0]!=null)
			{ 
				sReturnStatus = spassdata[0][0];  
				logger.info("Password match sql status  :::"+sReturnStatus);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			sReturnStatus="Exception";    
		}
		finally{
			db.Finalize();
		}
		return sReturnStatus;  
	}


	public String  editVoucherData(String remiAccount,String bulktrn_accno,String bulktrn_name ,String bulktrn_ifsc,double bulktrn_amount,String bulktrn_remark,String bulktrn_kid)throws RemoteException   
	{   
		String sRetval = "-1"; 

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();

		sql= "update s_BulkTrn set bulktrn_fromaccount = '"+remiAccount+"' ,bulktrn_accno = ' "+bulktrn_accno+"', bulktrn_name = '"+bulktrn_name+"', bulktrn_ifsc = '"+bulktrn_ifsc+"', bulktrn_amount = '"+bulktrn_amount+"',bulktrn_remark =  ' "+bulktrn_remark+" '  where bulktrn_kid =' "+bulktrn_kid+" ' ";    
		logger.info("update s_BulkTrn  is   "+sql);

		try{
			db.db_update(sql);
			sRetval = "1";				
		}catch(Exception e){
			e.printStackTrace();
			sRetval = "-1";
			db.doRollback(); 
		}finally{
			db.Finalize();
		}
		return sRetval;
	} 


	public String  editAddPayeeData(String ibfund_accno,String ibfund_ifscode ,String ibfund_nick,String ibfund_mobile,String ibfund_kid)throws RemoteException {
		{   
			String sRetval = "-1"; 

			BMLogger logger=new BMLogger(CentralBean.class);
			DataBaseClass db=new DataBaseClass();
			SelectDataBeanRowCol sdb = new SelectDataBeanRowCol(db);
			String retdata[][] = null;
			String date=DateTimeFunction.getIbDateTime(),sql = "";   

			sql =   "update s_ibfundtrpayee set ibfund_accno = '"+ibfund_accno+"' ,ibfund_ifscode = '"+ibfund_ifscode+"' ,ibfund_nick = '"+ibfund_nick+"', ibfund_mobile = '"+ibfund_mobile+"',ibfund_payeename = '"+ibfund_mobile+"' where ibfund_kid = '"+ibfund_kid.trim()+"'";  
			logger.info("update s_ibfundtrpayee  is   "+sql);

			try{

				db.db_update(sql);
				sRetval = "1";				
			}catch(Exception e){
				e.printStackTrace();
				sRetval = "-1";
				db.doRollback();
			}finally{
				db.Finalize();
			}
			return sRetval;
		}
	}    

	public String[][]  getQueryByRefNo(String TranNo) throws RemoteException   
	{
		String result[][] = null;
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sdb = new SelectDataBeanRowCol(db);
		String sql = "select  bulktrn_fromaccount,bulktrn_accno,bulktrn_ifsc,bulktrn_amount from s_bulkTrn where TrdRefNo = '"+TranNo+"'";
		try {
			result  = sdb.getData(4, sql);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		if(result!=null)
		{
			logger.info("Transaction fetched with given number is sudccess");
		} else {
			logger.info("No data found with given transaction number");
		}
		return result;
	}


	public JSONArray getDatafromChequeNumber(String chqNo, String accNo , DataBaseClass db)
	{
		SelectDataBeanRowCol sdb = new SelectDataBeanRowCol(db);
		JSONObject obj = new JSONObject();
		sql="select bulktrn_accno,bulktrn_name,bulkTrn_amount,"
			+ "bulktrn_fromaccount,bulktrn_chqno,bulktrn_kid,bulktrn_userid"
			+ " from s_bulktrn where bulktrn_status = 'N' and  bulktrn_chqNo='"+chqNo+"' and bulktrn_fromaccount = '" + accNo + "'" ;   
		System.out.println("Sql for :"+sql);

		JSONArray arr=new JSONArray();
		try {
			String data1[][]=sdb.getData(7,sql);
			if(data1!=null){
				for(int j=0;j<data1.length;j++)
				{
					JSONObject obj1=new JSONObject();
					obj1.put("beneAccNo",data1[j][0]);
					obj1.put("beneName",data1[j][1]);
					obj1.put("amount",data1[j][2]);
					obj1.put("fromAccount",data1[j][3]);
					obj1.put("chqNo",data1[j][4]);
					obj1.put("kid",data1[j][5]);
					obj1.put("mkrid",data1[j][6]);
					arr.put(obj1);
				}
			}  else 
				arr = null; 
		}
		catch (JSONException e) {
			// TODO: handle exception
			e.printStackTrace();
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

		return arr;
	}


	public String fetchcancelCheque(String fromdate,String toDate,String userId)
	{
		String resString=null,chqNo = "";
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sdb = new SelectDataBeanRowCol(db);
		JSONObject obj=new JSONObject();
		JSONArray objarr=new JSONArray();
		try {
			String sql="select sum(convert(numeric(10,5),bulkTrn_amount)) as amount,bulktrn_fromaccount,"   
				+ "bulktrn_chqno"
				+ " from s_bulktrn where bulktrn_status='R' and bulktrn_checkerdate between  '"+fromdate+"'  and  '"+toDate+"' and isnull(bulktrn_chqNo,'') "
				+ "not in ('')  group by bulktrn_chqno,bulktrn_fromaccount, bulktrn_date,bulktrn_checkerdate order by  bulktrn_chqno desc"; 
			System.out.println("Sql for sum:"+sql);
			String data[][]=sdb.getData(3, sql);
			if(data!=null){
				for(int i=0;i<data.length;i++){
					//	JSONObject obj=new JSONObject();
					chqNo=data[i][2]; /*caceleation cheque no will get from req param. */
					obj.put("transferAmt",data[i][0]);
					obj.put("debitAcc",data[i][1]);
					obj.put("chqNo",data[i][2]);
					sql="select bulktrn_accno,bulktrn_name,bulkTrn_amount,"
						+ "bulktrn_fromaccount,bulktrn_chqno,bulktrn_kid,bulktrn_userid"
						+ " from s_bulktrn where bulktrn_chqNo='"+chqNo+"';";
					System.out.println("Sql for :"+sql);
					String data1[][]=sdb.getData(7,sql);
					JSONArray arr=new JSONArray();   
					if(data1!=null){
						for(int j=0;j<data1.length;j++)
						{
							JSONObject obj1=new JSONObject();
							obj1.put("beneAccNo",data1[j][0]);
							obj1.put("beneName",data1[j][1]);
							obj1.put("amount",data1[j][2]);
							obj1.put("fromAccount",data1[j][3]);
							obj1.put("insertInIbUsr"
									+ "chqNo",data1[j][4]);
							obj1.put("kid",data1[j][5]);
							obj1.put("mkrid",data1[j][6]);
							arr.put(obj1);

						} 

						obj.put("transferDetail", arr);
						objarr.put(obj); 
					}
					resString=objarr.toString();
				}
			}
		} catch (JSONException  e) {
			// TODO: handle exception
		} catch (Exception  e) {
			// TODO: handle exception
		}
		return resString;
	}



	//METHODS FOR MULTIPLE TRANSACTION
	public String saveMultipleTransaction(String tranJson,String accountNo, String amount, String purpose, String remarks,String userid, String schDate, String schTime, String isSch,String isRecurring,String periodicity)throws RemoteException
	{
		int chqNo=0;
		String result="";
		DataBaseClass db=new DataBaseClass();
		try {

			chqNo=getChequeNumberForFundTransfer(userid,accountNo,db);
			String date=DateTimeFunction.getIbDateTime();
			String bulktrn_kid="";
			String schTrn_kd="";
			JSONArray tranArr=new JSONArray(tranJson);
			String tableName="s_bulktrn";
			if(isSch.equals("Y"))
				tableName="s_schBulkTrn";
			for(int i=0;i<tranArr.length();i++)
			{
				JSONObject obj = tranArr.getJSONObject(i);

				System.out.println("i="+i+"  obj="+obj.toString());
				//{"accType":"S","accNo":"005054000005","trAmt":"1111","name":"man6","benemobile":"","ifsc":""}

				String beneAccNo=obj.getString("accNo");
				String beneMob=obj.getString("benemobile");
				String accType=obj.getString("accType");
				String trAmt=obj.getString("trAmt");
				String name=obj.getString("name");
				String benemobile=obj.getString("accType");
				String ifsc=obj.getString("ifsc");
				if(trAmt.equals(""))
					trAmt="0.00";
				sql="Insert into s_bulktrn(bulktrn_accno,bulktrn_name,bulktrn_ifsc,bulktrn_amount,bulktrn_remark,bulktrn_status,"
					+ "bulktrn_userid,bulktrn_fromaccount,bulktrn_date,bulktrn_entryType,"
					+ "bulktrn_mob,bulktrn_accType,bulktrn_chqno)" +
					" values('"+beneAccNo+"','"+name+"','"+ifsc+"','"+BMDouble.parseDouble(trAmt)+"','"+remarks+"','T','"
					+ ""+userid+"','"+accountNo+"','"+date+"','BULKTRN','"+beneMob+"','"+accType+"','"+chqNo+"')";  
				System.out.println("Insert query is   "+sql);
				bulktrn_kid+=db.db_Insert(sql);
				if(!(bulktrn_kid.equals("") && bulktrn_kid.equals("-1")))
					bulktrn_kid+="~";

				/*result=bulkAccountTransfer(beneAccNo,name,ifsc,BMDouble.parseDouble(trAmt),remarks,
	        "N",userid,accountNo,purpose,beneMob,accType,chqNo,db);*/
			}
			if(isSch.equals("Y")){
				sql="insert into s_schtrn (schTrn_isRecurring,schtrn_periodicity,schTrn_amount,schTrn_schDate,schtrn_chqno) "
					+ "values('"+isRecurring+"','"+periodicity+"','"+amount+"','"+schDate+" "+schTime+"','"+chqNo+"');";
				schTrn_kd=db.db_Insert(sql);
			}
			result="CN"+chqNo+"|"+bulktrn_kid+"|"+schTrn_kd;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			result="";
		}finally{
			db.Finalize();
		}return result;
	}
	public int getChequeNumberForFundTransfer(String userid,String accountNo,DataBaseClass db){
		int chqNo=0;
		try {
			String sql="select max(convert(numeric(10),bulkTrn_chqNo)) as chqNo from s_bulkTrn where bulktrn_userid='"+userid+"'"
			+ " and bulktrn_fromaccount='"+accountNo+"'";
			System.out.println("Select query for chqno="+sql);
			ResultSet rs=db.db_select(sql);
			if(rs!=null && rs.next())
				chqNo=rs.getInt("chqNo");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		chqNo++;
		return chqNo;
	}
	public String[][] getScheduleTransactionList(String date)throws RemoteException{
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sdb=new SelectDataBeanRowCol(db);
		String sql="";
		BMLogger logger=new BMLogger(this.getClass());
		String[][] sReturnData=null;
		String d[]=date.split(" ");
		try{
			sql="select bulktrn_kid as kid,bulktrn_fromAccount as fromAcc,bulktrn_accno as toAcc,"
				+ "bulktrn_amount as amount,schtrn_isRecurring as isRecurring,"
				+ "schtrn_periodicity as periodicity ,bulktrn_remark as remarks ,schtrn_schDate as scheduleDate, schtrn_chqNo,bulktrn_status"
				+ ",TrdRefNo,bulktrn_userid from s_bulktrn,s_schtrn "
				+ "where schtrn_chqno=bulktrn_chqno  and bulktrn_status not in ('N','D','R') and schtrn_schDate between '"+d[0]+" "+"00:00:00' and '"+d[0]+" 23:59:59'";
			logger.info("sqlect query:"+sql);
			sReturnData=sdb.getData(12, sql);
			if(sReturnData!=null){
				//	  for(int i=0;i<sReturnData.length;i++){
				//		  String kid=sReturnData[i][0];
				//		  sql="update s_bulktrn set bulktrn_status='Y' where bulktrn_kid='"+kid+"'";
				//		  db.db_update(sql);

				//	  }
			}
		}catch (Exception  e) {
			//e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return sReturnData;
	}
	public void updateScheduleDate(String[] sreturndata) {
		DataBaseClass db=new DataBaseClass();
		String sql="";
		try{
			// for(int i=0;i<sreturndata.length;i++){
			String isRecurring=sreturndata[4];
			String periodicity=sreturndata[5];
			if(isRecurring!=null && isRecurring.equals("R")){
				if(periodicity!=null && !periodicity.equals("")){
					int days=0;
					if(periodicity.equals("D"))
						days=1;
					else if(periodicity.equals("W"))
						days=7;
					else if(periodicity.equals("F"))
						days=14;
					else if(periodicity.equals("M"))
						days=30;
					else if(periodicity.equals("B"))
						days=60;
					else if(periodicity.equals("Q"))
						days=120;
					else if(periodicity.equals("H"))
						days=180;
					else if(periodicity.equals("Y"))
						days=365;
					java.util.Date schDate=DateTimeFunction.relativeDate(DateTimeFunction.strToUtilDate(DateTimeFunction.sqlDateStrToStr(sreturndata[7])), days);
					sql="update s_schtrn set schtrn_schdate='"+DateTimeFunction.utilDateToSqlDate(schDate)+" "+sreturndata[7].split(" ")[1]+"' where schtrn_chqno='"+sreturndata[8]+"';";
					db.db_update(sql);
				}
			}
			//}
		}catch (Exception  e) {
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
	}
	public String multipleTransactionOperations(String userid, String operation){
		String result="false";
		String sql="";
		DataBaseClass db=new DataBaseClass();
		BMLogger logger=new BMLogger(this.getClass());
		String date=DateTimeFunction.getIbDateTime();
		try{
			JSONObject obj=new JSONObject(operation);
			String oper=obj.getString("operation");
			logger.info("operation:"+oper);
			if(oper.equalsIgnoreCase("delete By kid")){
				String kid=obj.getString("kid");
				sql="update s_bulkTrn set bulktrn_status='D', bulktrn_checkerdate = '"+date+"' where bulktrn_kid='"+kid+"'";
				logger.info("Sql query:   "+sql);
				db.db_update(sql);
				result="true";
			}else if(oper.equalsIgnoreCase("delete By ChqNo")){
				String kid=obj.getString("kid");
				sql="update s_bulkTrn set bulktrn_status='D', bulktrn_checkerdate = '"+date+"' where bulktrn_chqNo in ("+kid+") and bulktrn_userid='"+userid+"'";   
				logger.info("Sql query:   "+sql);
				db.db_update(sql);
				result="true";
			}else if(oper.equalsIgnoreCase("confirm")){
				String kid1=obj.getString("BulkTrnkid");
				String kid2=obj.getString("schTrnKid");
				String chqNo=obj.getString("chqNo");
				sql="update s_bulkTrn set bulktrn_status='N' ,bulktrn_chqNo='"+chqNo.substring(2)+"' where bulktrn_kid  in ("+kid1+")";   
				logger.info("Sql query:   "+sql);
				db.db_update(sql);
				if(!kid2.equals(""))
				{ 
					sql="update s_schTrn set schTrn_chqNo='"+chqNo.substring(2)+"' where schTrn_kid in ("+kid2+");";
					logger.info("Sql query:   "+sql);
					db.db_update(sql);
				}
				//insert in case of schedule transaction
				result="true";
			}
			else if(oper.equalsIgnoreCase("cancel By ChqNo")){
				String kid=obj.getString("kid");
				sql="update s_bulkTrn set bulktrn_status='R',bulktrn_checkerdate = '"+date+"'  where bulktrn_chqNo in ("+kid+") and bulktrn_userid='"+userid+"'"; /*D for delete R for cancel/reject. Done by ritu V. in work done of geetika*/   
				logger.info("Sql query:   "+sql);
				db.db_update(sql);
				result="true";  
			}else if(oper.equalsIgnoreCase("reschedule")){
				String kid=obj.getString("kid");
				String schTime=obj.getString("schDate");
				sql="update s_schtrn set  schtrn_schDate='"+schTime+"' where  schtrn_chqno in (select bulktrn_chqno "
				+ "from s_bulktrn where bulktrn_chqno='"+kid+"' and bulktrn_userid='"+userid+"')";

				logger.info("Sql query:   "+sql);
				db.db_update(sql);
				result="true";
			}
			else if(oper.equalsIgnoreCase("update")){
				String kid=obj.getString("kid");
				String amount=obj.getString("amount");
				sql="update s_bulktrn set bulktrn_amount='"+amount+"' where bulktrn_kid='"+kid+"'";
				logger.info("Sql query:   "+sql);
				db.db_update(sql);
				result="true";
			}else if(oper.equalsIgnoreCase("authorize")){
				JSONArray strArr=obj.getJSONArray("authorizeDetails");
				ArrayList<JSONObject> list =new ArrayList<JSONObject>();
				ArrayList<JSONObject> faillist =new ArrayList<JSONObject>();
				for(int i=0;i<strArr.length();i++){
					JSONObject jsonObj=strArr.getJSONObject(i);
					String kid=jsonObj.getString("kid");
					String mkrid="";
					JSONObject resObj=new JSONObject();
					sql="select bulktrn_userid as makerid from s_bulktrn where bulktrn_kid='"+kid+"'";
					logger.info("query for maker id="+sql);
					ResultSet rs=db.db_select(sql);
					if(rs!=null && rs.next())
						mkrid=rs.getString("makerid");
					if(!mkrid.equals("") && mkrid.equals(userid)){
						resObj.put("kid", jsonObj.getString("chqNo"));
						resObj.put("fromAcc",jsonObj.getString("fromAcc"));
						resObj.put("toAcc",jsonObj.getString("beneAcc"));
						resObj.put("Trdid","0");
						resObj.put("message","Maker and checker cann't be same");
						faillist.add(resObj);
					}
					else{
						String beneAccNo = jsonObj.getString("beneAcc");
						String amount = jsonObj.getString("amount");
						String accountNo = jsonObj.getString("fromAcc");
						String chqNo = jsonObj.getString("chqNo");
						String isResch = jsonObj.getString("isResch");
						if(isResch.equals("N")){
							String[][] beneDetails=fetchPayeewithPayAcc(mkrid,beneAccNo);
							if(beneDetails!=null){
								updateStatusBulkTransfer(beneAccNo,"0", userid, kid,"BULKTRN",Double.parseDouble(amount),"");   
								resObj.put("fromAcc", accountNo);
								resObj.put("chqNo", chqNo);
								resObj.put("toAcc", beneAccNo);
								resObj.put("amount", amount);
								resObj.put("kid", kid);
								resObj.put("beneType", beneDetails[0][4]);
								resObj.put("beneName", beneDetails[0][5]);
								resObj.put("beneifsc", beneDetails[0][3]);
								resObj.put("mkrid", mkrid);
								list.add(resObj);
							}
						}
						else{
							sql="update s_bulktrn set bulktrn_status='A' where bulktrn_chqNo in ("+chqNo+")";
							db.db_update(sql);
							resObj.put("kid", jsonObj.getString("chqNo"));
							resObj.put("fromAcc",jsonObj.getString("fromAcc"));
							resObj.put("toAcc",jsonObj.getString("beneAcc"));
							resObj.put("Trdid","0");
							resObj.put("message","Transaction Scheduled");
							faillist.add(resObj);
						}
					}
				}
				JSONObject obj1=new JSONObject();
				obj1.put("faillist", faillist);
				obj1.put("voucherlist", list);


				result=obj1.toString();
			}
		}catch(Exception e){
			e.printStackTrace();
			result="false";
		}
		finally{
			db.Finalize();
		}
		return result;

	}

	public String fetchMultipleTransactionForAuthorization(String userid,String accNo,String chqNo,String purpose)throws RemoteException{
		String resString=null;
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sdb = new SelectDataBeanRowCol(db);
		JSONObject obj=new JSONObject();
		JSONArray objarr=new JSONArray();
		try{
			if(purpose.equalsIgnoreCase("echk")){  
				JSONArray retArry = getDatafromChequeNumber(chqNo,accNo,db);
				if(retArry!=null){
					obj.put("transferDetail", retArry);
					//,'"+schDate+" "+schTime+"','"+isSch+"'
					String sql="select sum(convert(numeric(10,5),bulkTrn_amount)) as amount,bulktrn_fromaccount,"
						+ "bulktrn_chqno"
						+ " from s_bulktrn where bulktrn_status='N' and isnull(bulktrn_chqNo,'')= '"+chqNo+"'"
						+ " group by bulktrn_chqno,bulktrn_fromaccount order by sum(convert(numeric(10,2),bulkTrn_chqNo)) desc";
					System.out.println("Sql for sum:"+sql);
					String data[][]=sdb.getData(3, sql);
					if(data!=null){
						obj.put("transferAmt",data[0][0]);  
						obj.put("debitAcc",data[0][1]);
						obj.put("chqNo",data[0][2]);
					}    
					objarr.put(obj);
				}else
				{
					return null;  
				}
			} else {
				/* for geetika use purpose */
				// JSONArray objarr=new JSONArray();
				String sql="select sum(convert(numeric(10,2),bulkTrn_amount)) as amount,bulktrn_fromaccount,"
					+ "bulktrn_chqno,schtrn_schDate,case  when schtrn_isRecurring='R' then 'Y'"
					+ " when schtrn_isRecurring='O' then 'Y'"
					+ " else 'N' end as isResch"
					+ " from s_bulktrn  left join s_schtrn on schtrn_chqno=bulktrn_chqno"
					+ " where bulktrn_status = 'N' and isnull(bulktrn_chqNo,'') "
					+ "not in ('')  group by bulktrn_chqno,bulktrn_fromaccount,schtrn_schDate,schtrn_isRecurring "
					+ "order by convert(numeric(10),bulkTrn_chqNo) desc";
				System.out.println("Sql for sum:"+sql);
				String data[][]=sdb.getData(5, sql);
				if(data!=null){
					for(int i=0;i<data.length;i++){
						obj=new JSONObject();
						chqNo=data[i][2]; /*caceleation cheque no will get from req param. */
						obj.put("transferAmt",data[i][0]);
						obj.put("debitAcc",data[i][1]);
						obj.put("chqNo",data[i][2]);
						if(!data[i][3].equals(""))
							obj.put("reschDate",DateTimeFunction.sqlDateStrToStr(data[i][3].split(" ")[0])+" "+data[i][3].split(" ")[1].substring(0,5));
						else
							obj.put("reschDate","-");
						if(data[i][4]!=null && data[i][4].equals("Y"))
							obj.put("isSch",data[i][4]);
						else
							obj.put("isSch","N");
						JSONArray retArry = getDatafromChequeNumber(chqNo,data[i][1],db);
						obj.put("transferDetail", retArry);

						//}   
						objarr.put(obj);
					}
					//resString=objarr.toString();
				}
			}


			resString=objarr.toString();
		} catch(Exception e){
			e.printStackTrace();
			resString=null;

		}
		finally{
			db.Finalize();
		}
		return resString;

	}


	public String  bulkAccountTransfer(String accnoFromFile,String acName,String ifcCode,
			double amount,String remark,String status,String id,String acno,
			String bulktrn_entryType,String mobile,String accType, String schDate,
			String schTime, String isSch, String paymentType, String periodicity)throws RemoteException
			{
		int chqNo=-1;
		String sRetval = "-1";
		System.out.println("Bran method called");
		BMLogger logger=new BMLogger(CentralBean.class);
		String date=DateTimeFunction.getIbDateTime();
		DataBaseClass db=new DataBaseClass();
		sql = "";
		if(bulktrn_entryType.equalsIgnoreCase("EXCELFILE"))
		{
			sql="Insert into s_BulkTrn(bulktrn_accno,bulktrn_name,bulktrn_ifsc,bulktrn_amount,bulktrn_remark,bulktrn_status,bulktrn_userid,bulktrn_fromaccount,bulktrn_date,bulktrn_entryType)" +
			" values('"+accnoFromFile+"','"+acName+"','"+ifcCode+"','"+amount+"','"+remark+"','"+status+"','"+id+"','"+acno+"','"+date+"','"+bulktrn_entryType+"')";
			logger.info("Insert query is   "+sql);
		} else if(bulktrn_entryType.equalsIgnoreCase("SingleTrn"))
		{
			chqNo=getChequeNumberForFundTransfer(id,acno,db);
			sql="Insert into s_BulkTrn(bulktrn_accno,bulktrn_name,bulktrn_ifsc,bulktrn_amount,bulktrn_remark,bulktrn_status,bulktrn_userid,bulktrn_fromaccount,bulktrn_date,bulktrn_entryType,bulktrn_mob,bulktrn_accType,bulktrn_chqNo)" +
			" values('"+accnoFromFile+"','"+acName+"','"+ifcCode+"','"+amount+"','"+remark+"','"+status+"','"+id+"','"+acno+"','"+date+"','"+bulktrn_entryType+"','"+mobile+"','"+accType+"','"+chqNo+"')";  
			logger.info("Insert query is   "+sql);
		} else {
			sql="Insert into s_BulkTrn(bulktrn_accno,bulktrn_name,bulktrn_ifsc,bulktrn_amount,bulktrn_remark,bulktrn_status,bulktrn_userid,bulktrn_fromaccount,bulktrn_date,bulktrn_entryType,bulktrn_mob,bulktrn_accType)" +
			" values('"+accnoFromFile+"','"+acName+"','"+ifcCode+"','"+amount+"','"+remark+"','"+status+"','"+id+"','"+acno+"','"+date+"','"+bulktrn_entryType+"','"+mobile+"','"+accType+"')";  
			logger.info("Insert query is   "+sql);
		}
		try{
			// db.doBeginTrans();
			String kid=db.db_Insert(sql);
			if(bulktrn_entryType.equalsIgnoreCase("SingleTrn"))
			{
				sql="insert into s_schtrn (schtrn_chqno,schTrn_isRecurring,schtrn_periodicity,schTrn_amount,"
					+ "schTrn_schDate) values('"+chqNo+"','"+paymentType+"','"+periodicity+"','"+amount+"','"+schDate+" "+schTime+"');";
				db.db_Insert(sql);
				sRetval=kid+"~"+chqNo; 


			}
			else
				sRetval = "1";


		}catch(Exception e){
			e.printStackTrace();
			sRetval = "-1";
			//db.doRollback();
		}
		finally{
			db.Finalize();
		}
		return sRetval;
			}




	public String savePullRequest(String fromVirtualId, String amount, String req_AccountNo,String idtype,String remarks)
	{
		DataBaseClass db = new DataBaseClass();
		BMLogger logger = new BMLogger(CentralBean.class);
		//DateTimeFunction.strToSqlDate(DateTimeFunction.getIbDateTime());
		String success = "1";
		String kid="" ; 
		try {
			db.doBeginTrans();
			if (idtype.equalsIgnoreCase("accno")||idtype.equalsIgnoreCase("mob")||idtype.equalsIgnoreCase("mailid")) {
				String ibusrkid="Select ibusr_kid from s_ibusr where ibusr_"+idtype+"='"+fromVirtualId+"'";
				ResultSet rs=db.db_select(ibusrkid); 
				if(rs!=null && rs.next()){   
					String ibusr_kid = rs.getString("ibusr_kid");
					String saveSQL = "Insert into s_ibpulltranreq (pull_virtualkid,pull_reqfrom,pull_amount,pull_status,pull_reqdate,pull_ibusrkid,pull_reqremark) " +
					" values('0','"+req_AccountNo+"','"+amount+"','R',getdate(),'"+ibusr_kid+"','"+remarks+"')";
					kid = db.db_Insert(saveSQL);
					logger.info("Request saved with sql:::"+saveSQL);   
				} 
			}
			else {
				String fetchVID = "Select virtual_kid,virtual_ibusrkid from s_ibvirtualAddress where virtual_virtualaddress='"+fromVirtualId+"'"; 
				ResultSet rs=db.db_select(fetchVID);
				if(rs!=null && rs.next()){   
					int pull_virtualkid = rs.getInt("virtual_kid");
					int pull_ibusrkid=rs.getInt("virtual_ibusrkid");
					String saveSQL = "Insert into s_ibpulltranreq (pull_virtualkid,pull_reqfrom,pull_amount,pull_status,pull_reqdate,pull_ibusrkid) " +
					" values('"+pull_virtualkid+"','"+req_AccountNo+"','"+amount+"','R',getdate(),'"+pull_ibusrkid+"')";
					kid=db.db_Insert(saveSQL);
					logger.info("Request saved with sql:::"+saveSQL);   
				} 
			}
			db.doCommit();
			if(kid.equals("")){         
				success = "-1";
			}

		}catch (Exception e) {
			// TODO Auto-generated catch block
			db.doRollback();
			e.printStackTrace();
			success = "-1";			
		}
		finally { 
			db.Finalize() ; 
		}

		logger.info("Request saved with sql:::"+fromVirtualId+"Amount::"+amount+"req_AccountNo:::"+req_AccountNo);   
		return success;  

	}

	public String savePushRequest(String toVirtual_KID,String perm_remark)
	{
		DataBaseClass db = new DataBaseClass();
		BMLogger logger = new BMLogger(CentralBean.class);
		String success = "Request Updated Successfully";  
		try {
			db.doBeginTrans();
			String updSQL = "update s_ibpulltranreq set pull_status = 'A', pull_permiterremark = '"+perm_remark+"' where pull_kid= '"+toVirtual_KID+"'";
			db.db_update(updSQL); 
			logger.info("Request updated with sql:::"+updSQL);   
			db.doCommit();
		}catch (Exception e) {
			// TODO Auto-generated catch block
			db.doRollback();
			e.printStackTrace();
			success = "Request Not Updated";   
		} 
		finally { 
			db.Finalize() ; 
		}
		logger.info("Request updated with sql:::"+toVirtual_KID);       
		return success; 

	} 

	public String  fetchPullRequest(String userid) {
		DataBaseClass db = new DataBaseClass();
		BMLogger logger = new BMLogger(CentralBean.class);
		String responce = "1"; 
		try {
			logger.info("fetchPullRequest:::"+userid);    
			ArrayList<String> inList  = new ArrayList<String>();
			inList.add(userid);
			ArrayList outList = db.execStoredProc("getPullReqData", inList, 0, 1);      
			ResultSet rs = (ResultSet) outList.get(0);
			SelectDataBean bean = new SelectDataBean(db);
			if(rs.next()){
				int iColumn = 5;
				String temp[][] = bean.convertResultSetToArray(rs,iColumn);
				ArrayList<JSONObject> jarry=new ArrayList<JSONObject>();
				JSONObject jo = new JSONObject();
				for (int i = 0 ; i<temp[0].length;i++){
					jo=new JSONObject();
					jo.put("pullKid", temp[0][i]);
					jo.put("amount", temp[1][i]);
					jo.put("accountNo", temp[2][i]);
					jo.put("requester_remark", temp[3][i]);    
					jo.put("requester_name", temp[4][i]);
					jarry.add(jo);      
				} 

				responce = jarry.toString(); 
			}
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			responce = "-1";  
		} 
		finally { 
			db.Finalize() ; 
		}
		logger.info("Request fetched for with sql:::"+userid);       
		return responce  ;  

	}
	public String createVirtualAdd(String accNo,String virtualAddressId,String mobileno,String landlineno,String adharno,String usrid)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db=new SelectDataBeanRowCol(db);
		String b="Failure";
		String[][] ibusrkid=null;
		String sql=null, isMobExts = "", isLandNoExts = "", isAadharExts = "";
		try
		{
			if(!mobileno.equals("")) {
				sql = "SELECT COUNT(*) FROM s_ibvirtualAddress WHERE virtual_virtualAddress ='"+mobileno+"'";
				String data[][] = sel_db.getData(1,sql);
				if(!data[0][0].equals("0"))
					isMobExts = "Y";
			}
			if(!landlineno.equals("")) {
				sql = "SELECT COUNT(*) FROM s_ibvirtualAddress WHERE virtual_virtualAddress ='"+landlineno+"'";
				String data[][] = sel_db.getData(1,sql);
				if(!data[0][0].equals("0"))
					isLandNoExts = "Y";
			}
			if(!adharno.equals("")) {
				sql = "SELECT COUNT(*) FROM s_ibvirtualAddress WHERE virtual_virtualAddress ='"+adharno+"'";
				String data[][] = sel_db.getData(1,sql);
				if(!data[0][0].equals("0"))
					isAadharExts = "Y";
			}

			db.doBeginTrans();

			sql="Select ibusr_kid from s_ibusr where ibusr_usrid='"+usrid+"'";
			ibusrkid=sel_db.getData(1,sql);
			if(!virtualAddressId.equals("") && !accNo.equals("")) {
				//sql="insert into s_ibvirtualAddress(virtual_kid,virtual_ibusrkid,virtual_virtualAddress,virtual_status) values('"+ usrid[i]+"','"+strTime+"','A','"+adminid+"','0',0,"+kid[0][0]+")";
				sql="Select Count(*) from s_ibvirtualAddress where virtual_virtualAddress='"+virtualAddressId+"'";
				String data[][] = sel_db.getData(1,sql);
				if(data[0][0].equals("0")){
					sql="insert into s_ibvirtualAddress(virtual_ibusrkid,virtual_virtualAddress,virtual_status,virtual_virtualaccno)values('"+ibusrkid[0][0]+"','"+virtualAddressId+"','A','"+accNo+"')";
					db.db_Insert(sql);
				}
			}


			if((!mobileno.equals("")) && isMobExts.equalsIgnoreCase("")) {
				sql="insert into s_ibvirtualAddress(virtual_ibusrkid,virtual_virtualAddress,virtual_status)values('"+ibusrkid[0][0]+"','"+mobileno+"','A')";
				db.db_Insert(sql);
			}
			if((!landlineno.equals("")) && isLandNoExts.equalsIgnoreCase("")) {
				sql="insert into s_ibvirtualAddress(virtual_ibusrkid,virtual_virtualAddress,virtual_status)values('"+ibusrkid[0][0]+"','"+landlineno+"','A')";
				db.db_Insert(sql);
			}
			if((!adharno.equals("")) && isAadharExts.equalsIgnoreCase("")) {
				sql="insert into s_ibvirtualAddress(virtual_ibusrkid,virtual_virtualAddress,virtual_status)values('"+ibusrkid[0][0]+"','"+adharno+"','A')";
				db.db_Insert(sql);
			}


			logger.info("Virtual Address Creation Query" + sql);
			db.doCommit();
			b="Success";
		}
		catch(Exception e)
		{
			db.doRollback();
			logger.info("Error in Inserting Virtual Address");
			e.printStackTrace();
			b="Failure";
		}
		finally
		{
			db.Finalize();
		}

		return b;
	}

	//checkVirtualAdd
	public String checkVirtualAdd(String virtualAddressId)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db=new SelectDataBeanRowCol(db);
		String b="Failure";
		String[] ibusrkid=null;
		String sql=null;
		try
		{
			sql="Select virtual_ibusrkid from s_ibvirtualAddress where virtual_virtualAddress='"+virtualAddressId+"'";
			ibusrkid=sel_db.getRow(1,sql);
			if (ibusrkid!=null)
				b="Failure";
			else
				b="Success";	
		}
		catch(Exception e)
		{
			e.printStackTrace();	
		}
		finally
		{
			db.Finalize();
		}

		return b;
	}
	public String[][] fetchDataForFtr(String data)throws RemoteException{
		String fetchData[][]=null;
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		try{
			sql="select ibusr_accno,ibusr_usrEname,ibusr_mob,ibusr_Brlinkedno from s_ibvirtualAddress,s_ibusr where virtual_virtualAddress='"+data+"' and virtual_ibusrkid= ibusr_kid";
			fetchData=bean.getData(4,sql);

		}
		catch (Exception e) {
			e.printStackTrace();    
		}
		finally{
			db.Finalize();
		}
		return fetchData;
	}

	public String[][] fetchFavAcc(String userid,String mode){
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] res=null;
		try	{

			sql=" select ibfund_mobile,ibfund_accno,ibfund_type,ibfund_payeename, "
				+"ibfund_acctype,ibfund_kid ,ibusr_accno from s_ibusr,s_ibfundtrpayee where ibusr_usrid=ibfund_userid and ibfund_userid = '"+userid+"'  and ibfund_type ='"+ mode + "' and ibfund_status = 'Y' and ibfund_FavFlag = 'Y'";
			res = bean.getData(7,sql);
		}
		catch(Exception e)	{
			logger.fatal("Error in ibLogInfo(1) finding");
			e.printStackTrace();
		}
		finally	{
			db.Finalize();
		} 
		return res;
	}


	public String makePayeeAndFavAcc(String beneAccNo, String benName,
			String mobile, String ifcs, String userID, String accType,String modFav)throws RemoteException {

		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		String sql="";
		String success="Success";
		String bName="";
		String favFlag = "N";
		try	{ 
			if(benName.length()>5){
				bName= benName.substring(0,5);
			}
			if(modFav.equalsIgnoreCase("true")){
				favFlag = "Y";
			}
			db.doBeginTrans();
			SelectDataBeanRowCol sdb = new SelectDataBeanRowCol(db) ;
			sql = "select ibfund_status,ibfund_FavFlag from s_ibfundtrpayee where ibfund_userid = '" + userID+ "' and ibfund_accno = '" +beneAccNo+ "'" ;
			String[] payeeRow = sdb.getRow(2, sql);

			if(payeeRow==null){
				sql="insert into s_ibfundtrpayee(ibfund_accno,ibfund_nick,ibfund_mobile,ibfund_email,ibfund_brncode," +
				"ibfund_linkedno,ibfund_payeename,ibfund_ifscode,ibfund_userid,ibfund_type,ibfund_acctype,ibfund_status,ibfund_FavFlag)" +
				" values('"+beneAccNo+"','"+bName+"','"+mobile+"','','',0,'"+benName+"','"+ifcs+"','"+userID+"','S','"+accType+"','Y','"+ favFlag +"')";

				db.db_Insert(sql);
			}
			else{
				sql="update s_ibfundtrpayee set ibfund_FavFlag='"+favFlag+"', ibfund_status = 'Y' where ibfund_userid='"+userID+"' and ibfund_accno='"+beneAccNo+"'";
				db.db_update(sql);
			}
			db.doCommit();
		}
		catch(Exception e){
			db.doRollback();
			logger.info("Error in existUserIbInfo finding");
			e.printStackTrace();
		}
		finally	{
			db.Finalize();
		}
		return success ;
	}


	public String forBenFtrn(String usrID, String accNo, String mode)throws RemoteException {
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		String sql="";
		String success="Success";
		try	{ 
			db.doBeginTrans();
			if(mode.equalsIgnoreCase("mkFavAcc")){
				sql="update s_ibfundtrpayee set ibfund_FavFlag='Y', ibfund_status='Y' where ibfund_userid='"+usrID+"'  and ibfund_accno='"+accNo+"'";
			}
			else if(mode.equalsIgnoreCase("rmFav")){
				sql="update s_ibfundtrpayee set ibfund_FavFlag='N', ibfund_status='Y' where ibfund_userid='"+usrID+"' and ibfund_accno='"+accNo+"'";
			}
			else if(mode.equalsIgnoreCase("rmBean") || mode.equalsIgnoreCase("rmfrmList")){
				sql="update s_ibfundtrpayee set  ibfund_status='N',ibfund_FavFlag='N' where ibfund_userid='"+usrID+"' and ibfund_accno='"+accNo+"'";
			}

			db.db_update(sql);
			db.doCommit();

		}
		catch(Exception e){
			db.doRollback();
			success="unSuccess";
			logger.info("Error in existUserIbInfo finding");
			e.printStackTrace();
		}
		finally	{
			db.Finalize();
		}
		return success;
	}
	public String[][] fetchPayeeForDel(String userid)
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] res=null;
		try
		{
			sql="select ibfund_nick,ibfund_mobile,ibfund_accno,ibfund_ifscode,ibfund_type,ibfund_payeename," +
			"ibfund_acctype,ibfund_kid from s_ibfundtrpayee where ibfund_userid = '"+userid+"' and  ibfund_status = 'Y'";

			res = bean.getData(8,sql);  
		}
		catch(Exception e)
		{
			logger.fatal("Error in ibLogInfo(1) finding");
			e.printStackTrace();
		}
		finally
		{
			db.Finalize();
		} 
		return res;
	}
	public boolean getUserInfoByMobile(String mobileno)throws RemoteException{
		DataBaseClass db = new DataBaseClass();
		boolean flag=true;
		try{
			String sql="select ibusr_usrid from s_ibusr where ibusr_mob='"+mobileno+"' and ibusr_custRole='W' and ibusr_flag='Y' and ibusr_Status='A' ";
			ResultSet rs=db.db_select(sql);
			if(rs!=null && rs.next()){
				String userid=rs.getString("ibusr_usrid");
				flag=true;
			}
			else{
				flag=false;
			}
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			flag=false;  
		} 
		finally { 
			db.Finalize() ; 
		}
		return flag;

	}

	public boolean checkCorporateUser(String corpuserid,String loginuserid)throws RemoteException{
		DataBaseClass db = new DataBaseClass();
		boolean flag=false;
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		try{
			String sql="select ibusr_custRole,ibusr_brlinkedno  from s_ibusr where ibusr_usrid = '"+corpuserid+"'  ";
			ResultSet rs=db.db_select(sql);
			if(rs!=null && rs.next()){
				String ibusr_custRole=rs.getString("ibusr_custRole");
				String ibusr_brlinkedno=rs.getString("ibusr_brlinkedno");
				sql = "select ibusr_usrid from s_ibusr where  ibusr_brlinkedno = '"+ibusr_brlinkedno+"' or ibusr_holinkedNo = '"+ibusr_brlinkedno+"' and  ibusr_custRole in ( 'S','E','F')";
				String data[][] = bean.getData(1, sql); 
				for (int i = 0;i<data.length;i++)  
				{
					if(data[i][0].equalsIgnoreCase(loginuserid))
					{
						flag=true;
						return flag;
					} 
				}
			}    
			else{ 
				flag=false;
			}
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			flag=false;  
		} 
		finally { 
			db.Finalize() ; 
		}
		return flag;

	}
	public boolean checkAccnoforCorporate(String accountNo) throws RemoteException    
	{
		boolean isCorpAccExist = false ; 
		DataBaseClass db = new DataBaseClass();
		boolean flag=false;
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		try{
			String sql="select ibusr_accno from s_ibusr where ibusr_accno =  '"+accountNo+"'  ";
			ResultSet rs=db.db_select(sql);
			if(rs!=null && rs.next()){
				String ibusr_accno=rs.getString("ibusr_accno");
				isCorpAccExist = true;   // yes corp id for requested account exist already
			}    
			else{ 
				flag=false;
			}
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			flag=true;  
		} 
		finally { 
			db.Finalize() ; 
		}
		return isCorpAccExist;
	}

	public String[][] getScheduleNEFTList(String date)throws RemoteException{ 
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sdb=new SelectDataBeanRowCol(db);
		String sql=""; 
		BMLogger logger=new BMLogger(this.getClass());
		String[][] sReturnData=null;
		String d[]=date.split(" ");
		try{
			sql="select ibreq_kid,ibreq_desc from s_ibreq where ibreq_schDate between '"+d[0]+" "+"00:00:00' and '"+d[0]+" 23:59:59' and ibreq_flag = 'N'";
			logger.info("sqlect query:"+sql);
			sReturnData=sdb.getData(2, sql); 
			if(sReturnData!=null){
				//	  for(int i=0;i<sReturnData.length;i++){
				//		  String kid=sReturnData[i][0];
				//		  sql="update s_bulktrn set bulktrn_status='Y' where bulktrn_kid='"+kid+"'";
				//		  db.db_update(sql);

				//	  }
			}
		}catch (Exception  e) {
			//e.printStackTrace();
		}
		finally{
			db.Finalize();  
		}
		return sReturnData;
	}
	public String[][] getechkStatus(String echkNo)throws RemoteException {
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] trnInfo=null;
		String sql="";
		try	{
			sql="select bulktrn_date,bulktrn_amount,bulkTrn_status,bulktrn_fromaccount,bulktrn_accno,bulktrn_userid,"
				+"  usr.ibusr_usrEname as maker,usr1.ibusr_usrEname as checker,bulktrn_name   from s_BulkTrn ,s_ibusr usr ,s_ibusr usr1"
				+" where  usr.ibusr_usrid= bulktrn_userid  and usr1.ibusr_usrid=bulktrn_suderid and "
				+" bulkTrn_chqNo='"+echkNo+"' and bulkTrn_status not in('T','D') order by bulktrn_date desc";


			trnInfo=bean.getData(9,sql);
		} catch(Exception e){
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return trnInfo;
	}
	public String[][] getTrnStatus(String sAccNum, String fdate, String tdate,
			String trnNo, String statusType)throws RemoteException {
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] trnInfo=null;
		String sql="";
		try {
			sql="select top "+trnNo+" bulktrn_date,bulktrn_amount,bulkTrn_status,bulktrn_fromaccount,bulktrn_accno,bulktrn_userid,"
			+"  usr.ibusr_usrEname as maker,usr1.ibusr_usrEname as checker,bulktrn_name   from s_BulkTrn ,s_ibusr usr ,s_ibusr usr1"
			+" where bulktrn_status='"+statusType+"' and usr.ibusr_usrid= bulktrn_userid  and usr1.ibusr_usrid=bulktrn_suderid and "
			+" bulktrn_fromaccount='"+sAccNum+"' and bulktrn_date<='"+DateTimeFunction.strToSqlDate(tdate)+"' and bulktrn_date >='"+DateTimeFunction.strToSqlDate(fdate)+"' and bulkTrn_status not in('T','D') order by bulktrn_date desc";


			trnInfo=bean.getData(9,sql);
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return trnInfo;
	}

	public String[][] getTrnData(String sAccNum, String fdate, String tdate ,String trNo)throws RemoteException {
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		String[][] trnInfo=null;
		String sql="";
		try {		   
			sql="select top "+trNo+" bulktrn_date,bulktrn_amount,bulkTrn_status,bulktrn_fromaccount,bulktrn_accno,bulktrn_userid,"
			+"  usr.ibusr_usrEname as maker,usr1.ibusr_usrEname as checker,bulktrn_name   from s_BulkTrn ,s_ibusr usr ,s_ibusr usr1"
			+" where usr.ibusr_usrid= bulktrn_userid  and usr1.ibusr_usrid=bulktrn_suderid and "
			+" bulktrn_fromaccount='"+sAccNum+"' and bulktrn_date<='"+DateTimeFunction.strToSqlDate(tdate)+"' and bulktrn_date >='"+DateTimeFunction.strToSqlDate(fdate)+"' and bulkTrn_status not in('T','D') order by bulktrn_date desc";

			trnInfo=bean.getData(9,sql);
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			db.Finalize();
		}
		return trnInfo;
	}
	public String virtualIDs(String Accountno)throws RemoteException
	{
		BMLogger logger=new BMLogger(CentralBean.class);
		DataBaseClass db=new DataBaseClass();
		SelectDataBeanRowCol sel_db=new SelectDataBeanRowCol(db);
		String b="Failure";
		JSONArray arr=new JSONArray();
		String[][] virtualid=null;
		String sql=null;
		try
		{
			//sql="Select virtual_ibusrkid from s_ibvirtualAddress where virtual_virtualAddress='"+Accountno+"'";
			String[] accArr=Accountno.split(",");
			for(int j=0;j<accArr.length;j++){
				String acc=accArr[j];
				sql="select virtual_virtualAddress from s_ibvirtualAddress where virtual_virtualaccno='"+acc+"'";
				virtualid=sel_db.getData(1,sql);
				if (virtualid==null)
					b="Failure";
				else{
					JSONObject obj=new JSONObject();
					obj.put("accno", acc);
					JSONArray arr1=new JSONArray();
					for(int i=0;i<virtualid.length;i++){
						arr1.put(virtualid[i][0]);
					}
					obj.put("Virtualid", arr1);
					arr.put(obj);

				}
				System.out.println("Virtual IDs"+virtualid);
				//b=virtualid;
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();	
		}
		finally
		{
			db.Finalize();
		}

		return arr.toString();
	}

	// update MMID responce 
	//public String updatelogTable(String traceNo,String requestStr,String resultStr,String tranRef){
	public String updatelogTable(String userid ,String purpose ,String beniAccno, String amt,String traceNo,String requestStr,String resultStr,String tranRef,String mmid) throws RemoteException{
		DataBaseClass db = new DataBaseClass();
		BMLogger logger = new BMLogger(CentralBean.class);
		String success = "";
		try {
			db.doBeginTrans();
			String updsql =   "insert into s_impslog(impslog_userid,impslog_purpose,impslog_beniAccno,impslog_amt,impslog_datetime,impslog_request,impslog_response,impslog_trnNo,impslog_mmid)"
				+" values ('"+userid+ "','"+purpose+"', '"+beniAccno+"', '"+amt+"', '"+DateTimeFunction.getIbDateTime()+"', '"+requestStr+"', '"+resultStr+"', '"+tranRef+"','"+mmid+"')";
			db.db_Insert(updsql);      
			/*String sql = "update s_ibusr set ibusr_mmid = '" +mmid+ "' where ibusr_usrid = '"+userid+"'";     
			db.db_update(sql);*/
			success = "success"; 
			db.doCommit();
		}
		catch(Exception e){
			db.doRollback();
			success="unSuccess";
			logger.info("Error in existUserIbInfo finding");
			e.printStackTrace();
		}
		finally	{
			db.Finalize();
		}
		return "success" ; 
	}

	public String viewMMID(String userID) throws RemoteException
	{
		DataBaseClass db = new DataBaseClass();
		String ibusr_mmid = "",impslog_beniAccno="";
		SelectDataBeanRowCol bean= new SelectDataBeanRowCol(db);
		JSONArray jarr = new JSONArray(); 
		try{
			String sql="select impslog_mmid,impslog_beniAccno from s_impslog where impslog_userid = '"+userID+"' and impslog_purpose = 'generate' ";       
			ResultSet rs=db.db_select(sql);
			if(rs!=null && rs.next()){
				JSONObject jo = new JSONObject(); 
				ibusr_mmid=rs.getString("impslog_mmid");
				impslog_beniAccno=rs.getString("impslog_beniAccno");
				String data[][] = bean.getData(2, sql); 
				for (int i = 0;i<data.length;i++)  
				{
					jo = new JSONObject();
					jo.put("ibusr_mmid", data[i][0]);
					jo.put("impslog_beniAccno", data[i][1]); 
					jarr.put(jo);
				}
			}
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			ibusr_mmid="";
		} 
		finally { 
			db.Finalize() ; 
		}
		return jarr.toString();  
	}
	//   rejectpullrequest
	public String RejectPullRequest(String pullkid){

		DataBaseClass db = new DataBaseClass();
		BMLogger logger = new BMLogger(CentralBean.class);
		String success = "Request Rejected Successfully";  
		try {
			db.doBeginTrans();
			String updSQL=	"update s_ibpulltranreq set pull_status='C' where pull_kid='"+pullkid+"'";
			db.db_update(updSQL); 
			logger.info("Request updated with sql:::"+updSQL);   
			db.doCommit();
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			success = "Request Not Updated";
			db.doRollback();
		} 
		finally { 
			db.Finalize() ; 
		}
		logger.info("Request updated with sql:::"+pullkid);       
		return success; 

	} 
	// PushRequestStatus 
	public String PushRequestStatus(String userid){

		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol sel_db=new SelectDataBeanRowCol(db);
		BMLogger logger = new BMLogger(CentralBean.class);
		String responce; 
		try {
			String[][] ibpull=null;
			String sql1= "select pull_kid, pull_amount,pull_status,pull_reqfrom ,pull_reqremark,ibusr_usrEname from s_ibpulltranreq,s_ibusr where pull_ibusrkid= ibusr_kid and ibusr_usrid='"+userid+"'";
			ibpull=sel_db.getData(6,sql1);
			logger.info("Request for Request_Status:::"+sql1);     

			ArrayList<JSONObject> jarry=new ArrayList<JSONObject>();

			JSONObject jo = null;
			for (int i = 0 ; i<ibpull.length;i++){
				jo=new JSONObject();
				jo.put("pullKid", ibpull[i][0]);
				jo.put("amount", ibpull[i][1]);
				jo.put("status", ibpull[i][2]);
				jo.put("accountNo", ibpull[i][3]);
				jo.put("requester_remark", ibpull[i][4]);
				jo.put("requester_name", ibpull[i][5]);

				jarry.add(jo);      
			} 
			responce = jarry.toString();

		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			responce = "Data not fetch";   
		} 
		finally { 
			db.Finalize() ; 
		}
		logger.info("Request status sql:::"+userid);       
		return responce; 

	} 

	// PullRequestStatus 
	public String PullRequestStatus(String userid,String accountno){

		DataBaseClass db = new DataBaseClass();
		SelectDataBeanRowCol sel_db=new SelectDataBeanRowCol(db);
		BMLogger logger = new BMLogger(this.getClass());
		String responce = ""; 
		try {
			String[][] ibpull=null;
			ArrayList<JSONObject> jarry=new ArrayList<JSONObject>();
			String sql1="select pull_kid, pull_amount,pull_status,pull_reqfrom,pull_reqdate ,pull_reqremark,ibusr_usrEname from s_ibpulltranreq,s_ibusr where  pull_ibusrkid=ibusr_kid and  pull_reqfrom='"+accountno+"'";
			ibpull=sel_db.getData(7,sql1);
			logger.info("Request for Request_Status:::"+sql1);     
			if(ibpull!=null){					
				for (int i = 0 ; i<ibpull.length;i++){
					JSONObject jo = null;
					jo=new JSONObject();
					jo.put("pullKid", ibpull[i][0]);
					jo.put("amount", ibpull[i][1]);
					jo.put("status", ibpull[i][2]);
					jo.put("accountNo", ibpull[i][3]);
					jo.put("time", ibpull[i][4]);
					jo.put("requester_remark", ibpull[i][5]);
					jo.put("requester_name", ibpull[i][6]);

					jarry.add(jo);      
				} 
				responce = jarry.toString(); 
			}

		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			responce = "Data not fetch";   
		} 
		finally { 
			db.Finalize() ; 
		}
		logger.info("Request status sql:::"+userid);       
		return responce; 

	} 
}
